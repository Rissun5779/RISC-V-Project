
WS2812_Test.elf:     file format elf32-littlenios2
WS2812_Test.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x01020244

Program Header:
    LOAD off    0x00001000 vaddr 0x01020000 paddr 0x01020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x01020020 paddr 0x01020020 align 2**12
         filesz 0x000061f8 memsz 0x000061f8 flags r-x
    LOAD off    0x00007218 vaddr 0x01026218 paddr 0x01027c84 align 2**12
         filesz 0x00001a6c memsz 0x00001a6c flags rw-
    LOAD off    0x000096f0 vaddr 0x010296f0 paddr 0x010296f0 align 2**12
         filesz 0x00000000 memsz 0x00000154 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  01020000  01020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  01020020  01020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005f5c  01020244  01020244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000078  010261a0  010261a0  000071a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a6c  01026218  01027c84  00007218  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  010296f0  010296f0  000096f0  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2 00000000  01029844  01029844  00008c84  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00008c84  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000a70  00000000  00000000  00008ca8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000167fd  00000000  00000000  00009718  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000061fa  00000000  00000000  0001ff15  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00006cae  00000000  00000000  0002610f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000016c4  00000000  00000000  0002cdc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000027dc  00000000  00000000  0002e484  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004a4c  00000000  00000000  00030c60  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  000356ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000680  00000000  00000000  00035710  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0003841a  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000a  00000000  00000000  0003841d  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00038427  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00038428  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00038429  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0003842d  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00038431  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00038435  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0003843e  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00038447  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000004  00000000  00000000  00038450  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000023  00000000  00000000  00038454  2**0
                  CONTENTS, READONLY
 29 .jdi          000048a8  00000000  00000000  00038477  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000592a1  00000000  00000000  0003cd1f  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01020000 l    d  .entry	00000000 .entry
01020020 l    d  .exceptions	00000000 .exceptions
01020244 l    d  .text	00000000 .text
010261a0 l    d  .rodata	00000000 .rodata
01026218 l    d  .rwdata	00000000 .rwdata
010296f0 l    d  .bss	00000000 .bss
01029844 l    d  .onchip_memory2	00000000 .onchip_memory2
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../WS2812_Test_bsp//obj/HAL/src/crt0.o
0102028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
01020c10 l     F .text	00000008 __fp_unlock
01020c24 l     F .text	0000019c __sinit.part.1
01020dc0 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
01026218 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_close.c
0102386c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
01023978 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
010239a4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
01023a90 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
01023b70 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
01023c5c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
01023e30 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
01027c74 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
010240ac l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
010241e0 l     F .text	00000034 alt_dev_reg
01026bec l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
010244d0 l     F .text	0000020c altera_avalon_jtag_uart_irq
010246dc l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
01024d14 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
010250d4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
01025548 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
01025688 l     F .text	0000003c alt_get_errno
010256c4 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
01029718 g     O .bss	00000004 alt_instruction_exception_handler
01023664 g     F .text	00000054 _isatty_r
01023d6c g     F .text	0000007c alt_main
01020aa4 g     F .text	000000c0 _puts_r
01029744 g     O .bss	00000100 alt_irq
0102338c g     F .text	00000060 _lseek_r
01027c84 g       *ABS*	00000000 __flash_rwdata_start
01029844 g       *ABS*	00000000 __alt_heap_start
01022940 g     F .text	0000005c __sseek
01020f60 g     F .text	00000010 __sinit
01020dc8 g     F .text	00000068 __sfmoreglue
01023e0c g     F .text	00000024 __malloc_unlock
01020370 g     F .text	0000007c WS2812_All_on
0102202c g     F .text	0000015c memmove
01020f48 g     F .text	00000018 _cleanup
01025a80 g     F .text	00000024 altera_nios2_gen2_irq_init
01020000 g     F .entry	0000001c __reset
01020020 g       *ABS*	00000000 __flash_exceptions_start
01023608 g     F .text	0000005c _fstat_r
010296fc g     O .bss	00000004 errno
010228bc g     F .text	00000008 __seofread
01029704 g     O .bss	00000004 alt_argv
0102fc4c g       *ABS*	00000000 _gp
0102407c g     F .text	00000030 usleep
01026a6c g     O .rwdata	00000180 alt_fd_list
01025aa4 g     F .text	00000090 alt_find_dev
01021ee4 g     F .text	00000148 memcpy
01020c18 g     F .text	0000000c _cleanup_r
0102560c g     F .text	0000007c alt_io_redirect
010261a0 g       *ABS*	00000000 __DTOR_END__
01020b64 g     F .text	00000014 puts
01025d70 g     F .text	0000009c alt_exception_cause_generated_bad_addr
010248d4 g     F .text	0000021c altera_avalon_jtag_uart_read
010237b0 g     F .text	00000064 .hidden __udivsi3
01023acc g     F .text	000000a4 isatty
01025ce0 g     F .text	00000090 alt_icache_flush
010296f8 g     O .bss	00000004 __malloc_top_pad
01020468 g     F .text	000000a0 WS2812_LED_SET_ALL
01020fb0 g     F .text	000004bc __sfvwrite_r
01022814 g     F .text	00000054 _sbrk_r
010235a8 g     F .text	00000060 _read_r
01027c6c g     O .rwdata	00000004 alt_max_fd
01022bac g     F .text	000000f0 _fclose_r
01022f28 g     F .text	00000030 fflush
010296f4 g     O .bss	00000004 __malloc_max_sbrked_mem
01023c98 g     F .text	000000d4 lseek
01027c4c g     O .rwdata	00000004 _global_impure_ptr
010222b0 g     F .text	00000564 _realloc_r
01029844 g       *ABS*	00000000 __bss_end
01025458 g     F .text	000000f0 alt_iic_isr_register
01025978 g     F .text	00000108 alt_tick
01020f80 g     F .text	00000018 __fp_lock_all
0102540c g     F .text	0000004c alt_ic_irq_enabled
010258dc g     F .text	0000009c alt_alarm_stop
0102970c g     O .bss	00000004 alt_irq_active
010200fc g     F .exceptions	000000d4 alt_irq_handler
01026a44 g     O .rwdata	00000028 alt_dev_null
0102508c g     F .text	00000048 alt_dcache_flush_all
01027c84 g       *ABS*	00000000 __ram_rwdata_end
01027c64 g     O .rwdata	00000008 alt_dev_list
010240e8 g     F .text	000000f8 write
01026218 g       *ABS*	00000000 __ram_rodata_end
010239e0 g     F .text	000000b0 fstat
01023814 g     F .text	00000058 .hidden __umodsi3
01029844 g       *ABS*	00000000 end
01024410 g     F .text	000000c0 altera_avalon_jtag_uart_init
010201d0 g     F .exceptions	00000074 alt_instruction_exception_entry
010261a0 g       *ABS*	00000000 __CTOR_LIST__
0103d4c0 g       *ABS*	00000000 __alt_stack_pointer
01024d8c g     F .text	0000007c alt_avalon_timer_sc_init
01024af0 g     F .text	00000224 altera_avalon_jtag_uart_write
01020f70 g     F .text	00000004 __sfp_lock_acquire
01021e00 g     F .text	000000e4 memchr
0102307c g     F .text	00000310 _free_r
01025fec g     F .text	00000180 __call_exitprocs
01027c54 g     O .rwdata	00000004 __malloc_sbrk_base
01020244 g     F .text	0000004c _start
01029710 g     O .bss	00000004 _alt_tick_rate
01029714 g     O .bss	00000004 _alt_nticks
01023e6c g     F .text	000000fc read
0102424c g     F .text	00000060 alt_sys_init
01025ed4 g     F .text	00000118 __register_exitproc
0102477c g     F .text	00000068 altera_avalon_jtag_uart_close
01026218 g       *ABS*	00000000 __ram_rwdata_start
010261a0 g       *ABS*	00000000 __ram_rodata_start
0102971c g     O .bss	00000028 __malloc_current_mallinfo
010242ac g     F .text	00000060 altera_avalon_jtag_uart_read_fd
01025c3c g     F .text	000000a4 alt_get_fd
01024f34 g     F .text	00000158 alt_busy_sleep
01022b58 g     F .text	00000054 _close_r
01025e58 g     F .text	0000007c memcmp
0102436c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
01029844 g       *ABS*	00000000 __alt_stack_base
010243bc g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
01022a04 g     F .text	00000154 __swsetup_r
01020e30 g     F .text	00000118 __sfp
0102663c g     O .rwdata	00000408 __malloc_av_
01020f7c g     F .text	00000004 __sinit_lock_release
01022868 g     F .text	00000054 __sread
01025b34 g     F .text	00000108 alt_find_file
01020290 g     F .text	00000064 WS2812_update
01025110 g     F .text	000000a4 alt_dev_llist_insert
01023de8 g     F .text	00000024 __malloc_lock
01023fcc g     F .text	000000b0 sbrk
01022ecc g     F .text	0000005c _fflush_r
010296f0 g       *ABS*	00000000 __bss_start
01022188 g     F .text	00000128 memset
01020508 g     F .text	0000059c main
01029708 g     O .bss	00000004 alt_envp
010296f0 g     O .bss	00000004 __malloc_max_total_mem
0102430c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0102299c g     F .text	00000008 __sclose
0103d4c0 g       *ABS*	00000000 __alt_heap_limit
01022c9c g     F .text	00000014 fclose
010215f4 g     F .text	0000080c _malloc_r
01027c70 g     O .rwdata	00000004 alt_errno
0102146c g     F .text	000000c4 _fwalk
010236b8 g     F .text	00000084 .hidden __divsi3
01022f58 g     F .text	00000124 _malloc_trim_r
010261a0 g       *ABS*	00000000 __CTOR_END__
010261a0 g       *ABS*	00000000 __flash_rodata_start
010261a0 g       *ABS*	00000000 __DTOR_LIST__
01024214 g     F .text	00000038 alt_irq_init
01023f68 g     F .text	00000064 alt_release_fd
010202f4 g     F .text	0000007c WS2812_All_off
01025e0c g     F .text	00000014 atexit
010229a4 g     F .text	00000060 _write_r
01027c50 g     O .rwdata	00000004 _impure_ptr
01029700 g     O .bss	00000004 alt_argc
01022cb0 g     F .text	0000021c __sflush_r
01025214 g     F .text	00000060 _do_dtors
01020020 g       .exceptions	00000000 alt_irq_entry
01020f98 g     F .text	00000018 __fp_unlock_all
01027c5c g     O .rwdata	00000008 alt_fs_list
01020020 g       *ABS*	00000000 __ram_exceptions_start
01020000 g       *ABS*	00000000 __alt_mem_onchip_memory2
010252a8 g     F .text	00000050 alt_ic_isr_register
01027c84 g       *ABS*	00000000 _edata
01029844 g       *ABS*	00000000 _end
01020244 g       *ABS*	00000000 __ram_exceptions_end
010247e4 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
01025380 g     F .text	0000008c alt_ic_irq_disable
010228c4 g     F .text	0000007c __swrite
01027c58 g     O .rwdata	00000004 __malloc_trim_threshold
01025e20 g     F .text	00000038 exit
01021530 g     F .text	000000c4 _fwalk_reent
0102373c g     F .text	00000074 .hidden __modsi3
010203ec g     F .text	0000007c WS2812_LED_SET
0103d4c0 g       *ABS*	00000000 __alt_data_end
01020020 g     F .exceptions	00000000 alt_exception
01020f74 g     F .text	00000004 __sfp_lock_release
0102616c g     F .text	00000034 _exit
01024e08 g     F .text	0000012c alt_alarm_start
010233ec g     F .text	000001bc __smakebuf_r
01020b78 g     F .text	00000098 strlen
01025788 g     F .text	00000154 open
01025274 g     F .text	00000034 alt_icache_flush_all
01027c78 g     O .rwdata	00000004 alt_priority_mask
010252f8 g     F .text	00000088 alt_ic_irq_enable
01027c7c g     O .rwdata	00000008 alt_alarm_list
010251b4 g     F .text	00000060 _do_ctors
010238a8 g     F .text	000000d0 close
01023bd8 g     F .text	00000084 alt_load
01020f78 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

01020000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 1020000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 1020004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 1020008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 102000c:	00bffd16 	blt	zero,r2,1020004 <__alt_data_end+0xfffe2b44>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 1020010:	004040b4 	movhi	at,258
    ori r1, r1, %lo(_start)
 1020014:	08409114 	ori	at,at,580
    jmp r1
 1020018:	0800683a 	jmp	at
 102001c:	00000000 	call	0 <__reset-0x1020000>

Disassembly of section .exceptions:

01020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 1020020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 1020024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 1020028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 102002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 1020030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 1020034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 1020038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 102003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 1020040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 1020044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 1020048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 102004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 1020050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 1020054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 1020058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 102005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 1020060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 1020064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 1020068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 102006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 1020070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 1020074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 1020078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 102007c:	10000326 	beq	r2,zero,102008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 1020080:	20000226 	beq	r4,zero,102008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 1020084:	10200fc0 	call	10200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 1020088:	00000706 	br	10200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 102008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 1020090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 1020094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 1020098:	10201d00 	call	10201d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 102009c:	1000021e 	bne	r2,zero,10200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 10200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 10200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 10200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 10200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 10200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 10200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 10200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 10200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 10200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 10200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 10200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 10200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 10200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 10200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 10200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 10200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 10200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 10200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 10200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 10200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 10200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 10200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 10200f8:	ef80083a 	eret

010200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 10200fc:	defff904 	addi	sp,sp,-28
 1020100:	dfc00615 	stw	ra,24(sp)
 1020104:	df000515 	stw	fp,20(sp)
 1020108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 102010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1020110:	0005313a 	rdctl	r2,ipending
 1020114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 1020118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 102011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 1020120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 1020124:	00800044 	movi	r2,1
 1020128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 102012c:	e0fffb17 	ldw	r3,-20(fp)
 1020130:	e0bffc17 	ldw	r2,-16(fp)
 1020134:	1884703a 	and	r2,r3,r2
 1020138:	10001426 	beq	r2,zero,102018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 102013c:	008040f4 	movhi	r2,259
 1020140:	10a5d104 	addi	r2,r2,-26812
 1020144:	e0fffd17 	ldw	r3,-12(fp)
 1020148:	180690fa 	slli	r3,r3,3
 102014c:	10c5883a 	add	r2,r2,r3
 1020150:	10c00017 	ldw	r3,0(r2)
 1020154:	008040f4 	movhi	r2,259
 1020158:	10a5d104 	addi	r2,r2,-26812
 102015c:	e13ffd17 	ldw	r4,-12(fp)
 1020160:	200890fa 	slli	r4,r4,3
 1020164:	1105883a 	add	r2,r2,r4
 1020168:	10800104 	addi	r2,r2,4
 102016c:	10800017 	ldw	r2,0(r2)
 1020170:	1009883a 	mov	r4,r2
 1020174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 1020178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 102017c:	0005313a 	rdctl	r2,ipending
 1020180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 1020184:	e0bfff17 	ldw	r2,-4(fp)
 1020188:	00000706 	br	10201a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 102018c:	e0bffc17 	ldw	r2,-16(fp)
 1020190:	1085883a 	add	r2,r2,r2
 1020194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 1020198:	e0bffd17 	ldw	r2,-12(fp)
 102019c:	10800044 	addi	r2,r2,1
 10201a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 10201a4:	003fe106 	br	102012c <__alt_data_end+0xfffe2c6c>

    active = alt_irq_pending ();
 10201a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 10201ac:	e0bffb17 	ldw	r2,-20(fp)
 10201b0:	103fdb1e 	bne	r2,zero,1020120 <__alt_data_end+0xfffe2c60>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 10201b4:	0001883a 	nop
}
 10201b8:	0001883a 	nop
 10201bc:	e037883a 	mov	sp,fp
 10201c0:	dfc00117 	ldw	ra,4(sp)
 10201c4:	df000017 	ldw	fp,0(sp)
 10201c8:	dec00204 	addi	sp,sp,8
 10201cc:	f800283a 	ret

010201d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 10201d0:	defffb04 	addi	sp,sp,-20
 10201d4:	dfc00415 	stw	ra,16(sp)
 10201d8:	df000315 	stw	fp,12(sp)
 10201dc:	df000304 	addi	fp,sp,12
 10201e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 10201e4:	000531fa 	rdctl	r2,exception
 10201e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 10201ec:	e0bffd17 	ldw	r2,-12(fp)
 10201f0:	10801f0c 	andi	r2,r2,124
 10201f4:	1004d0ba 	srli	r2,r2,2
 10201f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 10201fc:	0005333a 	rdctl	r2,badaddr
 1020200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1020204:	d0a6b317 	ldw	r2,-25908(gp)
 1020208:	10000726 	beq	r2,zero,1020228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 102020c:	d0a6b317 	ldw	r2,-25908(gp)
 1020210:	e0fffd17 	ldw	r3,-12(fp)
 1020214:	e1bffe17 	ldw	r6,-8(fp)
 1020218:	e17fff17 	ldw	r5,-4(fp)
 102021c:	1809883a 	mov	r4,r3
 1020220:	103ee83a 	callr	r2
 1020224:	00000206 	br	1020230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 1020228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 102022c:	0005883a 	mov	r2,zero
}
 1020230:	e037883a 	mov	sp,fp
 1020234:	dfc00117 	ldw	ra,4(sp)
 1020238:	df000017 	ldw	fp,0(sp)
 102023c:	dec00204 	addi	sp,sp,8
 1020240:	f800283a 	ret

Disassembly of section .text:

01020244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 1020244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 1020248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 102024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 1020250:	00bffd16 	blt	zero,r2,1020248 <__alt_data_end+0xfffe2d88>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 1020254:	06c040f4 	movhi	sp,259
    ori sp, sp, %lo(__alt_stack_pointer)
 1020258:	def53014 	ori	sp,sp,54464
    movhi gp, %hi(_gp)
 102025c:	068040b4 	movhi	gp,258
    ori gp, gp, %lo(_gp)
 1020260:	d6bf1314 	ori	gp,gp,64588
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 1020264:	008040b4 	movhi	r2,258
    ori r2, r2, %lo(__bss_start)
 1020268:	10a5bc14 	ori	r2,r2,38640

    movhi r3, %hi(__bss_end)
 102026c:	00c040b4 	movhi	r3,258
    ori r3, r3, %lo(__bss_end)
 1020270:	18e61114 	ori	r3,r3,38980

    beq r2, r3, 1f
 1020274:	10c00326 	beq	r2,r3,1020284 <_start+0x40>

0:
    stw zero, (r2)
 1020278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 102027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 1020280:	10fffd36 	bltu	r2,r3,1020278 <__alt_data_end+0xfffe2db8>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 1020284:	1023bd80 	call	1023bd8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 1020288:	1023d6c0 	call	1023d6c <alt_main>

0102028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 102028c:	003fff06 	br	102028c <__alt_data_end+0xfffe2dcc>

01020290 <WS2812_update>:
#define DEMO_YELLOW 62,62,0
#define DEMO_GREEN 24,64,10
#define DEMO_PURPLE 40,8,60


void WS2812_update(){
 1020290:	defffe04 	addi	sp,sp,-8
 1020294:	dfc00115 	stw	ra,4(sp)
 1020298:	df000015 	stw	fp,0(sp)
 102029c:	d839883a 	mov	fp,sp


	IOWR(WS2812_CONTROL_BASE,0x2,0x1);
 10202a0:	00c00044 	movi	r3,1
 10202a4:	00804134 	movhi	r2,260
 10202a8:	10840604 	addi	r2,r2,4120
 10202ac:	10c00035 	stwio	r3,0(r2)
	usleep(1);
 10202b0:	01000044 	movi	r4,1
 10202b4:	102407c0 	call	102407c <usleep>
	IOWR(WS2812_CONTROL_BASE,0x2,0x0);
 10202b8:	0007883a 	mov	r3,zero
 10202bc:	00804134 	movhi	r2,260
 10202c0:	10840604 	addi	r2,r2,4120
 10202c4:	10c00035 	stwio	r3,0(r2)
	while(!IORD(WS2812_CONTROL_BASE,0x3));
 10202c8:	0001883a 	nop
 10202cc:	00804134 	movhi	r2,260
 10202d0:	10840704 	addi	r2,r2,4124
 10202d4:	10800037 	ldwio	r2,0(r2)
 10202d8:	103ffc26 	beq	r2,zero,10202cc <__alt_data_end+0xfffe2e0c>


}
 10202dc:	0001883a 	nop
 10202e0:	e037883a 	mov	sp,fp
 10202e4:	dfc00117 	ldw	ra,4(sp)
 10202e8:	df000017 	ldw	fp,0(sp)
 10202ec:	dec00204 	addi	sp,sp,8
 10202f0:	f800283a 	ret

010202f4 <WS2812_All_off>:


void WS2812_All_off(){
 10202f4:	defffd04 	addi	sp,sp,-12
 10202f8:	dfc00215 	stw	ra,8(sp)
 10202fc:	df000115 	stw	fp,4(sp)
 1020300:	df000104 	addi	fp,sp,4

	IOWR(WS2812_CONTROL_BASE,2,0x0);
 1020304:	0007883a 	mov	r3,zero
 1020308:	00804134 	movhi	r2,260
 102030c:	10840604 	addi	r2,r2,4120
 1020310:	10c00035 	stwio	r3,0(r2)
	alt_u32 i;
	for(i=0;i<LED_NUM;i++){
 1020314:	e03fff15 	stw	zero,-4(fp)
 1020318:	00000b06 	br	1020348 <WS2812_All_off+0x54>
		IOWR(WS2812_CONTROL_BASE,0,i);
 102031c:	e0ffff17 	ldw	r3,-4(fp)
 1020320:	00804134 	movhi	r2,260
 1020324:	10840404 	addi	r2,r2,4112
 1020328:	10c00035 	stwio	r3,0(r2)
		IOWR(WS2812_CONTROL_BASE,0x1,0x0);
 102032c:	0007883a 	mov	r3,zero
 1020330:	00804134 	movhi	r2,260
 1020334:	10840504 	addi	r2,r2,4116
 1020338:	10c00035 	stwio	r3,0(r2)

void WS2812_All_off(){

	IOWR(WS2812_CONTROL_BASE,2,0x0);
	alt_u32 i;
	for(i=0;i<LED_NUM;i++){
 102033c:	e0bfff17 	ldw	r2,-4(fp)
 1020340:	10800044 	addi	r2,r2,1
 1020344:	e0bfff15 	stw	r2,-4(fp)
 1020348:	e0bfff17 	ldw	r2,-4(fp)
 102034c:	108023f0 	cmpltui	r2,r2,143
 1020350:	103ff21e 	bne	r2,zero,102031c <__alt_data_end+0xfffe2e5c>
		IOWR(WS2812_CONTROL_BASE,0,i);
		IOWR(WS2812_CONTROL_BASE,0x1,0x0);
	}
	WS2812_update();
 1020354:	10202900 	call	1020290 <WS2812_update>
}
 1020358:	0001883a 	nop
 102035c:	e037883a 	mov	sp,fp
 1020360:	dfc00117 	ldw	ra,4(sp)
 1020364:	df000017 	ldw	fp,0(sp)
 1020368:	dec00204 	addi	sp,sp,8
 102036c:	f800283a 	ret

01020370 <WS2812_All_on>:

void WS2812_All_on(){
 1020370:	defffd04 	addi	sp,sp,-12
 1020374:	dfc00215 	stw	ra,8(sp)
 1020378:	df000115 	stw	fp,4(sp)
 102037c:	df000104 	addi	fp,sp,4

	IOWR(WS2812_CONTROL_BASE,2,0x0);
 1020380:	0007883a 	mov	r3,zero
 1020384:	00804134 	movhi	r2,260
 1020388:	10840604 	addi	r2,r2,4120
 102038c:	10c00035 	stwio	r3,0(r2)
	alt_u32 i;
	for(i=0;i<LED_NUM;i++){
 1020390:	e03fff15 	stw	zero,-4(fp)
 1020394:	00000b06 	br	10203c4 <WS2812_All_on+0x54>
		IOWR(WS2812_CONTROL_BASE,0,i);
 1020398:	e0ffff17 	ldw	r3,-4(fp)
 102039c:	00804134 	movhi	r2,260
 10203a0:	10840404 	addi	r2,r2,4112
 10203a4:	10c00035 	stwio	r3,0(r2)
		IOWR(WS2812_CONTROL_BASE,0x1,0xffffffff);
 10203a8:	00ffffc4 	movi	r3,-1
 10203ac:	00804134 	movhi	r2,260
 10203b0:	10840504 	addi	r2,r2,4116
 10203b4:	10c00035 	stwio	r3,0(r2)

void WS2812_All_on(){

	IOWR(WS2812_CONTROL_BASE,2,0x0);
	alt_u32 i;
	for(i=0;i<LED_NUM;i++){
 10203b8:	e0bfff17 	ldw	r2,-4(fp)
 10203bc:	10800044 	addi	r2,r2,1
 10203c0:	e0bfff15 	stw	r2,-4(fp)
 10203c4:	e0bfff17 	ldw	r2,-4(fp)
 10203c8:	108023f0 	cmpltui	r2,r2,143
 10203cc:	103ff21e 	bne	r2,zero,1020398 <__alt_data_end+0xfffe2ed8>
		IOWR(WS2812_CONTROL_BASE,0,i);
		IOWR(WS2812_CONTROL_BASE,0x1,0xffffffff);
	}
	WS2812_update();
 10203d0:	10202900 	call	1020290 <WS2812_update>

}
 10203d4:	0001883a 	nop
 10203d8:	e037883a 	mov	sp,fp
 10203dc:	dfc00117 	ldw	ra,4(sp)
 10203e0:	df000017 	ldw	fp,0(sp)
 10203e4:	dec00204 	addi	sp,sp,8
 10203e8:	f800283a 	ret

010203ec <WS2812_LED_SET>:

void WS2812_LED_SET(alt_u32 SelLED,alt_u8 R_Color, alt_u8 G_Color,  alt_u8 B_Color){
 10203ec:	defffa04 	addi	sp,sp,-24
 10203f0:	df000515 	stw	fp,20(sp)
 10203f4:	df000504 	addi	fp,sp,20
 10203f8:	e13ffc15 	stw	r4,-16(fp)
 10203fc:	2809883a 	mov	r4,r5
 1020400:	3007883a 	mov	r3,r6
 1020404:	3805883a 	mov	r2,r7
 1020408:	e13ffd05 	stb	r4,-12(fp)
 102040c:	e0fffe05 	stb	r3,-8(fp)
 1020410:	e0bfff05 	stb	r2,-4(fp)

	/* R:8bit G:8bit B:8Bit*/
	alt_u32 Color;
	Color = (R_Color<<16) | (G_Color<<8) | (B_Color);
 1020414:	e0bffd03 	ldbu	r2,-12(fp)
 1020418:	1006943a 	slli	r3,r2,16
 102041c:	e0bffe03 	ldbu	r2,-8(fp)
 1020420:	1004923a 	slli	r2,r2,8
 1020424:	1886b03a 	or	r3,r3,r2
 1020428:	e0bfff03 	ldbu	r2,-4(fp)
 102042c:	1884b03a 	or	r2,r3,r2
 1020430:	e0bffb15 	stw	r2,-20(fp)
	IOWR(WS2812_CONTROL_BASE,0,SelLED);
 1020434:	e0fffc17 	ldw	r3,-16(fp)
 1020438:	00804134 	movhi	r2,260
 102043c:	10840404 	addi	r2,r2,4112
 1020440:	10c00035 	stwio	r3,0(r2)
	IOWR(WS2812_CONTROL_BASE,0x1,Color);
 1020444:	e0fffb17 	ldw	r3,-20(fp)
 1020448:	00804134 	movhi	r2,260
 102044c:	10840504 	addi	r2,r2,4116
 1020450:	10c00035 	stwio	r3,0(r2)

}
 1020454:	0001883a 	nop
 1020458:	e037883a 	mov	sp,fp
 102045c:	df000017 	ldw	fp,0(sp)
 1020460:	dec00104 	addi	sp,sp,4
 1020464:	f800283a 	ret

01020468 <WS2812_LED_SET_ALL>:

void WS2812_LED_SET_ALL(alt_u8 R_Color, alt_u8 G_Color,  alt_u8 B_Color){
 1020468:	defff904 	addi	sp,sp,-28
 102046c:	dfc00615 	stw	ra,24(sp)
 1020470:	df000515 	stw	fp,20(sp)
 1020474:	df000504 	addi	fp,sp,20
 1020478:	2807883a 	mov	r3,r5
 102047c:	3005883a 	mov	r2,r6
 1020480:	e13ffd05 	stb	r4,-12(fp)
 1020484:	e0fffe05 	stb	r3,-8(fp)
 1020488:	e0bfff05 	stb	r2,-4(fp)

	/* R:8bit G:8bit B:8Bit*/
	alt_u32 Color;
	Color = (R_Color<<16) | (G_Color<<8) | (B_Color);
 102048c:	e0bffd03 	ldbu	r2,-12(fp)
 1020490:	1006943a 	slli	r3,r2,16
 1020494:	e0bffe03 	ldbu	r2,-8(fp)
 1020498:	1004923a 	slli	r2,r2,8
 102049c:	1886b03a 	or	r3,r3,r2
 10204a0:	e0bfff03 	ldbu	r2,-4(fp)
 10204a4:	1884b03a 	or	r2,r3,r2
 10204a8:	e0bffc15 	stw	r2,-16(fp)
	alt_u32 i;
	for(i=0;i<LED_NUM;i++){
 10204ac:	e03ffb15 	stw	zero,-20(fp)
 10204b0:	00000b06 	br	10204e0 <WS2812_LED_SET_ALL+0x78>
		IOWR(WS2812_CONTROL_BASE,0,i);
 10204b4:	e0fffb17 	ldw	r3,-20(fp)
 10204b8:	00804134 	movhi	r2,260
 10204bc:	10840404 	addi	r2,r2,4112
 10204c0:	10c00035 	stwio	r3,0(r2)
		IOWR(WS2812_CONTROL_BASE,0x1,Color);
 10204c4:	e0fffc17 	ldw	r3,-16(fp)
 10204c8:	00804134 	movhi	r2,260
 10204cc:	10840504 	addi	r2,r2,4116
 10204d0:	10c00035 	stwio	r3,0(r2)

	/* R:8bit G:8bit B:8Bit*/
	alt_u32 Color;
	Color = (R_Color<<16) | (G_Color<<8) | (B_Color);
	alt_u32 i;
	for(i=0;i<LED_NUM;i++){
 10204d4:	e0bffb17 	ldw	r2,-20(fp)
 10204d8:	10800044 	addi	r2,r2,1
 10204dc:	e0bffb15 	stw	r2,-20(fp)
 10204e0:	e0bffb17 	ldw	r2,-20(fp)
 10204e4:	108023f0 	cmpltui	r2,r2,143
 10204e8:	103ff21e 	bne	r2,zero,10204b4 <__alt_data_end+0xfffe2ff4>
		IOWR(WS2812_CONTROL_BASE,0,i);
		IOWR(WS2812_CONTROL_BASE,0x1,Color);
	}
	WS2812_update();
 10204ec:	10202900 	call	1020290 <WS2812_update>
}
 10204f0:	0001883a 	nop
 10204f4:	e037883a 	mov	sp,fp
 10204f8:	dfc00117 	ldw	ra,4(sp)
 10204fc:	df000017 	ldw	fp,0(sp)
 1020500:	dec00204 	addi	sp,sp,8
 1020504:	f800283a 	ret

01020508 <main>:


int main()
{
 1020508:	defffc04 	addi	sp,sp,-16
 102050c:	dfc00315 	stw	ra,12(sp)
 1020510:	df000215 	stw	fp,8(sp)
 1020514:	df000204 	addi	fp,sp,8
  int i=0,j=0;
 1020518:	e03ffe15 	stw	zero,-8(fp)
 102051c:	e03fff15 	stw	zero,-4(fp)
  printf("=====WS2812 EXT LED Test=====\n");
 1020520:	010040b4 	movhi	r4,258
 1020524:	21186804 	addi	r4,r4,24992
 1020528:	1020b640 	call	1020b64 <puts>
  WS2812_All_off();
 102052c:	10202f40 	call	10202f4 <WS2812_All_off>
  usleep(1000000);
 1020530:	010003f4 	movhi	r4,15
 1020534:	21109004 	addi	r4,r4,16960
 1020538:	102407c0 	call	102407c <usleep>
  while(1){

	  printf("Red color\n");
 102053c:	010040b4 	movhi	r4,258
 1020540:	21187004 	addi	r4,r4,25024
 1020544:	1020b640 	call	1020b64 <puts>
	  WS2812_All_off();
 1020548:	10202f40 	call	10202f4 <WS2812_All_off>
	  for(i=0;i<LED_NUM-7;i+=7){
 102054c:	e03ffe15 	stw	zero,-8(fp)
 1020550:	00003d06 	br	1020648 <main+0x140>
		  WS2812_LED_SET(i,30,0,0);
 1020554:	e0bffe17 	ldw	r2,-8(fp)
 1020558:	000f883a 	mov	r7,zero
 102055c:	000d883a 	mov	r6,zero
 1020560:	01400784 	movi	r5,30
 1020564:	1009883a 	mov	r4,r2
 1020568:	10203ec0 	call	10203ec <WS2812_LED_SET>
		  WS2812_LED_SET(i+1,60,0,0);
 102056c:	e0bffe17 	ldw	r2,-8(fp)
 1020570:	10800044 	addi	r2,r2,1
 1020574:	000f883a 	mov	r7,zero
 1020578:	000d883a 	mov	r6,zero
 102057c:	01400f04 	movi	r5,60
 1020580:	1009883a 	mov	r4,r2
 1020584:	10203ec0 	call	10203ec <WS2812_LED_SET>
		  WS2812_LED_SET(i+2,90,0,0);
 1020588:	e0bffe17 	ldw	r2,-8(fp)
 102058c:	10800084 	addi	r2,r2,2
 1020590:	000f883a 	mov	r7,zero
 1020594:	000d883a 	mov	r6,zero
 1020598:	01401684 	movi	r5,90
 102059c:	1009883a 	mov	r4,r2
 10205a0:	10203ec0 	call	10203ec <WS2812_LED_SET>
		  WS2812_LED_SET(i+3,120,0,0);
 10205a4:	e0bffe17 	ldw	r2,-8(fp)
 10205a8:	108000c4 	addi	r2,r2,3
 10205ac:	000f883a 	mov	r7,zero
 10205b0:	000d883a 	mov	r6,zero
 10205b4:	01401e04 	movi	r5,120
 10205b8:	1009883a 	mov	r4,r2
 10205bc:	10203ec0 	call	10203ec <WS2812_LED_SET>
		  WS2812_LED_SET(i+4,150,0,0);
 10205c0:	e0bffe17 	ldw	r2,-8(fp)
 10205c4:	10800104 	addi	r2,r2,4
 10205c8:	000f883a 	mov	r7,zero
 10205cc:	000d883a 	mov	r6,zero
 10205d0:	01402584 	movi	r5,150
 10205d4:	1009883a 	mov	r4,r2
 10205d8:	10203ec0 	call	10203ec <WS2812_LED_SET>
		  WS2812_LED_SET(i+5,180,0,0);
 10205dc:	e0bffe17 	ldw	r2,-8(fp)
 10205e0:	10800144 	addi	r2,r2,5
 10205e4:	000f883a 	mov	r7,zero
 10205e8:	000d883a 	mov	r6,zero
 10205ec:	01402d04 	movi	r5,180
 10205f0:	1009883a 	mov	r4,r2
 10205f4:	10203ec0 	call	10203ec <WS2812_LED_SET>
		  WS2812_LED_SET(i+6,210,0,0);
 10205f8:	e0bffe17 	ldw	r2,-8(fp)
 10205fc:	10800184 	addi	r2,r2,6
 1020600:	000f883a 	mov	r7,zero
 1020604:	000d883a 	mov	r6,zero
 1020608:	01403484 	movi	r5,210
 102060c:	1009883a 	mov	r4,r2
 1020610:	10203ec0 	call	10203ec <WS2812_LED_SET>
		  WS2812_LED_SET(i+7,240,0,0);
 1020614:	e0bffe17 	ldw	r2,-8(fp)
 1020618:	108001c4 	addi	r2,r2,7
 102061c:	000f883a 	mov	r7,zero
 1020620:	000d883a 	mov	r6,zero
 1020624:	01403c04 	movi	r5,240
 1020628:	1009883a 	mov	r4,r2
 102062c:	10203ec0 	call	10203ec <WS2812_LED_SET>
		  WS2812_update();
 1020630:	10202900 	call	1020290 <WS2812_update>
		  usleep(10000);
 1020634:	0109c404 	movi	r4,10000
 1020638:	102407c0 	call	102407c <usleep>
  usleep(1000000);
  while(1){

	  printf("Red color\n");
	  WS2812_All_off();
	  for(i=0;i<LED_NUM-7;i+=7){
 102063c:	e0bffe17 	ldw	r2,-8(fp)
 1020640:	108001c4 	addi	r2,r2,7
 1020644:	e0bffe15 	stw	r2,-8(fp)
 1020648:	e0bffe17 	ldw	r2,-8(fp)
 102064c:	10802210 	cmplti	r2,r2,136
 1020650:	103fc01e 	bne	r2,zero,1020554 <__alt_data_end+0xfffe3094>
		  WS2812_LED_SET(i+7,240,0,0);
		  WS2812_update();
		  usleep(10000);

	  }
	  for(i=0;i<15;i++){
 1020654:	e03ffe15 	stw	zero,-8(fp)
 1020658:	00000d06 	br	1020690 <main+0x188>
		  WS2812_LED_SET_ALL(i*10,0,0);
 102065c:	e0bffe17 	ldw	r2,-8(fp)
 1020660:	108002a4 	muli	r2,r2,10
 1020664:	10803fcc 	andi	r2,r2,255
 1020668:	000d883a 	mov	r6,zero
 102066c:	000b883a 	mov	r5,zero
 1020670:	1009883a 	mov	r4,r2
 1020674:	10204680 	call	1020468 <WS2812_LED_SET_ALL>
		  usleep(100000);
 1020678:	010000b4 	movhi	r4,2
 102067c:	2121a804 	addi	r4,r4,-31072
 1020680:	102407c0 	call	102407c <usleep>
		  WS2812_LED_SET(i+7,240,0,0);
		  WS2812_update();
		  usleep(10000);

	  }
	  for(i=0;i<15;i++){
 1020684:	e0bffe17 	ldw	r2,-8(fp)
 1020688:	10800044 	addi	r2,r2,1
 102068c:	e0bffe15 	stw	r2,-8(fp)
 1020690:	e0bffe17 	ldw	r2,-8(fp)
 1020694:	108003d0 	cmplti	r2,r2,15
 1020698:	103ff01e 	bne	r2,zero,102065c <__alt_data_end+0xfffe319c>
		  WS2812_LED_SET_ALL(i*10,0,0);
		  usleep(100000);
	  }
	  printf("Green color\n");
 102069c:	010040b4 	movhi	r4,258
 10206a0:	21187304 	addi	r4,r4,25036
 10206a4:	1020b640 	call	1020b64 <puts>
	  WS2812_All_off();
 10206a8:	10202f40 	call	10202f4 <WS2812_All_off>
	  for(i=0;i<LED_NUM-7;i+=7){
 10206ac:	e03ffe15 	stw	zero,-8(fp)
 10206b0:	00003d06 	br	10207a8 <main+0x2a0>
		  WS2812_LED_SET(i,0,30,0);
 10206b4:	e0bffe17 	ldw	r2,-8(fp)
 10206b8:	000f883a 	mov	r7,zero
 10206bc:	01800784 	movi	r6,30
 10206c0:	000b883a 	mov	r5,zero
 10206c4:	1009883a 	mov	r4,r2
 10206c8:	10203ec0 	call	10203ec <WS2812_LED_SET>
		  WS2812_LED_SET(i+1,0,60,0);
 10206cc:	e0bffe17 	ldw	r2,-8(fp)
 10206d0:	10800044 	addi	r2,r2,1
 10206d4:	000f883a 	mov	r7,zero
 10206d8:	01800f04 	movi	r6,60
 10206dc:	000b883a 	mov	r5,zero
 10206e0:	1009883a 	mov	r4,r2
 10206e4:	10203ec0 	call	10203ec <WS2812_LED_SET>
		  WS2812_LED_SET(i+2,0,90,0);
 10206e8:	e0bffe17 	ldw	r2,-8(fp)
 10206ec:	10800084 	addi	r2,r2,2
 10206f0:	000f883a 	mov	r7,zero
 10206f4:	01801684 	movi	r6,90
 10206f8:	000b883a 	mov	r5,zero
 10206fc:	1009883a 	mov	r4,r2
 1020700:	10203ec0 	call	10203ec <WS2812_LED_SET>
		  WS2812_LED_SET(i+3,0,120,0);
 1020704:	e0bffe17 	ldw	r2,-8(fp)
 1020708:	108000c4 	addi	r2,r2,3
 102070c:	000f883a 	mov	r7,zero
 1020710:	01801e04 	movi	r6,120
 1020714:	000b883a 	mov	r5,zero
 1020718:	1009883a 	mov	r4,r2
 102071c:	10203ec0 	call	10203ec <WS2812_LED_SET>
		  WS2812_LED_SET(i+4,0,150,0);
 1020720:	e0bffe17 	ldw	r2,-8(fp)
 1020724:	10800104 	addi	r2,r2,4
 1020728:	000f883a 	mov	r7,zero
 102072c:	01802584 	movi	r6,150
 1020730:	000b883a 	mov	r5,zero
 1020734:	1009883a 	mov	r4,r2
 1020738:	10203ec0 	call	10203ec <WS2812_LED_SET>
		  WS2812_LED_SET(i+5,0,180,0);
 102073c:	e0bffe17 	ldw	r2,-8(fp)
 1020740:	10800144 	addi	r2,r2,5
 1020744:	000f883a 	mov	r7,zero
 1020748:	01802d04 	movi	r6,180
 102074c:	000b883a 	mov	r5,zero
 1020750:	1009883a 	mov	r4,r2
 1020754:	10203ec0 	call	10203ec <WS2812_LED_SET>
		  WS2812_LED_SET(i+6,0,210,0);
 1020758:	e0bffe17 	ldw	r2,-8(fp)
 102075c:	10800184 	addi	r2,r2,6
 1020760:	000f883a 	mov	r7,zero
 1020764:	01803484 	movi	r6,210
 1020768:	000b883a 	mov	r5,zero
 102076c:	1009883a 	mov	r4,r2
 1020770:	10203ec0 	call	10203ec <WS2812_LED_SET>
		  WS2812_LED_SET(i+7,0,240,0);
 1020774:	e0bffe17 	ldw	r2,-8(fp)
 1020778:	108001c4 	addi	r2,r2,7
 102077c:	000f883a 	mov	r7,zero
 1020780:	01803c04 	movi	r6,240
 1020784:	000b883a 	mov	r5,zero
 1020788:	1009883a 	mov	r4,r2
 102078c:	10203ec0 	call	10203ec <WS2812_LED_SET>
		  WS2812_update();
 1020790:	10202900 	call	1020290 <WS2812_update>
		  usleep(10000);
 1020794:	0109c404 	movi	r4,10000
 1020798:	102407c0 	call	102407c <usleep>
		  WS2812_LED_SET_ALL(i*10,0,0);
		  usleep(100000);
	  }
	  printf("Green color\n");
	  WS2812_All_off();
	  for(i=0;i<LED_NUM-7;i+=7){
 102079c:	e0bffe17 	ldw	r2,-8(fp)
 10207a0:	108001c4 	addi	r2,r2,7
 10207a4:	e0bffe15 	stw	r2,-8(fp)
 10207a8:	e0bffe17 	ldw	r2,-8(fp)
 10207ac:	10802210 	cmplti	r2,r2,136
 10207b0:	103fc01e 	bne	r2,zero,10206b4 <__alt_data_end+0xfffe31f4>
		  WS2812_LED_SET(i+7,0,240,0);
		  WS2812_update();
		  usleep(10000);
	  }

	  WS2812_All_off();
 10207b4:	10202f40 	call	10202f4 <WS2812_All_off>
	  for(i=0;i<15;i++){
 10207b8:	e03ffe15 	stw	zero,-8(fp)
 10207bc:	00000d06 	br	10207f4 <main+0x2ec>
		  WS2812_LED_SET_ALL(0,i*10,0);
 10207c0:	e0bffe17 	ldw	r2,-8(fp)
 10207c4:	108002a4 	muli	r2,r2,10
 10207c8:	10803fcc 	andi	r2,r2,255
 10207cc:	000d883a 	mov	r6,zero
 10207d0:	100b883a 	mov	r5,r2
 10207d4:	0009883a 	mov	r4,zero
 10207d8:	10204680 	call	1020468 <WS2812_LED_SET_ALL>
		  usleep(100000);
 10207dc:	010000b4 	movhi	r4,2
 10207e0:	2121a804 	addi	r4,r4,-31072
 10207e4:	102407c0 	call	102407c <usleep>
		  WS2812_update();
		  usleep(10000);
	  }

	  WS2812_All_off();
	  for(i=0;i<15;i++){
 10207e8:	e0bffe17 	ldw	r2,-8(fp)
 10207ec:	10800044 	addi	r2,r2,1
 10207f0:	e0bffe15 	stw	r2,-8(fp)
 10207f4:	e0bffe17 	ldw	r2,-8(fp)
 10207f8:	108003d0 	cmplti	r2,r2,15
 10207fc:	103ff01e 	bne	r2,zero,10207c0 <__alt_data_end+0xfffe3300>
		  WS2812_LED_SET_ALL(0,i*10,0);
		  usleep(100000);
	  }

	  printf("Blue color\n");
 1020800:	010040b4 	movhi	r4,258
 1020804:	21187604 	addi	r4,r4,25048
 1020808:	1020b640 	call	1020b64 <puts>
	  WS2812_All_off();
 102080c:	10202f40 	call	10202f4 <WS2812_All_off>
	  for(i=0;i<LED_NUM-7;i+=7){
 1020810:	e03ffe15 	stw	zero,-8(fp)
 1020814:	00003d06 	br	102090c <main+0x404>
		  WS2812_LED_SET(i,0,0,30);
 1020818:	e0bffe17 	ldw	r2,-8(fp)
 102081c:	01c00784 	movi	r7,30
 1020820:	000d883a 	mov	r6,zero
 1020824:	000b883a 	mov	r5,zero
 1020828:	1009883a 	mov	r4,r2
 102082c:	10203ec0 	call	10203ec <WS2812_LED_SET>
		  WS2812_LED_SET(i+1,0,0,60);
 1020830:	e0bffe17 	ldw	r2,-8(fp)
 1020834:	10800044 	addi	r2,r2,1
 1020838:	01c00f04 	movi	r7,60
 102083c:	000d883a 	mov	r6,zero
 1020840:	000b883a 	mov	r5,zero
 1020844:	1009883a 	mov	r4,r2
 1020848:	10203ec0 	call	10203ec <WS2812_LED_SET>
		  WS2812_LED_SET(i+2,0,0,90);
 102084c:	e0bffe17 	ldw	r2,-8(fp)
 1020850:	10800084 	addi	r2,r2,2
 1020854:	01c01684 	movi	r7,90
 1020858:	000d883a 	mov	r6,zero
 102085c:	000b883a 	mov	r5,zero
 1020860:	1009883a 	mov	r4,r2
 1020864:	10203ec0 	call	10203ec <WS2812_LED_SET>
		  WS2812_LED_SET(i+3,0,0,120);
 1020868:	e0bffe17 	ldw	r2,-8(fp)
 102086c:	108000c4 	addi	r2,r2,3
 1020870:	01c01e04 	movi	r7,120
 1020874:	000d883a 	mov	r6,zero
 1020878:	000b883a 	mov	r5,zero
 102087c:	1009883a 	mov	r4,r2
 1020880:	10203ec0 	call	10203ec <WS2812_LED_SET>
		  WS2812_LED_SET(i+4,0,0,150);
 1020884:	e0bffe17 	ldw	r2,-8(fp)
 1020888:	10800104 	addi	r2,r2,4
 102088c:	01c02584 	movi	r7,150
 1020890:	000d883a 	mov	r6,zero
 1020894:	000b883a 	mov	r5,zero
 1020898:	1009883a 	mov	r4,r2
 102089c:	10203ec0 	call	10203ec <WS2812_LED_SET>
		  WS2812_LED_SET(i+5,0,0,180);
 10208a0:	e0bffe17 	ldw	r2,-8(fp)
 10208a4:	10800144 	addi	r2,r2,5
 10208a8:	01c02d04 	movi	r7,180
 10208ac:	000d883a 	mov	r6,zero
 10208b0:	000b883a 	mov	r5,zero
 10208b4:	1009883a 	mov	r4,r2
 10208b8:	10203ec0 	call	10203ec <WS2812_LED_SET>
		  WS2812_LED_SET(i+6,0,0,210);
 10208bc:	e0bffe17 	ldw	r2,-8(fp)
 10208c0:	10800184 	addi	r2,r2,6
 10208c4:	01c03484 	movi	r7,210
 10208c8:	000d883a 	mov	r6,zero
 10208cc:	000b883a 	mov	r5,zero
 10208d0:	1009883a 	mov	r4,r2
 10208d4:	10203ec0 	call	10203ec <WS2812_LED_SET>
		  WS2812_LED_SET(i+7,0,0,240);
 10208d8:	e0bffe17 	ldw	r2,-8(fp)
 10208dc:	108001c4 	addi	r2,r2,7
 10208e0:	01c03c04 	movi	r7,240
 10208e4:	000d883a 	mov	r6,zero
 10208e8:	000b883a 	mov	r5,zero
 10208ec:	1009883a 	mov	r4,r2
 10208f0:	10203ec0 	call	10203ec <WS2812_LED_SET>
		  WS2812_update();
 10208f4:	10202900 	call	1020290 <WS2812_update>
		  usleep(10000);
 10208f8:	0109c404 	movi	r4,10000
 10208fc:	102407c0 	call	102407c <usleep>
		  usleep(100000);
	  }

	  printf("Blue color\n");
	  WS2812_All_off();
	  for(i=0;i<LED_NUM-7;i+=7){
 1020900:	e0bffe17 	ldw	r2,-8(fp)
 1020904:	108001c4 	addi	r2,r2,7
 1020908:	e0bffe15 	stw	r2,-8(fp)
 102090c:	e0bffe17 	ldw	r2,-8(fp)
 1020910:	10802210 	cmplti	r2,r2,136
 1020914:	103fc01e 	bne	r2,zero,1020818 <__alt_data_end+0xfffe3358>
		  WS2812_update();
		  usleep(10000);
	  }


	  WS2812_All_off();
 1020918:	10202f40 	call	10202f4 <WS2812_All_off>
	  for(i=0;i<15;i++){
 102091c:	e03ffe15 	stw	zero,-8(fp)
 1020920:	00000d06 	br	1020958 <main+0x450>
		  WS2812_LED_SET_ALL(0,0,i*10);
 1020924:	e0bffe17 	ldw	r2,-8(fp)
 1020928:	108002a4 	muli	r2,r2,10
 102092c:	10803fcc 	andi	r2,r2,255
 1020930:	100d883a 	mov	r6,r2
 1020934:	000b883a 	mov	r5,zero
 1020938:	0009883a 	mov	r4,zero
 102093c:	10204680 	call	1020468 <WS2812_LED_SET_ALL>
		  usleep(100000);
 1020940:	010000b4 	movhi	r4,2
 1020944:	2121a804 	addi	r4,r4,-31072
 1020948:	102407c0 	call	102407c <usleep>
		  usleep(10000);
	  }


	  WS2812_All_off();
	  for(i=0;i<15;i++){
 102094c:	e0bffe17 	ldw	r2,-8(fp)
 1020950:	10800044 	addi	r2,r2,1
 1020954:	e0bffe15 	stw	r2,-8(fp)
 1020958:	e0bffe17 	ldw	r2,-8(fp)
 102095c:	108003d0 	cmplti	r2,r2,15
 1020960:	103ff01e 	bne	r2,zero,1020924 <__alt_data_end+0xfffe3464>
	  }




	  WS2812_All_off();
 1020964:	10202f40 	call	10202f4 <WS2812_All_off>
	  for(j=0;j<3;j++){
 1020968:	e03fff15 	stw	zero,-4(fp)
 102096c:	00004906 	br	1020a94 <main+0x58c>
		  for(i=0;i<LED_NUM-7;i+=7){
 1020970:	e03ffe15 	stw	zero,-8(fp)
 1020974:	00003d06 	br	1020a6c <main+0x564>
			  WS2812_LED_SET(i,DEMO_Red);
 1020978:	e0bffe17 	ldw	r2,-8(fp)
 102097c:	000f883a 	mov	r7,zero
 1020980:	000d883a 	mov	r6,zero
 1020984:	01401004 	movi	r5,64
 1020988:	1009883a 	mov	r4,r2
 102098c:	10203ec0 	call	10203ec <WS2812_LED_SET>
			  WS2812_LED_SET(i+1,DEMO_YELLOW);
 1020990:	e0bffe17 	ldw	r2,-8(fp)
 1020994:	10800044 	addi	r2,r2,1
 1020998:	000f883a 	mov	r7,zero
 102099c:	01800f84 	movi	r6,62
 10209a0:	01400f84 	movi	r5,62
 10209a4:	1009883a 	mov	r4,r2
 10209a8:	10203ec0 	call	10203ec <WS2812_LED_SET>
			  WS2812_LED_SET(i+2,DEMO_GREEN);
 10209ac:	e0bffe17 	ldw	r2,-8(fp)
 10209b0:	10800084 	addi	r2,r2,2
 10209b4:	01c00284 	movi	r7,10
 10209b8:	01801004 	movi	r6,64
 10209bc:	01400604 	movi	r5,24
 10209c0:	1009883a 	mov	r4,r2
 10209c4:	10203ec0 	call	10203ec <WS2812_LED_SET>
			  WS2812_LED_SET(i+3,DEMO_PURPLE);
 10209c8:	e0bffe17 	ldw	r2,-8(fp)
 10209cc:	108000c4 	addi	r2,r2,3
 10209d0:	01c00f04 	movi	r7,60
 10209d4:	01800204 	movi	r6,8
 10209d8:	01400a04 	movi	r5,40
 10209dc:	1009883a 	mov	r4,r2
 10209e0:	10203ec0 	call	10203ec <WS2812_LED_SET>
			  WS2812_LED_SET(i+4,DEMO_Red);
 10209e4:	e0bffe17 	ldw	r2,-8(fp)
 10209e8:	10800104 	addi	r2,r2,4
 10209ec:	000f883a 	mov	r7,zero
 10209f0:	000d883a 	mov	r6,zero
 10209f4:	01401004 	movi	r5,64
 10209f8:	1009883a 	mov	r4,r2
 10209fc:	10203ec0 	call	10203ec <WS2812_LED_SET>
			  WS2812_LED_SET(i+5,DEMO_YELLOW);
 1020a00:	e0bffe17 	ldw	r2,-8(fp)
 1020a04:	10800144 	addi	r2,r2,5
 1020a08:	000f883a 	mov	r7,zero
 1020a0c:	01800f84 	movi	r6,62
 1020a10:	01400f84 	movi	r5,62
 1020a14:	1009883a 	mov	r4,r2
 1020a18:	10203ec0 	call	10203ec <WS2812_LED_SET>
			  WS2812_LED_SET(i+6,DEMO_GREEN);
 1020a1c:	e0bffe17 	ldw	r2,-8(fp)
 1020a20:	10800184 	addi	r2,r2,6
 1020a24:	01c00284 	movi	r7,10
 1020a28:	01801004 	movi	r6,64
 1020a2c:	01400604 	movi	r5,24
 1020a30:	1009883a 	mov	r4,r2
 1020a34:	10203ec0 	call	10203ec <WS2812_LED_SET>
			  WS2812_LED_SET(i+7,DEMO_PURPLE);
 1020a38:	e0bffe17 	ldw	r2,-8(fp)
 1020a3c:	108001c4 	addi	r2,r2,7
 1020a40:	01c00f04 	movi	r7,60
 1020a44:	01800204 	movi	r6,8
 1020a48:	01400a04 	movi	r5,40
 1020a4c:	1009883a 	mov	r4,r2
 1020a50:	10203ec0 	call	10203ec <WS2812_LED_SET>
			  WS2812_update();
 1020a54:	10202900 	call	1020290 <WS2812_update>
			  usleep(10000);
 1020a58:	0109c404 	movi	r4,10000
 1020a5c:	102407c0 	call	102407c <usleep>



	  WS2812_All_off();
	  for(j=0;j<3;j++){
		  for(i=0;i<LED_NUM-7;i+=7){
 1020a60:	e0bffe17 	ldw	r2,-8(fp)
 1020a64:	108001c4 	addi	r2,r2,7
 1020a68:	e0bffe15 	stw	r2,-8(fp)
 1020a6c:	e0bffe17 	ldw	r2,-8(fp)
 1020a70:	10802210 	cmplti	r2,r2,136
 1020a74:	103fc01e 	bne	r2,zero,1020978 <__alt_data_end+0xfffe34b8>
			  WS2812_LED_SET(i+6,DEMO_GREEN);
			  WS2812_LED_SET(i+7,DEMO_PURPLE);
			  WS2812_update();
			  usleep(10000);
		  }
		  usleep(1000000);
 1020a78:	010003f4 	movhi	r4,15
 1020a7c:	21109004 	addi	r4,r4,16960
 1020a80:	102407c0 	call	102407c <usleep>
		  WS2812_All_off();
 1020a84:	10202f40 	call	10202f4 <WS2812_All_off>




	  WS2812_All_off();
	  for(j=0;j<3;j++){
 1020a88:	e0bfff17 	ldw	r2,-4(fp)
 1020a8c:	10800044 	addi	r2,r2,1
 1020a90:	e0bfff15 	stw	r2,-4(fp)
 1020a94:	e0bfff17 	ldw	r2,-4(fp)
 1020a98:	108000d0 	cmplti	r2,r2,3
 1020a9c:	103fb41e 	bne	r2,zero,1020970 <__alt_data_end+0xfffe34b0>
		  usleep(1000000);
		  WS2812_All_off();
	  }


  }
 1020aa0:	003ea606 	br	102053c <__alt_data_end+0xfffe307c>

01020aa4 <_puts_r>:
 1020aa4:	defff604 	addi	sp,sp,-40
 1020aa8:	dc000715 	stw	r16,28(sp)
 1020aac:	2021883a 	mov	r16,r4
 1020ab0:	2809883a 	mov	r4,r5
 1020ab4:	dc400815 	stw	r17,32(sp)
 1020ab8:	dfc00915 	stw	ra,36(sp)
 1020abc:	2823883a 	mov	r17,r5
 1020ac0:	1020b780 	call	1020b78 <strlen>
 1020ac4:	10c00044 	addi	r3,r2,1
 1020ac8:	d8800115 	stw	r2,4(sp)
 1020acc:	008040b4 	movhi	r2,258
 1020ad0:	10987904 	addi	r2,r2,25060
 1020ad4:	d8800215 	stw	r2,8(sp)
 1020ad8:	00800044 	movi	r2,1
 1020adc:	d8800315 	stw	r2,12(sp)
 1020ae0:	00800084 	movi	r2,2
 1020ae4:	dc400015 	stw	r17,0(sp)
 1020ae8:	d8c00615 	stw	r3,24(sp)
 1020aec:	dec00415 	stw	sp,16(sp)
 1020af0:	d8800515 	stw	r2,20(sp)
 1020af4:	80000226 	beq	r16,zero,1020b00 <_puts_r+0x5c>
 1020af8:	80800e17 	ldw	r2,56(r16)
 1020afc:	10001426 	beq	r2,zero,1020b50 <_puts_r+0xac>
 1020b00:	81400217 	ldw	r5,8(r16)
 1020b04:	2880030b 	ldhu	r2,12(r5)
 1020b08:	10c8000c 	andi	r3,r2,8192
 1020b0c:	1800061e 	bne	r3,zero,1020b28 <_puts_r+0x84>
 1020b10:	29001917 	ldw	r4,100(r5)
 1020b14:	00f7ffc4 	movi	r3,-8193
 1020b18:	10880014 	ori	r2,r2,8192
 1020b1c:	20c6703a 	and	r3,r4,r3
 1020b20:	2880030d 	sth	r2,12(r5)
 1020b24:	28c01915 	stw	r3,100(r5)
 1020b28:	d9800404 	addi	r6,sp,16
 1020b2c:	8009883a 	mov	r4,r16
 1020b30:	1020fb00 	call	1020fb0 <__sfvwrite_r>
 1020b34:	1000091e 	bne	r2,zero,1020b5c <_puts_r+0xb8>
 1020b38:	00800284 	movi	r2,10
 1020b3c:	dfc00917 	ldw	ra,36(sp)
 1020b40:	dc400817 	ldw	r17,32(sp)
 1020b44:	dc000717 	ldw	r16,28(sp)
 1020b48:	dec00a04 	addi	sp,sp,40
 1020b4c:	f800283a 	ret
 1020b50:	8009883a 	mov	r4,r16
 1020b54:	1020f600 	call	1020f60 <__sinit>
 1020b58:	003fe906 	br	1020b00 <__alt_data_end+0xfffe3640>
 1020b5c:	00bfffc4 	movi	r2,-1
 1020b60:	003ff606 	br	1020b3c <__alt_data_end+0xfffe367c>

01020b64 <puts>:
 1020b64:	008040b4 	movhi	r2,258
 1020b68:	109f1404 	addi	r2,r2,31824
 1020b6c:	200b883a 	mov	r5,r4
 1020b70:	11000017 	ldw	r4,0(r2)
 1020b74:	1020aa41 	jmpi	1020aa4 <_puts_r>

01020b78 <strlen>:
 1020b78:	208000cc 	andi	r2,r4,3
 1020b7c:	10002026 	beq	r2,zero,1020c00 <strlen+0x88>
 1020b80:	20800007 	ldb	r2,0(r4)
 1020b84:	10002026 	beq	r2,zero,1020c08 <strlen+0x90>
 1020b88:	2005883a 	mov	r2,r4
 1020b8c:	00000206 	br	1020b98 <strlen+0x20>
 1020b90:	10c00007 	ldb	r3,0(r2)
 1020b94:	18001826 	beq	r3,zero,1020bf8 <strlen+0x80>
 1020b98:	10800044 	addi	r2,r2,1
 1020b9c:	10c000cc 	andi	r3,r2,3
 1020ba0:	183ffb1e 	bne	r3,zero,1020b90 <__alt_data_end+0xfffe36d0>
 1020ba4:	10c00017 	ldw	r3,0(r2)
 1020ba8:	01ffbff4 	movhi	r7,65279
 1020bac:	39ffbfc4 	addi	r7,r7,-257
 1020bb0:	00ca303a 	nor	r5,zero,r3
 1020bb4:	01a02074 	movhi	r6,32897
 1020bb8:	19c7883a 	add	r3,r3,r7
 1020bbc:	31a02004 	addi	r6,r6,-32640
 1020bc0:	1946703a 	and	r3,r3,r5
 1020bc4:	1986703a 	and	r3,r3,r6
 1020bc8:	1800091e 	bne	r3,zero,1020bf0 <strlen+0x78>
 1020bcc:	10800104 	addi	r2,r2,4
 1020bd0:	10c00017 	ldw	r3,0(r2)
 1020bd4:	19cb883a 	add	r5,r3,r7
 1020bd8:	00c6303a 	nor	r3,zero,r3
 1020bdc:	28c6703a 	and	r3,r5,r3
 1020be0:	1986703a 	and	r3,r3,r6
 1020be4:	183ff926 	beq	r3,zero,1020bcc <__alt_data_end+0xfffe370c>
 1020be8:	00000106 	br	1020bf0 <strlen+0x78>
 1020bec:	10800044 	addi	r2,r2,1
 1020bf0:	10c00007 	ldb	r3,0(r2)
 1020bf4:	183ffd1e 	bne	r3,zero,1020bec <__alt_data_end+0xfffe372c>
 1020bf8:	1105c83a 	sub	r2,r2,r4
 1020bfc:	f800283a 	ret
 1020c00:	2005883a 	mov	r2,r4
 1020c04:	003fe706 	br	1020ba4 <__alt_data_end+0xfffe36e4>
 1020c08:	0005883a 	mov	r2,zero
 1020c0c:	f800283a 	ret

01020c10 <__fp_unlock>:
 1020c10:	0005883a 	mov	r2,zero
 1020c14:	f800283a 	ret

01020c18 <_cleanup_r>:
 1020c18:	014040b4 	movhi	r5,258
 1020c1c:	294aeb04 	addi	r5,r5,11180
 1020c20:	10215301 	jmpi	1021530 <_fwalk_reent>

01020c24 <__sinit.part.1>:
 1020c24:	defff704 	addi	sp,sp,-36
 1020c28:	00c040b4 	movhi	r3,258
 1020c2c:	dfc00815 	stw	ra,32(sp)
 1020c30:	ddc00715 	stw	r23,28(sp)
 1020c34:	dd800615 	stw	r22,24(sp)
 1020c38:	dd400515 	stw	r21,20(sp)
 1020c3c:	dd000415 	stw	r20,16(sp)
 1020c40:	dcc00315 	stw	r19,12(sp)
 1020c44:	dc800215 	stw	r18,8(sp)
 1020c48:	dc400115 	stw	r17,4(sp)
 1020c4c:	dc000015 	stw	r16,0(sp)
 1020c50:	18c30604 	addi	r3,r3,3096
 1020c54:	24000117 	ldw	r16,4(r4)
 1020c58:	20c00f15 	stw	r3,60(r4)
 1020c5c:	2080bb04 	addi	r2,r4,748
 1020c60:	00c000c4 	movi	r3,3
 1020c64:	20c0b915 	stw	r3,740(r4)
 1020c68:	2080ba15 	stw	r2,744(r4)
 1020c6c:	2000b815 	stw	zero,736(r4)
 1020c70:	05c00204 	movi	r23,8
 1020c74:	00800104 	movi	r2,4
 1020c78:	2025883a 	mov	r18,r4
 1020c7c:	b80d883a 	mov	r6,r23
 1020c80:	81001704 	addi	r4,r16,92
 1020c84:	000b883a 	mov	r5,zero
 1020c88:	80000015 	stw	zero,0(r16)
 1020c8c:	80000115 	stw	zero,4(r16)
 1020c90:	80000215 	stw	zero,8(r16)
 1020c94:	8080030d 	sth	r2,12(r16)
 1020c98:	80001915 	stw	zero,100(r16)
 1020c9c:	8000038d 	sth	zero,14(r16)
 1020ca0:	80000415 	stw	zero,16(r16)
 1020ca4:	80000515 	stw	zero,20(r16)
 1020ca8:	80000615 	stw	zero,24(r16)
 1020cac:	10221880 	call	1022188 <memset>
 1020cb0:	058040b4 	movhi	r22,258
 1020cb4:	94400217 	ldw	r17,8(r18)
 1020cb8:	054040b4 	movhi	r21,258
 1020cbc:	050040b4 	movhi	r20,258
 1020cc0:	04c040b4 	movhi	r19,258
 1020cc4:	b58a1a04 	addi	r22,r22,10344
 1020cc8:	ad4a3104 	addi	r21,r21,10436
 1020ccc:	a50a5004 	addi	r20,r20,10560
 1020cd0:	9cca6704 	addi	r19,r19,10652
 1020cd4:	85800815 	stw	r22,32(r16)
 1020cd8:	85400915 	stw	r21,36(r16)
 1020cdc:	85000a15 	stw	r20,40(r16)
 1020ce0:	84c00b15 	stw	r19,44(r16)
 1020ce4:	84000715 	stw	r16,28(r16)
 1020ce8:	00800284 	movi	r2,10
 1020cec:	8880030d 	sth	r2,12(r17)
 1020cf0:	00800044 	movi	r2,1
 1020cf4:	b80d883a 	mov	r6,r23
 1020cf8:	89001704 	addi	r4,r17,92
 1020cfc:	000b883a 	mov	r5,zero
 1020d00:	88000015 	stw	zero,0(r17)
 1020d04:	88000115 	stw	zero,4(r17)
 1020d08:	88000215 	stw	zero,8(r17)
 1020d0c:	88001915 	stw	zero,100(r17)
 1020d10:	8880038d 	sth	r2,14(r17)
 1020d14:	88000415 	stw	zero,16(r17)
 1020d18:	88000515 	stw	zero,20(r17)
 1020d1c:	88000615 	stw	zero,24(r17)
 1020d20:	10221880 	call	1022188 <memset>
 1020d24:	94000317 	ldw	r16,12(r18)
 1020d28:	00800484 	movi	r2,18
 1020d2c:	8c400715 	stw	r17,28(r17)
 1020d30:	8d800815 	stw	r22,32(r17)
 1020d34:	8d400915 	stw	r21,36(r17)
 1020d38:	8d000a15 	stw	r20,40(r17)
 1020d3c:	8cc00b15 	stw	r19,44(r17)
 1020d40:	8080030d 	sth	r2,12(r16)
 1020d44:	00800084 	movi	r2,2
 1020d48:	80000015 	stw	zero,0(r16)
 1020d4c:	80000115 	stw	zero,4(r16)
 1020d50:	80000215 	stw	zero,8(r16)
 1020d54:	80001915 	stw	zero,100(r16)
 1020d58:	8080038d 	sth	r2,14(r16)
 1020d5c:	80000415 	stw	zero,16(r16)
 1020d60:	80000515 	stw	zero,20(r16)
 1020d64:	80000615 	stw	zero,24(r16)
 1020d68:	b80d883a 	mov	r6,r23
 1020d6c:	000b883a 	mov	r5,zero
 1020d70:	81001704 	addi	r4,r16,92
 1020d74:	10221880 	call	1022188 <memset>
 1020d78:	00800044 	movi	r2,1
 1020d7c:	84000715 	stw	r16,28(r16)
 1020d80:	85800815 	stw	r22,32(r16)
 1020d84:	85400915 	stw	r21,36(r16)
 1020d88:	85000a15 	stw	r20,40(r16)
 1020d8c:	84c00b15 	stw	r19,44(r16)
 1020d90:	90800e15 	stw	r2,56(r18)
 1020d94:	dfc00817 	ldw	ra,32(sp)
 1020d98:	ddc00717 	ldw	r23,28(sp)
 1020d9c:	dd800617 	ldw	r22,24(sp)
 1020da0:	dd400517 	ldw	r21,20(sp)
 1020da4:	dd000417 	ldw	r20,16(sp)
 1020da8:	dcc00317 	ldw	r19,12(sp)
 1020dac:	dc800217 	ldw	r18,8(sp)
 1020db0:	dc400117 	ldw	r17,4(sp)
 1020db4:	dc000017 	ldw	r16,0(sp)
 1020db8:	dec00904 	addi	sp,sp,36
 1020dbc:	f800283a 	ret

01020dc0 <__fp_lock>:
 1020dc0:	0005883a 	mov	r2,zero
 1020dc4:	f800283a 	ret

01020dc8 <__sfmoreglue>:
 1020dc8:	defffc04 	addi	sp,sp,-16
 1020dcc:	dc400115 	stw	r17,4(sp)
 1020dd0:	2c7fffc4 	addi	r17,r5,-1
 1020dd4:	8c401a24 	muli	r17,r17,104
 1020dd8:	dc800215 	stw	r18,8(sp)
 1020ddc:	2825883a 	mov	r18,r5
 1020de0:	89401d04 	addi	r5,r17,116
 1020de4:	dc000015 	stw	r16,0(sp)
 1020de8:	dfc00315 	stw	ra,12(sp)
 1020dec:	10215f40 	call	10215f4 <_malloc_r>
 1020df0:	1021883a 	mov	r16,r2
 1020df4:	10000726 	beq	r2,zero,1020e14 <__sfmoreglue+0x4c>
 1020df8:	11000304 	addi	r4,r2,12
 1020dfc:	10000015 	stw	zero,0(r2)
 1020e00:	14800115 	stw	r18,4(r2)
 1020e04:	11000215 	stw	r4,8(r2)
 1020e08:	89801a04 	addi	r6,r17,104
 1020e0c:	000b883a 	mov	r5,zero
 1020e10:	10221880 	call	1022188 <memset>
 1020e14:	8005883a 	mov	r2,r16
 1020e18:	dfc00317 	ldw	ra,12(sp)
 1020e1c:	dc800217 	ldw	r18,8(sp)
 1020e20:	dc400117 	ldw	r17,4(sp)
 1020e24:	dc000017 	ldw	r16,0(sp)
 1020e28:	dec00404 	addi	sp,sp,16
 1020e2c:	f800283a 	ret

01020e30 <__sfp>:
 1020e30:	defffb04 	addi	sp,sp,-20
 1020e34:	dc000015 	stw	r16,0(sp)
 1020e38:	040040b4 	movhi	r16,258
 1020e3c:	841f1304 	addi	r16,r16,31820
 1020e40:	dcc00315 	stw	r19,12(sp)
 1020e44:	2027883a 	mov	r19,r4
 1020e48:	81000017 	ldw	r4,0(r16)
 1020e4c:	dfc00415 	stw	ra,16(sp)
 1020e50:	dc800215 	stw	r18,8(sp)
 1020e54:	20800e17 	ldw	r2,56(r4)
 1020e58:	dc400115 	stw	r17,4(sp)
 1020e5c:	1000021e 	bne	r2,zero,1020e68 <__sfp+0x38>
 1020e60:	1020c240 	call	1020c24 <__sinit.part.1>
 1020e64:	81000017 	ldw	r4,0(r16)
 1020e68:	2480b804 	addi	r18,r4,736
 1020e6c:	047fffc4 	movi	r17,-1
 1020e70:	91000117 	ldw	r4,4(r18)
 1020e74:	94000217 	ldw	r16,8(r18)
 1020e78:	213fffc4 	addi	r4,r4,-1
 1020e7c:	20000a16 	blt	r4,zero,1020ea8 <__sfp+0x78>
 1020e80:	8080030f 	ldh	r2,12(r16)
 1020e84:	10000c26 	beq	r2,zero,1020eb8 <__sfp+0x88>
 1020e88:	80c01d04 	addi	r3,r16,116
 1020e8c:	00000206 	br	1020e98 <__sfp+0x68>
 1020e90:	18bfe60f 	ldh	r2,-104(r3)
 1020e94:	10000826 	beq	r2,zero,1020eb8 <__sfp+0x88>
 1020e98:	213fffc4 	addi	r4,r4,-1
 1020e9c:	1c3ffd04 	addi	r16,r3,-12
 1020ea0:	18c01a04 	addi	r3,r3,104
 1020ea4:	247ffa1e 	bne	r4,r17,1020e90 <__alt_data_end+0xfffe39d0>
 1020ea8:	90800017 	ldw	r2,0(r18)
 1020eac:	10001d26 	beq	r2,zero,1020f24 <__sfp+0xf4>
 1020eb0:	1025883a 	mov	r18,r2
 1020eb4:	003fee06 	br	1020e70 <__alt_data_end+0xfffe39b0>
 1020eb8:	00bfffc4 	movi	r2,-1
 1020ebc:	8080038d 	sth	r2,14(r16)
 1020ec0:	00800044 	movi	r2,1
 1020ec4:	8080030d 	sth	r2,12(r16)
 1020ec8:	80001915 	stw	zero,100(r16)
 1020ecc:	80000015 	stw	zero,0(r16)
 1020ed0:	80000215 	stw	zero,8(r16)
 1020ed4:	80000115 	stw	zero,4(r16)
 1020ed8:	80000415 	stw	zero,16(r16)
 1020edc:	80000515 	stw	zero,20(r16)
 1020ee0:	80000615 	stw	zero,24(r16)
 1020ee4:	01800204 	movi	r6,8
 1020ee8:	000b883a 	mov	r5,zero
 1020eec:	81001704 	addi	r4,r16,92
 1020ef0:	10221880 	call	1022188 <memset>
 1020ef4:	8005883a 	mov	r2,r16
 1020ef8:	80000c15 	stw	zero,48(r16)
 1020efc:	80000d15 	stw	zero,52(r16)
 1020f00:	80001115 	stw	zero,68(r16)
 1020f04:	80001215 	stw	zero,72(r16)
 1020f08:	dfc00417 	ldw	ra,16(sp)
 1020f0c:	dcc00317 	ldw	r19,12(sp)
 1020f10:	dc800217 	ldw	r18,8(sp)
 1020f14:	dc400117 	ldw	r17,4(sp)
 1020f18:	dc000017 	ldw	r16,0(sp)
 1020f1c:	dec00504 	addi	sp,sp,20
 1020f20:	f800283a 	ret
 1020f24:	01400104 	movi	r5,4
 1020f28:	9809883a 	mov	r4,r19
 1020f2c:	1020dc80 	call	1020dc8 <__sfmoreglue>
 1020f30:	90800015 	stw	r2,0(r18)
 1020f34:	103fde1e 	bne	r2,zero,1020eb0 <__alt_data_end+0xfffe39f0>
 1020f38:	00800304 	movi	r2,12
 1020f3c:	98800015 	stw	r2,0(r19)
 1020f40:	0005883a 	mov	r2,zero
 1020f44:	003ff006 	br	1020f08 <__alt_data_end+0xfffe3a48>

01020f48 <_cleanup>:
 1020f48:	008040b4 	movhi	r2,258
 1020f4c:	109f1304 	addi	r2,r2,31820
 1020f50:	11000017 	ldw	r4,0(r2)
 1020f54:	014040b4 	movhi	r5,258
 1020f58:	294aeb04 	addi	r5,r5,11180
 1020f5c:	10215301 	jmpi	1021530 <_fwalk_reent>

01020f60 <__sinit>:
 1020f60:	20800e17 	ldw	r2,56(r4)
 1020f64:	10000126 	beq	r2,zero,1020f6c <__sinit+0xc>
 1020f68:	f800283a 	ret
 1020f6c:	1020c241 	jmpi	1020c24 <__sinit.part.1>

01020f70 <__sfp_lock_acquire>:
 1020f70:	f800283a 	ret

01020f74 <__sfp_lock_release>:
 1020f74:	f800283a 	ret

01020f78 <__sinit_lock_acquire>:
 1020f78:	f800283a 	ret

01020f7c <__sinit_lock_release>:
 1020f7c:	f800283a 	ret

01020f80 <__fp_lock_all>:
 1020f80:	008040b4 	movhi	r2,258
 1020f84:	109f1404 	addi	r2,r2,31824
 1020f88:	11000017 	ldw	r4,0(r2)
 1020f8c:	014040b4 	movhi	r5,258
 1020f90:	29437004 	addi	r5,r5,3520
 1020f94:	102146c1 	jmpi	102146c <_fwalk>

01020f98 <__fp_unlock_all>:
 1020f98:	008040b4 	movhi	r2,258
 1020f9c:	109f1404 	addi	r2,r2,31824
 1020fa0:	11000017 	ldw	r4,0(r2)
 1020fa4:	014040b4 	movhi	r5,258
 1020fa8:	29430404 	addi	r5,r5,3088
 1020fac:	102146c1 	jmpi	102146c <_fwalk>

01020fb0 <__sfvwrite_r>:
 1020fb0:	30800217 	ldw	r2,8(r6)
 1020fb4:	10006726 	beq	r2,zero,1021154 <__sfvwrite_r+0x1a4>
 1020fb8:	28c0030b 	ldhu	r3,12(r5)
 1020fbc:	defff404 	addi	sp,sp,-48
 1020fc0:	dd400715 	stw	r21,28(sp)
 1020fc4:	dd000615 	stw	r20,24(sp)
 1020fc8:	dc000215 	stw	r16,8(sp)
 1020fcc:	dfc00b15 	stw	ra,44(sp)
 1020fd0:	df000a15 	stw	fp,40(sp)
 1020fd4:	ddc00915 	stw	r23,36(sp)
 1020fd8:	dd800815 	stw	r22,32(sp)
 1020fdc:	dcc00515 	stw	r19,20(sp)
 1020fe0:	dc800415 	stw	r18,16(sp)
 1020fe4:	dc400315 	stw	r17,12(sp)
 1020fe8:	1880020c 	andi	r2,r3,8
 1020fec:	2821883a 	mov	r16,r5
 1020ff0:	202b883a 	mov	r21,r4
 1020ff4:	3029883a 	mov	r20,r6
 1020ff8:	10002726 	beq	r2,zero,1021098 <__sfvwrite_r+0xe8>
 1020ffc:	28800417 	ldw	r2,16(r5)
 1021000:	10002526 	beq	r2,zero,1021098 <__sfvwrite_r+0xe8>
 1021004:	1880008c 	andi	r2,r3,2
 1021008:	a4400017 	ldw	r17,0(r20)
 102100c:	10002a26 	beq	r2,zero,10210b8 <__sfvwrite_r+0x108>
 1021010:	05a00034 	movhi	r22,32768
 1021014:	0027883a 	mov	r19,zero
 1021018:	0025883a 	mov	r18,zero
 102101c:	b5bf0004 	addi	r22,r22,-1024
 1021020:	980d883a 	mov	r6,r19
 1021024:	a809883a 	mov	r4,r21
 1021028:	90004626 	beq	r18,zero,1021144 <__sfvwrite_r+0x194>
 102102c:	900f883a 	mov	r7,r18
 1021030:	b480022e 	bgeu	r22,r18,102103c <__sfvwrite_r+0x8c>
 1021034:	01e00034 	movhi	r7,32768
 1021038:	39ff0004 	addi	r7,r7,-1024
 102103c:	80800917 	ldw	r2,36(r16)
 1021040:	81400717 	ldw	r5,28(r16)
 1021044:	103ee83a 	callr	r2
 1021048:	0080570e 	bge	zero,r2,10211a8 <__sfvwrite_r+0x1f8>
 102104c:	a0c00217 	ldw	r3,8(r20)
 1021050:	98a7883a 	add	r19,r19,r2
 1021054:	90a5c83a 	sub	r18,r18,r2
 1021058:	1885c83a 	sub	r2,r3,r2
 102105c:	a0800215 	stw	r2,8(r20)
 1021060:	103fef1e 	bne	r2,zero,1021020 <__alt_data_end+0xfffe3b60>
 1021064:	0005883a 	mov	r2,zero
 1021068:	dfc00b17 	ldw	ra,44(sp)
 102106c:	df000a17 	ldw	fp,40(sp)
 1021070:	ddc00917 	ldw	r23,36(sp)
 1021074:	dd800817 	ldw	r22,32(sp)
 1021078:	dd400717 	ldw	r21,28(sp)
 102107c:	dd000617 	ldw	r20,24(sp)
 1021080:	dcc00517 	ldw	r19,20(sp)
 1021084:	dc800417 	ldw	r18,16(sp)
 1021088:	dc400317 	ldw	r17,12(sp)
 102108c:	dc000217 	ldw	r16,8(sp)
 1021090:	dec00c04 	addi	sp,sp,48
 1021094:	f800283a 	ret
 1021098:	800b883a 	mov	r5,r16
 102109c:	a809883a 	mov	r4,r21
 10210a0:	1022a040 	call	1022a04 <__swsetup_r>
 10210a4:	1000eb1e 	bne	r2,zero,1021454 <__sfvwrite_r+0x4a4>
 10210a8:	80c0030b 	ldhu	r3,12(r16)
 10210ac:	a4400017 	ldw	r17,0(r20)
 10210b0:	1880008c 	andi	r2,r3,2
 10210b4:	103fd61e 	bne	r2,zero,1021010 <__alt_data_end+0xfffe3b50>
 10210b8:	1880004c 	andi	r2,r3,1
 10210bc:	10003f1e 	bne	r2,zero,10211bc <__sfvwrite_r+0x20c>
 10210c0:	0039883a 	mov	fp,zero
 10210c4:	0025883a 	mov	r18,zero
 10210c8:	90001a26 	beq	r18,zero,1021134 <__sfvwrite_r+0x184>
 10210cc:	1880800c 	andi	r2,r3,512
 10210d0:	84c00217 	ldw	r19,8(r16)
 10210d4:	10002126 	beq	r2,zero,102115c <__sfvwrite_r+0x1ac>
 10210d8:	982f883a 	mov	r23,r19
 10210dc:	94c09336 	bltu	r18,r19,102132c <__sfvwrite_r+0x37c>
 10210e0:	1881200c 	andi	r2,r3,1152
 10210e4:	10009e1e 	bne	r2,zero,1021360 <__sfvwrite_r+0x3b0>
 10210e8:	81000017 	ldw	r4,0(r16)
 10210ec:	b80d883a 	mov	r6,r23
 10210f0:	e00b883a 	mov	r5,fp
 10210f4:	102202c0 	call	102202c <memmove>
 10210f8:	80c00217 	ldw	r3,8(r16)
 10210fc:	81000017 	ldw	r4,0(r16)
 1021100:	9005883a 	mov	r2,r18
 1021104:	1ce7c83a 	sub	r19,r3,r19
 1021108:	25cf883a 	add	r7,r4,r23
 102110c:	84c00215 	stw	r19,8(r16)
 1021110:	81c00015 	stw	r7,0(r16)
 1021114:	a0c00217 	ldw	r3,8(r20)
 1021118:	e0b9883a 	add	fp,fp,r2
 102111c:	90a5c83a 	sub	r18,r18,r2
 1021120:	18a7c83a 	sub	r19,r3,r2
 1021124:	a4c00215 	stw	r19,8(r20)
 1021128:	983fce26 	beq	r19,zero,1021064 <__alt_data_end+0xfffe3ba4>
 102112c:	80c0030b 	ldhu	r3,12(r16)
 1021130:	903fe61e 	bne	r18,zero,10210cc <__alt_data_end+0xfffe3c0c>
 1021134:	8f000017 	ldw	fp,0(r17)
 1021138:	8c800117 	ldw	r18,4(r17)
 102113c:	8c400204 	addi	r17,r17,8
 1021140:	003fe106 	br	10210c8 <__alt_data_end+0xfffe3c08>
 1021144:	8cc00017 	ldw	r19,0(r17)
 1021148:	8c800117 	ldw	r18,4(r17)
 102114c:	8c400204 	addi	r17,r17,8
 1021150:	003fb306 	br	1021020 <__alt_data_end+0xfffe3b60>
 1021154:	0005883a 	mov	r2,zero
 1021158:	f800283a 	ret
 102115c:	81000017 	ldw	r4,0(r16)
 1021160:	80800417 	ldw	r2,16(r16)
 1021164:	11005736 	bltu	r2,r4,10212c4 <__sfvwrite_r+0x314>
 1021168:	85c00517 	ldw	r23,20(r16)
 102116c:	95c05536 	bltu	r18,r23,10212c4 <__sfvwrite_r+0x314>
 1021170:	00a00034 	movhi	r2,32768
 1021174:	10bfffc4 	addi	r2,r2,-1
 1021178:	9009883a 	mov	r4,r18
 102117c:	1480012e 	bgeu	r2,r18,1021184 <__sfvwrite_r+0x1d4>
 1021180:	1009883a 	mov	r4,r2
 1021184:	b80b883a 	mov	r5,r23
 1021188:	10236b80 	call	10236b8 <__divsi3>
 102118c:	15cf383a 	mul	r7,r2,r23
 1021190:	81400717 	ldw	r5,28(r16)
 1021194:	80800917 	ldw	r2,36(r16)
 1021198:	e00d883a 	mov	r6,fp
 102119c:	a809883a 	mov	r4,r21
 10211a0:	103ee83a 	callr	r2
 10211a4:	00bfdb16 	blt	zero,r2,1021114 <__alt_data_end+0xfffe3c54>
 10211a8:	8080030b 	ldhu	r2,12(r16)
 10211ac:	10801014 	ori	r2,r2,64
 10211b0:	8080030d 	sth	r2,12(r16)
 10211b4:	00bfffc4 	movi	r2,-1
 10211b8:	003fab06 	br	1021068 <__alt_data_end+0xfffe3ba8>
 10211bc:	0027883a 	mov	r19,zero
 10211c0:	0011883a 	mov	r8,zero
 10211c4:	0039883a 	mov	fp,zero
 10211c8:	0025883a 	mov	r18,zero
 10211cc:	90001f26 	beq	r18,zero,102124c <__sfvwrite_r+0x29c>
 10211d0:	40005a26 	beq	r8,zero,102133c <__sfvwrite_r+0x38c>
 10211d4:	982d883a 	mov	r22,r19
 10211d8:	94c0012e 	bgeu	r18,r19,10211e0 <__sfvwrite_r+0x230>
 10211dc:	902d883a 	mov	r22,r18
 10211e0:	81000017 	ldw	r4,0(r16)
 10211e4:	80800417 	ldw	r2,16(r16)
 10211e8:	b02f883a 	mov	r23,r22
 10211ec:	81c00517 	ldw	r7,20(r16)
 10211f0:	1100032e 	bgeu	r2,r4,1021200 <__sfvwrite_r+0x250>
 10211f4:	80c00217 	ldw	r3,8(r16)
 10211f8:	38c7883a 	add	r3,r7,r3
 10211fc:	1d801816 	blt	r3,r22,1021260 <__sfvwrite_r+0x2b0>
 1021200:	b1c03e16 	blt	r22,r7,10212fc <__sfvwrite_r+0x34c>
 1021204:	80800917 	ldw	r2,36(r16)
 1021208:	81400717 	ldw	r5,28(r16)
 102120c:	e00d883a 	mov	r6,fp
 1021210:	da000115 	stw	r8,4(sp)
 1021214:	a809883a 	mov	r4,r21
 1021218:	103ee83a 	callr	r2
 102121c:	102f883a 	mov	r23,r2
 1021220:	da000117 	ldw	r8,4(sp)
 1021224:	00bfe00e 	bge	zero,r2,10211a8 <__alt_data_end+0xfffe3ce8>
 1021228:	9de7c83a 	sub	r19,r19,r23
 102122c:	98001f26 	beq	r19,zero,10212ac <__sfvwrite_r+0x2fc>
 1021230:	a0800217 	ldw	r2,8(r20)
 1021234:	e5f9883a 	add	fp,fp,r23
 1021238:	95e5c83a 	sub	r18,r18,r23
 102123c:	15efc83a 	sub	r23,r2,r23
 1021240:	a5c00215 	stw	r23,8(r20)
 1021244:	b83f8726 	beq	r23,zero,1021064 <__alt_data_end+0xfffe3ba4>
 1021248:	903fe11e 	bne	r18,zero,10211d0 <__alt_data_end+0xfffe3d10>
 102124c:	8f000017 	ldw	fp,0(r17)
 1021250:	8c800117 	ldw	r18,4(r17)
 1021254:	0011883a 	mov	r8,zero
 1021258:	8c400204 	addi	r17,r17,8
 102125c:	003fdb06 	br	10211cc <__alt_data_end+0xfffe3d0c>
 1021260:	180d883a 	mov	r6,r3
 1021264:	e00b883a 	mov	r5,fp
 1021268:	da000115 	stw	r8,4(sp)
 102126c:	d8c00015 	stw	r3,0(sp)
 1021270:	102202c0 	call	102202c <memmove>
 1021274:	d8c00017 	ldw	r3,0(sp)
 1021278:	80800017 	ldw	r2,0(r16)
 102127c:	800b883a 	mov	r5,r16
 1021280:	a809883a 	mov	r4,r21
 1021284:	10c5883a 	add	r2,r2,r3
 1021288:	80800015 	stw	r2,0(r16)
 102128c:	d8c00015 	stw	r3,0(sp)
 1021290:	1022ecc0 	call	1022ecc <_fflush_r>
 1021294:	d8c00017 	ldw	r3,0(sp)
 1021298:	da000117 	ldw	r8,4(sp)
 102129c:	103fc21e 	bne	r2,zero,10211a8 <__alt_data_end+0xfffe3ce8>
 10212a0:	182f883a 	mov	r23,r3
 10212a4:	9de7c83a 	sub	r19,r19,r23
 10212a8:	983fe11e 	bne	r19,zero,1021230 <__alt_data_end+0xfffe3d70>
 10212ac:	800b883a 	mov	r5,r16
 10212b0:	a809883a 	mov	r4,r21
 10212b4:	1022ecc0 	call	1022ecc <_fflush_r>
 10212b8:	103fbb1e 	bne	r2,zero,10211a8 <__alt_data_end+0xfffe3ce8>
 10212bc:	0011883a 	mov	r8,zero
 10212c0:	003fdb06 	br	1021230 <__alt_data_end+0xfffe3d70>
 10212c4:	94c0012e 	bgeu	r18,r19,10212cc <__sfvwrite_r+0x31c>
 10212c8:	9027883a 	mov	r19,r18
 10212cc:	980d883a 	mov	r6,r19
 10212d0:	e00b883a 	mov	r5,fp
 10212d4:	102202c0 	call	102202c <memmove>
 10212d8:	80800217 	ldw	r2,8(r16)
 10212dc:	80c00017 	ldw	r3,0(r16)
 10212e0:	14c5c83a 	sub	r2,r2,r19
 10212e4:	1cc7883a 	add	r3,r3,r19
 10212e8:	80800215 	stw	r2,8(r16)
 10212ec:	80c00015 	stw	r3,0(r16)
 10212f0:	10004326 	beq	r2,zero,1021400 <__sfvwrite_r+0x450>
 10212f4:	9805883a 	mov	r2,r19
 10212f8:	003f8606 	br	1021114 <__alt_data_end+0xfffe3c54>
 10212fc:	b00d883a 	mov	r6,r22
 1021300:	e00b883a 	mov	r5,fp
 1021304:	da000115 	stw	r8,4(sp)
 1021308:	102202c0 	call	102202c <memmove>
 102130c:	80800217 	ldw	r2,8(r16)
 1021310:	80c00017 	ldw	r3,0(r16)
 1021314:	da000117 	ldw	r8,4(sp)
 1021318:	1585c83a 	sub	r2,r2,r22
 102131c:	1dad883a 	add	r22,r3,r22
 1021320:	80800215 	stw	r2,8(r16)
 1021324:	85800015 	stw	r22,0(r16)
 1021328:	003fbf06 	br	1021228 <__alt_data_end+0xfffe3d68>
 102132c:	81000017 	ldw	r4,0(r16)
 1021330:	9027883a 	mov	r19,r18
 1021334:	902f883a 	mov	r23,r18
 1021338:	003f6c06 	br	10210ec <__alt_data_end+0xfffe3c2c>
 102133c:	900d883a 	mov	r6,r18
 1021340:	01400284 	movi	r5,10
 1021344:	e009883a 	mov	r4,fp
 1021348:	1021e000 	call	1021e00 <memchr>
 102134c:	10003e26 	beq	r2,zero,1021448 <__sfvwrite_r+0x498>
 1021350:	10800044 	addi	r2,r2,1
 1021354:	1727c83a 	sub	r19,r2,fp
 1021358:	02000044 	movi	r8,1
 102135c:	003f9d06 	br	10211d4 <__alt_data_end+0xfffe3d14>
 1021360:	80800517 	ldw	r2,20(r16)
 1021364:	81400417 	ldw	r5,16(r16)
 1021368:	81c00017 	ldw	r7,0(r16)
 102136c:	10a7883a 	add	r19,r2,r2
 1021370:	9885883a 	add	r2,r19,r2
 1021374:	1026d7fa 	srli	r19,r2,31
 1021378:	396dc83a 	sub	r22,r7,r5
 102137c:	b1000044 	addi	r4,r22,1
 1021380:	9885883a 	add	r2,r19,r2
 1021384:	1027d07a 	srai	r19,r2,1
 1021388:	2485883a 	add	r2,r4,r18
 102138c:	980d883a 	mov	r6,r19
 1021390:	9880022e 	bgeu	r19,r2,102139c <__sfvwrite_r+0x3ec>
 1021394:	1027883a 	mov	r19,r2
 1021398:	100d883a 	mov	r6,r2
 102139c:	18c1000c 	andi	r3,r3,1024
 10213a0:	18001c26 	beq	r3,zero,1021414 <__sfvwrite_r+0x464>
 10213a4:	300b883a 	mov	r5,r6
 10213a8:	a809883a 	mov	r4,r21
 10213ac:	10215f40 	call	10215f4 <_malloc_r>
 10213b0:	102f883a 	mov	r23,r2
 10213b4:	10002926 	beq	r2,zero,102145c <__sfvwrite_r+0x4ac>
 10213b8:	81400417 	ldw	r5,16(r16)
 10213bc:	b00d883a 	mov	r6,r22
 10213c0:	1009883a 	mov	r4,r2
 10213c4:	1021ee40 	call	1021ee4 <memcpy>
 10213c8:	8080030b 	ldhu	r2,12(r16)
 10213cc:	00fedfc4 	movi	r3,-1153
 10213d0:	10c4703a 	and	r2,r2,r3
 10213d4:	10802014 	ori	r2,r2,128
 10213d8:	8080030d 	sth	r2,12(r16)
 10213dc:	bd89883a 	add	r4,r23,r22
 10213e0:	9d8fc83a 	sub	r7,r19,r22
 10213e4:	85c00415 	stw	r23,16(r16)
 10213e8:	84c00515 	stw	r19,20(r16)
 10213ec:	81000015 	stw	r4,0(r16)
 10213f0:	9027883a 	mov	r19,r18
 10213f4:	81c00215 	stw	r7,8(r16)
 10213f8:	902f883a 	mov	r23,r18
 10213fc:	003f3b06 	br	10210ec <__alt_data_end+0xfffe3c2c>
 1021400:	800b883a 	mov	r5,r16
 1021404:	a809883a 	mov	r4,r21
 1021408:	1022ecc0 	call	1022ecc <_fflush_r>
 102140c:	103fb926 	beq	r2,zero,10212f4 <__alt_data_end+0xfffe3e34>
 1021410:	003f6506 	br	10211a8 <__alt_data_end+0xfffe3ce8>
 1021414:	a809883a 	mov	r4,r21
 1021418:	10222b00 	call	10222b0 <_realloc_r>
 102141c:	102f883a 	mov	r23,r2
 1021420:	103fee1e 	bne	r2,zero,10213dc <__alt_data_end+0xfffe3f1c>
 1021424:	81400417 	ldw	r5,16(r16)
 1021428:	a809883a 	mov	r4,r21
 102142c:	102307c0 	call	102307c <_free_r>
 1021430:	8080030b 	ldhu	r2,12(r16)
 1021434:	00ffdfc4 	movi	r3,-129
 1021438:	1884703a 	and	r2,r3,r2
 102143c:	00c00304 	movi	r3,12
 1021440:	a8c00015 	stw	r3,0(r21)
 1021444:	003f5906 	br	10211ac <__alt_data_end+0xfffe3cec>
 1021448:	94c00044 	addi	r19,r18,1
 102144c:	02000044 	movi	r8,1
 1021450:	003f6006 	br	10211d4 <__alt_data_end+0xfffe3d14>
 1021454:	00bfffc4 	movi	r2,-1
 1021458:	003f0306 	br	1021068 <__alt_data_end+0xfffe3ba8>
 102145c:	00800304 	movi	r2,12
 1021460:	a8800015 	stw	r2,0(r21)
 1021464:	8080030b 	ldhu	r2,12(r16)
 1021468:	003f5006 	br	10211ac <__alt_data_end+0xfffe3cec>

0102146c <_fwalk>:
 102146c:	defff704 	addi	sp,sp,-36
 1021470:	dd000415 	stw	r20,16(sp)
 1021474:	dfc00815 	stw	ra,32(sp)
 1021478:	ddc00715 	stw	r23,28(sp)
 102147c:	dd800615 	stw	r22,24(sp)
 1021480:	dd400515 	stw	r21,20(sp)
 1021484:	dcc00315 	stw	r19,12(sp)
 1021488:	dc800215 	stw	r18,8(sp)
 102148c:	dc400115 	stw	r17,4(sp)
 1021490:	dc000015 	stw	r16,0(sp)
 1021494:	2500b804 	addi	r20,r4,736
 1021498:	a0002326 	beq	r20,zero,1021528 <_fwalk+0xbc>
 102149c:	282b883a 	mov	r21,r5
 10214a0:	002f883a 	mov	r23,zero
 10214a4:	05800044 	movi	r22,1
 10214a8:	04ffffc4 	movi	r19,-1
 10214ac:	a4400117 	ldw	r17,4(r20)
 10214b0:	a4800217 	ldw	r18,8(r20)
 10214b4:	8c7fffc4 	addi	r17,r17,-1
 10214b8:	88000d16 	blt	r17,zero,10214f0 <_fwalk+0x84>
 10214bc:	94000304 	addi	r16,r18,12
 10214c0:	94800384 	addi	r18,r18,14
 10214c4:	8080000b 	ldhu	r2,0(r16)
 10214c8:	8c7fffc4 	addi	r17,r17,-1
 10214cc:	813ffd04 	addi	r4,r16,-12
 10214d0:	b080042e 	bgeu	r22,r2,10214e4 <_fwalk+0x78>
 10214d4:	9080000f 	ldh	r2,0(r18)
 10214d8:	14c00226 	beq	r2,r19,10214e4 <_fwalk+0x78>
 10214dc:	a83ee83a 	callr	r21
 10214e0:	b8aeb03a 	or	r23,r23,r2
 10214e4:	84001a04 	addi	r16,r16,104
 10214e8:	94801a04 	addi	r18,r18,104
 10214ec:	8cfff51e 	bne	r17,r19,10214c4 <__alt_data_end+0xfffe4004>
 10214f0:	a5000017 	ldw	r20,0(r20)
 10214f4:	a03fed1e 	bne	r20,zero,10214ac <__alt_data_end+0xfffe3fec>
 10214f8:	b805883a 	mov	r2,r23
 10214fc:	dfc00817 	ldw	ra,32(sp)
 1021500:	ddc00717 	ldw	r23,28(sp)
 1021504:	dd800617 	ldw	r22,24(sp)
 1021508:	dd400517 	ldw	r21,20(sp)
 102150c:	dd000417 	ldw	r20,16(sp)
 1021510:	dcc00317 	ldw	r19,12(sp)
 1021514:	dc800217 	ldw	r18,8(sp)
 1021518:	dc400117 	ldw	r17,4(sp)
 102151c:	dc000017 	ldw	r16,0(sp)
 1021520:	dec00904 	addi	sp,sp,36
 1021524:	f800283a 	ret
 1021528:	002f883a 	mov	r23,zero
 102152c:	003ff206 	br	10214f8 <__alt_data_end+0xfffe4038>

01021530 <_fwalk_reent>:
 1021530:	defff704 	addi	sp,sp,-36
 1021534:	dd000415 	stw	r20,16(sp)
 1021538:	dfc00815 	stw	ra,32(sp)
 102153c:	ddc00715 	stw	r23,28(sp)
 1021540:	dd800615 	stw	r22,24(sp)
 1021544:	dd400515 	stw	r21,20(sp)
 1021548:	dcc00315 	stw	r19,12(sp)
 102154c:	dc800215 	stw	r18,8(sp)
 1021550:	dc400115 	stw	r17,4(sp)
 1021554:	dc000015 	stw	r16,0(sp)
 1021558:	2500b804 	addi	r20,r4,736
 102155c:	a0002326 	beq	r20,zero,10215ec <_fwalk_reent+0xbc>
 1021560:	282b883a 	mov	r21,r5
 1021564:	2027883a 	mov	r19,r4
 1021568:	002f883a 	mov	r23,zero
 102156c:	05800044 	movi	r22,1
 1021570:	04bfffc4 	movi	r18,-1
 1021574:	a4400117 	ldw	r17,4(r20)
 1021578:	a4000217 	ldw	r16,8(r20)
 102157c:	8c7fffc4 	addi	r17,r17,-1
 1021580:	88000c16 	blt	r17,zero,10215b4 <_fwalk_reent+0x84>
 1021584:	84000304 	addi	r16,r16,12
 1021588:	8080000b 	ldhu	r2,0(r16)
 102158c:	8c7fffc4 	addi	r17,r17,-1
 1021590:	817ffd04 	addi	r5,r16,-12
 1021594:	b080052e 	bgeu	r22,r2,10215ac <_fwalk_reent+0x7c>
 1021598:	8080008f 	ldh	r2,2(r16)
 102159c:	9809883a 	mov	r4,r19
 10215a0:	14800226 	beq	r2,r18,10215ac <_fwalk_reent+0x7c>
 10215a4:	a83ee83a 	callr	r21
 10215a8:	b8aeb03a 	or	r23,r23,r2
 10215ac:	84001a04 	addi	r16,r16,104
 10215b0:	8cbff51e 	bne	r17,r18,1021588 <__alt_data_end+0xfffe40c8>
 10215b4:	a5000017 	ldw	r20,0(r20)
 10215b8:	a03fee1e 	bne	r20,zero,1021574 <__alt_data_end+0xfffe40b4>
 10215bc:	b805883a 	mov	r2,r23
 10215c0:	dfc00817 	ldw	ra,32(sp)
 10215c4:	ddc00717 	ldw	r23,28(sp)
 10215c8:	dd800617 	ldw	r22,24(sp)
 10215cc:	dd400517 	ldw	r21,20(sp)
 10215d0:	dd000417 	ldw	r20,16(sp)
 10215d4:	dcc00317 	ldw	r19,12(sp)
 10215d8:	dc800217 	ldw	r18,8(sp)
 10215dc:	dc400117 	ldw	r17,4(sp)
 10215e0:	dc000017 	ldw	r16,0(sp)
 10215e4:	dec00904 	addi	sp,sp,36
 10215e8:	f800283a 	ret
 10215ec:	002f883a 	mov	r23,zero
 10215f0:	003ff206 	br	10215bc <__alt_data_end+0xfffe40fc>

010215f4 <_malloc_r>:
 10215f4:	defff504 	addi	sp,sp,-44
 10215f8:	dc800315 	stw	r18,12(sp)
 10215fc:	dfc00a15 	stw	ra,40(sp)
 1021600:	df000915 	stw	fp,36(sp)
 1021604:	ddc00815 	stw	r23,32(sp)
 1021608:	dd800715 	stw	r22,28(sp)
 102160c:	dd400615 	stw	r21,24(sp)
 1021610:	dd000515 	stw	r20,20(sp)
 1021614:	dcc00415 	stw	r19,16(sp)
 1021618:	dc400215 	stw	r17,8(sp)
 102161c:	dc000115 	stw	r16,4(sp)
 1021620:	288002c4 	addi	r2,r5,11
 1021624:	00c00584 	movi	r3,22
 1021628:	2025883a 	mov	r18,r4
 102162c:	18807f2e 	bgeu	r3,r2,102182c <_malloc_r+0x238>
 1021630:	047ffe04 	movi	r17,-8
 1021634:	1462703a 	and	r17,r2,r17
 1021638:	8800a316 	blt	r17,zero,10218c8 <_malloc_r+0x2d4>
 102163c:	8940a236 	bltu	r17,r5,10218c8 <_malloc_r+0x2d4>
 1021640:	1023de80 	call	1023de8 <__malloc_lock>
 1021644:	00807dc4 	movi	r2,503
 1021648:	1441e92e 	bgeu	r2,r17,1021df0 <_malloc_r+0x7fc>
 102164c:	8804d27a 	srli	r2,r17,9
 1021650:	1000a126 	beq	r2,zero,10218d8 <_malloc_r+0x2e4>
 1021654:	00c00104 	movi	r3,4
 1021658:	18811e36 	bltu	r3,r2,1021ad4 <_malloc_r+0x4e0>
 102165c:	8804d1ba 	srli	r2,r17,6
 1021660:	12000e44 	addi	r8,r2,57
 1021664:	11c00e04 	addi	r7,r2,56
 1021668:	4209883a 	add	r4,r8,r8
 102166c:	04c040b4 	movhi	r19,258
 1021670:	2109883a 	add	r4,r4,r4
 1021674:	9cd98f04 	addi	r19,r19,26172
 1021678:	2109883a 	add	r4,r4,r4
 102167c:	9909883a 	add	r4,r19,r4
 1021680:	24000117 	ldw	r16,4(r4)
 1021684:	213ffe04 	addi	r4,r4,-8
 1021688:	24009726 	beq	r4,r16,10218e8 <_malloc_r+0x2f4>
 102168c:	80800117 	ldw	r2,4(r16)
 1021690:	01bfff04 	movi	r6,-4
 1021694:	014003c4 	movi	r5,15
 1021698:	1184703a 	and	r2,r2,r6
 102169c:	1447c83a 	sub	r3,r2,r17
 10216a0:	28c00716 	blt	r5,r3,10216c0 <_malloc_r+0xcc>
 10216a4:	1800920e 	bge	r3,zero,10218f0 <_malloc_r+0x2fc>
 10216a8:	84000317 	ldw	r16,12(r16)
 10216ac:	24008e26 	beq	r4,r16,10218e8 <_malloc_r+0x2f4>
 10216b0:	80800117 	ldw	r2,4(r16)
 10216b4:	1184703a 	and	r2,r2,r6
 10216b8:	1447c83a 	sub	r3,r2,r17
 10216bc:	28fff90e 	bge	r5,r3,10216a4 <__alt_data_end+0xfffe41e4>
 10216c0:	3809883a 	mov	r4,r7
 10216c4:	018040b4 	movhi	r6,258
 10216c8:	9c000417 	ldw	r16,16(r19)
 10216cc:	31998f04 	addi	r6,r6,26172
 10216d0:	32000204 	addi	r8,r6,8
 10216d4:	82013426 	beq	r16,r8,1021ba8 <_malloc_r+0x5b4>
 10216d8:	80c00117 	ldw	r3,4(r16)
 10216dc:	00bfff04 	movi	r2,-4
 10216e0:	188e703a 	and	r7,r3,r2
 10216e4:	3c45c83a 	sub	r2,r7,r17
 10216e8:	00c003c4 	movi	r3,15
 10216ec:	18811f16 	blt	r3,r2,1021b6c <_malloc_r+0x578>
 10216f0:	32000515 	stw	r8,20(r6)
 10216f4:	32000415 	stw	r8,16(r6)
 10216f8:	10007f0e 	bge	r2,zero,10218f8 <_malloc_r+0x304>
 10216fc:	00807fc4 	movi	r2,511
 1021700:	11c0fd36 	bltu	r2,r7,1021af8 <_malloc_r+0x504>
 1021704:	3806d0fa 	srli	r3,r7,3
 1021708:	01c00044 	movi	r7,1
 102170c:	30800117 	ldw	r2,4(r6)
 1021710:	19400044 	addi	r5,r3,1
 1021714:	294b883a 	add	r5,r5,r5
 1021718:	1807d0ba 	srai	r3,r3,2
 102171c:	294b883a 	add	r5,r5,r5
 1021720:	294b883a 	add	r5,r5,r5
 1021724:	298b883a 	add	r5,r5,r6
 1021728:	38c6983a 	sll	r3,r7,r3
 102172c:	29c00017 	ldw	r7,0(r5)
 1021730:	2a7ffe04 	addi	r9,r5,-8
 1021734:	1886b03a 	or	r3,r3,r2
 1021738:	82400315 	stw	r9,12(r16)
 102173c:	81c00215 	stw	r7,8(r16)
 1021740:	30c00115 	stw	r3,4(r6)
 1021744:	2c000015 	stw	r16,0(r5)
 1021748:	3c000315 	stw	r16,12(r7)
 102174c:	2005d0ba 	srai	r2,r4,2
 1021750:	01400044 	movi	r5,1
 1021754:	288a983a 	sll	r5,r5,r2
 1021758:	19406f36 	bltu	r3,r5,1021918 <_malloc_r+0x324>
 102175c:	28c4703a 	and	r2,r5,r3
 1021760:	10000a1e 	bne	r2,zero,102178c <_malloc_r+0x198>
 1021764:	00bfff04 	movi	r2,-4
 1021768:	294b883a 	add	r5,r5,r5
 102176c:	2088703a 	and	r4,r4,r2
 1021770:	28c4703a 	and	r2,r5,r3
 1021774:	21000104 	addi	r4,r4,4
 1021778:	1000041e 	bne	r2,zero,102178c <_malloc_r+0x198>
 102177c:	294b883a 	add	r5,r5,r5
 1021780:	28c4703a 	and	r2,r5,r3
 1021784:	21000104 	addi	r4,r4,4
 1021788:	103ffc26 	beq	r2,zero,102177c <__alt_data_end+0xfffe42bc>
 102178c:	02bfff04 	movi	r10,-4
 1021790:	024003c4 	movi	r9,15
 1021794:	21800044 	addi	r6,r4,1
 1021798:	318d883a 	add	r6,r6,r6
 102179c:	318d883a 	add	r6,r6,r6
 10217a0:	318d883a 	add	r6,r6,r6
 10217a4:	998d883a 	add	r6,r19,r6
 10217a8:	333ffe04 	addi	r12,r6,-8
 10217ac:	2017883a 	mov	r11,r4
 10217b0:	31800104 	addi	r6,r6,4
 10217b4:	34000017 	ldw	r16,0(r6)
 10217b8:	31fffd04 	addi	r7,r6,-12
 10217bc:	81c0041e 	bne	r16,r7,10217d0 <_malloc_r+0x1dc>
 10217c0:	0000fb06 	br	1021bb0 <_malloc_r+0x5bc>
 10217c4:	1801030e 	bge	r3,zero,1021bd4 <_malloc_r+0x5e0>
 10217c8:	84000317 	ldw	r16,12(r16)
 10217cc:	81c0f826 	beq	r16,r7,1021bb0 <_malloc_r+0x5bc>
 10217d0:	80800117 	ldw	r2,4(r16)
 10217d4:	1284703a 	and	r2,r2,r10
 10217d8:	1447c83a 	sub	r3,r2,r17
 10217dc:	48fff90e 	bge	r9,r3,10217c4 <__alt_data_end+0xfffe4304>
 10217e0:	80800317 	ldw	r2,12(r16)
 10217e4:	81000217 	ldw	r4,8(r16)
 10217e8:	89400054 	ori	r5,r17,1
 10217ec:	81400115 	stw	r5,4(r16)
 10217f0:	20800315 	stw	r2,12(r4)
 10217f4:	11000215 	stw	r4,8(r2)
 10217f8:	8463883a 	add	r17,r16,r17
 10217fc:	9c400515 	stw	r17,20(r19)
 1021800:	9c400415 	stw	r17,16(r19)
 1021804:	18800054 	ori	r2,r3,1
 1021808:	88800115 	stw	r2,4(r17)
 102180c:	8a000315 	stw	r8,12(r17)
 1021810:	8a000215 	stw	r8,8(r17)
 1021814:	88e3883a 	add	r17,r17,r3
 1021818:	88c00015 	stw	r3,0(r17)
 102181c:	9009883a 	mov	r4,r18
 1021820:	1023e0c0 	call	1023e0c <__malloc_unlock>
 1021824:	80800204 	addi	r2,r16,8
 1021828:	00001b06 	br	1021898 <_malloc_r+0x2a4>
 102182c:	04400404 	movi	r17,16
 1021830:	89402536 	bltu	r17,r5,10218c8 <_malloc_r+0x2d4>
 1021834:	1023de80 	call	1023de8 <__malloc_lock>
 1021838:	00800184 	movi	r2,6
 102183c:	01000084 	movi	r4,2
 1021840:	04c040b4 	movhi	r19,258
 1021844:	1085883a 	add	r2,r2,r2
 1021848:	9cd98f04 	addi	r19,r19,26172
 102184c:	1085883a 	add	r2,r2,r2
 1021850:	9885883a 	add	r2,r19,r2
 1021854:	14000117 	ldw	r16,4(r2)
 1021858:	10fffe04 	addi	r3,r2,-8
 102185c:	80c0d926 	beq	r16,r3,1021bc4 <_malloc_r+0x5d0>
 1021860:	80c00117 	ldw	r3,4(r16)
 1021864:	81000317 	ldw	r4,12(r16)
 1021868:	00bfff04 	movi	r2,-4
 102186c:	1884703a 	and	r2,r3,r2
 1021870:	81400217 	ldw	r5,8(r16)
 1021874:	8085883a 	add	r2,r16,r2
 1021878:	10c00117 	ldw	r3,4(r2)
 102187c:	29000315 	stw	r4,12(r5)
 1021880:	21400215 	stw	r5,8(r4)
 1021884:	18c00054 	ori	r3,r3,1
 1021888:	10c00115 	stw	r3,4(r2)
 102188c:	9009883a 	mov	r4,r18
 1021890:	1023e0c0 	call	1023e0c <__malloc_unlock>
 1021894:	80800204 	addi	r2,r16,8
 1021898:	dfc00a17 	ldw	ra,40(sp)
 102189c:	df000917 	ldw	fp,36(sp)
 10218a0:	ddc00817 	ldw	r23,32(sp)
 10218a4:	dd800717 	ldw	r22,28(sp)
 10218a8:	dd400617 	ldw	r21,24(sp)
 10218ac:	dd000517 	ldw	r20,20(sp)
 10218b0:	dcc00417 	ldw	r19,16(sp)
 10218b4:	dc800317 	ldw	r18,12(sp)
 10218b8:	dc400217 	ldw	r17,8(sp)
 10218bc:	dc000117 	ldw	r16,4(sp)
 10218c0:	dec00b04 	addi	sp,sp,44
 10218c4:	f800283a 	ret
 10218c8:	00800304 	movi	r2,12
 10218cc:	90800015 	stw	r2,0(r18)
 10218d0:	0005883a 	mov	r2,zero
 10218d4:	003ff006 	br	1021898 <__alt_data_end+0xfffe43d8>
 10218d8:	01002004 	movi	r4,128
 10218dc:	02001004 	movi	r8,64
 10218e0:	01c00fc4 	movi	r7,63
 10218e4:	003f6106 	br	102166c <__alt_data_end+0xfffe41ac>
 10218e8:	4009883a 	mov	r4,r8
 10218ec:	003f7506 	br	10216c4 <__alt_data_end+0xfffe4204>
 10218f0:	81000317 	ldw	r4,12(r16)
 10218f4:	003fde06 	br	1021870 <__alt_data_end+0xfffe43b0>
 10218f8:	81c5883a 	add	r2,r16,r7
 10218fc:	11400117 	ldw	r5,4(r2)
 1021900:	9009883a 	mov	r4,r18
 1021904:	29400054 	ori	r5,r5,1
 1021908:	11400115 	stw	r5,4(r2)
 102190c:	1023e0c0 	call	1023e0c <__malloc_unlock>
 1021910:	80800204 	addi	r2,r16,8
 1021914:	003fe006 	br	1021898 <__alt_data_end+0xfffe43d8>
 1021918:	9c000217 	ldw	r16,8(r19)
 102191c:	00bfff04 	movi	r2,-4
 1021920:	85800117 	ldw	r22,4(r16)
 1021924:	b0ac703a 	and	r22,r22,r2
 1021928:	b4400336 	bltu	r22,r17,1021938 <_malloc_r+0x344>
 102192c:	b445c83a 	sub	r2,r22,r17
 1021930:	00c003c4 	movi	r3,15
 1021934:	18805d16 	blt	r3,r2,1021aac <_malloc_r+0x4b8>
 1021938:	05c040b4 	movhi	r23,258
 102193c:	008040f4 	movhi	r2,259
 1021940:	10a5be04 	addi	r2,r2,-26888
 1021944:	bddf1504 	addi	r23,r23,31828
 1021948:	15400017 	ldw	r21,0(r2)
 102194c:	b8c00017 	ldw	r3,0(r23)
 1021950:	00bfffc4 	movi	r2,-1
 1021954:	858d883a 	add	r6,r16,r22
 1021958:	8d6b883a 	add	r21,r17,r21
 102195c:	1880ea26 	beq	r3,r2,1021d08 <_malloc_r+0x714>
 1021960:	ad4403c4 	addi	r21,r21,4111
 1021964:	00bc0004 	movi	r2,-4096
 1021968:	a8aa703a 	and	r21,r21,r2
 102196c:	a80b883a 	mov	r5,r21
 1021970:	9009883a 	mov	r4,r18
 1021974:	d9800015 	stw	r6,0(sp)
 1021978:	10228140 	call	1022814 <_sbrk_r>
 102197c:	1029883a 	mov	r20,r2
 1021980:	00bfffc4 	movi	r2,-1
 1021984:	d9800017 	ldw	r6,0(sp)
 1021988:	a080e826 	beq	r20,r2,1021d2c <_malloc_r+0x738>
 102198c:	a180a636 	bltu	r20,r6,1021c28 <_malloc_r+0x634>
 1021990:	070040f4 	movhi	fp,259
 1021994:	e725c704 	addi	fp,fp,-26852
 1021998:	e0800017 	ldw	r2,0(fp)
 102199c:	a887883a 	add	r3,r21,r2
 10219a0:	e0c00015 	stw	r3,0(fp)
 10219a4:	3500e626 	beq	r6,r20,1021d40 <_malloc_r+0x74c>
 10219a8:	b9000017 	ldw	r4,0(r23)
 10219ac:	00bfffc4 	movi	r2,-1
 10219b0:	2080ee26 	beq	r4,r2,1021d6c <_malloc_r+0x778>
 10219b4:	a185c83a 	sub	r2,r20,r6
 10219b8:	10c5883a 	add	r2,r2,r3
 10219bc:	e0800015 	stw	r2,0(fp)
 10219c0:	a0c001cc 	andi	r3,r20,7
 10219c4:	1800bc26 	beq	r3,zero,1021cb8 <_malloc_r+0x6c4>
 10219c8:	a0e9c83a 	sub	r20,r20,r3
 10219cc:	00840204 	movi	r2,4104
 10219d0:	a5000204 	addi	r20,r20,8
 10219d4:	10c7c83a 	sub	r3,r2,r3
 10219d8:	a545883a 	add	r2,r20,r21
 10219dc:	1083ffcc 	andi	r2,r2,4095
 10219e0:	18abc83a 	sub	r21,r3,r2
 10219e4:	a80b883a 	mov	r5,r21
 10219e8:	9009883a 	mov	r4,r18
 10219ec:	10228140 	call	1022814 <_sbrk_r>
 10219f0:	00ffffc4 	movi	r3,-1
 10219f4:	10c0e126 	beq	r2,r3,1021d7c <_malloc_r+0x788>
 10219f8:	1505c83a 	sub	r2,r2,r20
 10219fc:	1545883a 	add	r2,r2,r21
 1021a00:	10800054 	ori	r2,r2,1
 1021a04:	e0c00017 	ldw	r3,0(fp)
 1021a08:	9d000215 	stw	r20,8(r19)
 1021a0c:	a0800115 	stw	r2,4(r20)
 1021a10:	a8c7883a 	add	r3,r21,r3
 1021a14:	e0c00015 	stw	r3,0(fp)
 1021a18:	84c00e26 	beq	r16,r19,1021a54 <_malloc_r+0x460>
 1021a1c:	018003c4 	movi	r6,15
 1021a20:	3580a72e 	bgeu	r6,r22,1021cc0 <_malloc_r+0x6cc>
 1021a24:	81400117 	ldw	r5,4(r16)
 1021a28:	013ffe04 	movi	r4,-8
 1021a2c:	b0bffd04 	addi	r2,r22,-12
 1021a30:	1104703a 	and	r2,r2,r4
 1021a34:	2900004c 	andi	r4,r5,1
 1021a38:	2088b03a 	or	r4,r4,r2
 1021a3c:	81000115 	stw	r4,4(r16)
 1021a40:	01400144 	movi	r5,5
 1021a44:	8089883a 	add	r4,r16,r2
 1021a48:	21400115 	stw	r5,4(r4)
 1021a4c:	21400215 	stw	r5,8(r4)
 1021a50:	3080cd36 	bltu	r6,r2,1021d88 <_malloc_r+0x794>
 1021a54:	008040f4 	movhi	r2,259
 1021a58:	10a5bd04 	addi	r2,r2,-26892
 1021a5c:	11000017 	ldw	r4,0(r2)
 1021a60:	20c0012e 	bgeu	r4,r3,1021a68 <_malloc_r+0x474>
 1021a64:	10c00015 	stw	r3,0(r2)
 1021a68:	008040f4 	movhi	r2,259
 1021a6c:	10a5bc04 	addi	r2,r2,-26896
 1021a70:	11000017 	ldw	r4,0(r2)
 1021a74:	9c000217 	ldw	r16,8(r19)
 1021a78:	20c0012e 	bgeu	r4,r3,1021a80 <_malloc_r+0x48c>
 1021a7c:	10c00015 	stw	r3,0(r2)
 1021a80:	80c00117 	ldw	r3,4(r16)
 1021a84:	00bfff04 	movi	r2,-4
 1021a88:	1886703a 	and	r3,r3,r2
 1021a8c:	1c45c83a 	sub	r2,r3,r17
 1021a90:	1c400236 	bltu	r3,r17,1021a9c <_malloc_r+0x4a8>
 1021a94:	00c003c4 	movi	r3,15
 1021a98:	18800416 	blt	r3,r2,1021aac <_malloc_r+0x4b8>
 1021a9c:	9009883a 	mov	r4,r18
 1021aa0:	1023e0c0 	call	1023e0c <__malloc_unlock>
 1021aa4:	0005883a 	mov	r2,zero
 1021aa8:	003f7b06 	br	1021898 <__alt_data_end+0xfffe43d8>
 1021aac:	88c00054 	ori	r3,r17,1
 1021ab0:	80c00115 	stw	r3,4(r16)
 1021ab4:	8463883a 	add	r17,r16,r17
 1021ab8:	10800054 	ori	r2,r2,1
 1021abc:	9c400215 	stw	r17,8(r19)
 1021ac0:	88800115 	stw	r2,4(r17)
 1021ac4:	9009883a 	mov	r4,r18
 1021ac8:	1023e0c0 	call	1023e0c <__malloc_unlock>
 1021acc:	80800204 	addi	r2,r16,8
 1021ad0:	003f7106 	br	1021898 <__alt_data_end+0xfffe43d8>
 1021ad4:	00c00504 	movi	r3,20
 1021ad8:	18804a2e 	bgeu	r3,r2,1021c04 <_malloc_r+0x610>
 1021adc:	00c01504 	movi	r3,84
 1021ae0:	18806e36 	bltu	r3,r2,1021c9c <_malloc_r+0x6a8>
 1021ae4:	8804d33a 	srli	r2,r17,12
 1021ae8:	12001bc4 	addi	r8,r2,111
 1021aec:	11c01b84 	addi	r7,r2,110
 1021af0:	4209883a 	add	r4,r8,r8
 1021af4:	003edd06 	br	102166c <__alt_data_end+0xfffe41ac>
 1021af8:	3804d27a 	srli	r2,r7,9
 1021afc:	00c00104 	movi	r3,4
 1021b00:	1880442e 	bgeu	r3,r2,1021c14 <_malloc_r+0x620>
 1021b04:	00c00504 	movi	r3,20
 1021b08:	18808136 	bltu	r3,r2,1021d10 <_malloc_r+0x71c>
 1021b0c:	11401704 	addi	r5,r2,92
 1021b10:	10c016c4 	addi	r3,r2,91
 1021b14:	294b883a 	add	r5,r5,r5
 1021b18:	294b883a 	add	r5,r5,r5
 1021b1c:	294b883a 	add	r5,r5,r5
 1021b20:	994b883a 	add	r5,r19,r5
 1021b24:	28800017 	ldw	r2,0(r5)
 1021b28:	018040b4 	movhi	r6,258
 1021b2c:	297ffe04 	addi	r5,r5,-8
 1021b30:	31998f04 	addi	r6,r6,26172
 1021b34:	28806526 	beq	r5,r2,1021ccc <_malloc_r+0x6d8>
 1021b38:	01bfff04 	movi	r6,-4
 1021b3c:	10c00117 	ldw	r3,4(r2)
 1021b40:	1986703a 	and	r3,r3,r6
 1021b44:	38c0022e 	bgeu	r7,r3,1021b50 <_malloc_r+0x55c>
 1021b48:	10800217 	ldw	r2,8(r2)
 1021b4c:	28bffb1e 	bne	r5,r2,1021b3c <__alt_data_end+0xfffe467c>
 1021b50:	11400317 	ldw	r5,12(r2)
 1021b54:	98c00117 	ldw	r3,4(r19)
 1021b58:	81400315 	stw	r5,12(r16)
 1021b5c:	80800215 	stw	r2,8(r16)
 1021b60:	2c000215 	stw	r16,8(r5)
 1021b64:	14000315 	stw	r16,12(r2)
 1021b68:	003ef806 	br	102174c <__alt_data_end+0xfffe428c>
 1021b6c:	88c00054 	ori	r3,r17,1
 1021b70:	80c00115 	stw	r3,4(r16)
 1021b74:	8463883a 	add	r17,r16,r17
 1021b78:	34400515 	stw	r17,20(r6)
 1021b7c:	34400415 	stw	r17,16(r6)
 1021b80:	10c00054 	ori	r3,r2,1
 1021b84:	8a000315 	stw	r8,12(r17)
 1021b88:	8a000215 	stw	r8,8(r17)
 1021b8c:	88c00115 	stw	r3,4(r17)
 1021b90:	88a3883a 	add	r17,r17,r2
 1021b94:	88800015 	stw	r2,0(r17)
 1021b98:	9009883a 	mov	r4,r18
 1021b9c:	1023e0c0 	call	1023e0c <__malloc_unlock>
 1021ba0:	80800204 	addi	r2,r16,8
 1021ba4:	003f3c06 	br	1021898 <__alt_data_end+0xfffe43d8>
 1021ba8:	30c00117 	ldw	r3,4(r6)
 1021bac:	003ee706 	br	102174c <__alt_data_end+0xfffe428c>
 1021bb0:	5ac00044 	addi	r11,r11,1
 1021bb4:	588000cc 	andi	r2,r11,3
 1021bb8:	31800204 	addi	r6,r6,8
 1021bbc:	103efd1e 	bne	r2,zero,10217b4 <__alt_data_end+0xfffe42f4>
 1021bc0:	00002406 	br	1021c54 <_malloc_r+0x660>
 1021bc4:	14000317 	ldw	r16,12(r2)
 1021bc8:	143f251e 	bne	r2,r16,1021860 <__alt_data_end+0xfffe43a0>
 1021bcc:	21000084 	addi	r4,r4,2
 1021bd0:	003ebc06 	br	10216c4 <__alt_data_end+0xfffe4204>
 1021bd4:	8085883a 	add	r2,r16,r2
 1021bd8:	10c00117 	ldw	r3,4(r2)
 1021bdc:	81000317 	ldw	r4,12(r16)
 1021be0:	81400217 	ldw	r5,8(r16)
 1021be4:	18c00054 	ori	r3,r3,1
 1021be8:	10c00115 	stw	r3,4(r2)
 1021bec:	29000315 	stw	r4,12(r5)
 1021bf0:	21400215 	stw	r5,8(r4)
 1021bf4:	9009883a 	mov	r4,r18
 1021bf8:	1023e0c0 	call	1023e0c <__malloc_unlock>
 1021bfc:	80800204 	addi	r2,r16,8
 1021c00:	003f2506 	br	1021898 <__alt_data_end+0xfffe43d8>
 1021c04:	12001704 	addi	r8,r2,92
 1021c08:	11c016c4 	addi	r7,r2,91
 1021c0c:	4209883a 	add	r4,r8,r8
 1021c10:	003e9606 	br	102166c <__alt_data_end+0xfffe41ac>
 1021c14:	3804d1ba 	srli	r2,r7,6
 1021c18:	11400e44 	addi	r5,r2,57
 1021c1c:	10c00e04 	addi	r3,r2,56
 1021c20:	294b883a 	add	r5,r5,r5
 1021c24:	003fbc06 	br	1021b18 <__alt_data_end+0xfffe4658>
 1021c28:	84ff5926 	beq	r16,r19,1021990 <__alt_data_end+0xfffe44d0>
 1021c2c:	008040b4 	movhi	r2,258
 1021c30:	10998f04 	addi	r2,r2,26172
 1021c34:	14000217 	ldw	r16,8(r2)
 1021c38:	00bfff04 	movi	r2,-4
 1021c3c:	80c00117 	ldw	r3,4(r16)
 1021c40:	1886703a 	and	r3,r3,r2
 1021c44:	003f9106 	br	1021a8c <__alt_data_end+0xfffe45cc>
 1021c48:	60800217 	ldw	r2,8(r12)
 1021c4c:	213fffc4 	addi	r4,r4,-1
 1021c50:	1300651e 	bne	r2,r12,1021de8 <_malloc_r+0x7f4>
 1021c54:	208000cc 	andi	r2,r4,3
 1021c58:	633ffe04 	addi	r12,r12,-8
 1021c5c:	103ffa1e 	bne	r2,zero,1021c48 <__alt_data_end+0xfffe4788>
 1021c60:	98800117 	ldw	r2,4(r19)
 1021c64:	0146303a 	nor	r3,zero,r5
 1021c68:	1884703a 	and	r2,r3,r2
 1021c6c:	98800115 	stw	r2,4(r19)
 1021c70:	294b883a 	add	r5,r5,r5
 1021c74:	117f2836 	bltu	r2,r5,1021918 <__alt_data_end+0xfffe4458>
 1021c78:	283f2726 	beq	r5,zero,1021918 <__alt_data_end+0xfffe4458>
 1021c7c:	2886703a 	and	r3,r5,r2
 1021c80:	5809883a 	mov	r4,r11
 1021c84:	183ec31e 	bne	r3,zero,1021794 <__alt_data_end+0xfffe42d4>
 1021c88:	294b883a 	add	r5,r5,r5
 1021c8c:	2886703a 	and	r3,r5,r2
 1021c90:	21000104 	addi	r4,r4,4
 1021c94:	183ffc26 	beq	r3,zero,1021c88 <__alt_data_end+0xfffe47c8>
 1021c98:	003ebe06 	br	1021794 <__alt_data_end+0xfffe42d4>
 1021c9c:	00c05504 	movi	r3,340
 1021ca0:	18801236 	bltu	r3,r2,1021cec <_malloc_r+0x6f8>
 1021ca4:	8804d3fa 	srli	r2,r17,15
 1021ca8:	12001e04 	addi	r8,r2,120
 1021cac:	11c01dc4 	addi	r7,r2,119
 1021cb0:	4209883a 	add	r4,r8,r8
 1021cb4:	003e6d06 	br	102166c <__alt_data_end+0xfffe41ac>
 1021cb8:	00c40004 	movi	r3,4096
 1021cbc:	003f4606 	br	10219d8 <__alt_data_end+0xfffe4518>
 1021cc0:	00800044 	movi	r2,1
 1021cc4:	a0800115 	stw	r2,4(r20)
 1021cc8:	003f7406 	br	1021a9c <__alt_data_end+0xfffe45dc>
 1021ccc:	1805d0ba 	srai	r2,r3,2
 1021cd0:	01c00044 	movi	r7,1
 1021cd4:	30c00117 	ldw	r3,4(r6)
 1021cd8:	388e983a 	sll	r7,r7,r2
 1021cdc:	2805883a 	mov	r2,r5
 1021ce0:	38c6b03a 	or	r3,r7,r3
 1021ce4:	30c00115 	stw	r3,4(r6)
 1021ce8:	003f9b06 	br	1021b58 <__alt_data_end+0xfffe4698>
 1021cec:	00c15504 	movi	r3,1364
 1021cf0:	18801a36 	bltu	r3,r2,1021d5c <_malloc_r+0x768>
 1021cf4:	8804d4ba 	srli	r2,r17,18
 1021cf8:	12001f44 	addi	r8,r2,125
 1021cfc:	11c01f04 	addi	r7,r2,124
 1021d00:	4209883a 	add	r4,r8,r8
 1021d04:	003e5906 	br	102166c <__alt_data_end+0xfffe41ac>
 1021d08:	ad400404 	addi	r21,r21,16
 1021d0c:	003f1706 	br	102196c <__alt_data_end+0xfffe44ac>
 1021d10:	00c01504 	movi	r3,84
 1021d14:	18802336 	bltu	r3,r2,1021da4 <_malloc_r+0x7b0>
 1021d18:	3804d33a 	srli	r2,r7,12
 1021d1c:	11401bc4 	addi	r5,r2,111
 1021d20:	10c01b84 	addi	r3,r2,110
 1021d24:	294b883a 	add	r5,r5,r5
 1021d28:	003f7b06 	br	1021b18 <__alt_data_end+0xfffe4658>
 1021d2c:	9c000217 	ldw	r16,8(r19)
 1021d30:	00bfff04 	movi	r2,-4
 1021d34:	80c00117 	ldw	r3,4(r16)
 1021d38:	1886703a 	and	r3,r3,r2
 1021d3c:	003f5306 	br	1021a8c <__alt_data_end+0xfffe45cc>
 1021d40:	3083ffcc 	andi	r2,r6,4095
 1021d44:	103f181e 	bne	r2,zero,10219a8 <__alt_data_end+0xfffe44e8>
 1021d48:	99000217 	ldw	r4,8(r19)
 1021d4c:	b545883a 	add	r2,r22,r21
 1021d50:	10800054 	ori	r2,r2,1
 1021d54:	20800115 	stw	r2,4(r4)
 1021d58:	003f3e06 	br	1021a54 <__alt_data_end+0xfffe4594>
 1021d5c:	01003f84 	movi	r4,254
 1021d60:	02001fc4 	movi	r8,127
 1021d64:	01c01f84 	movi	r7,126
 1021d68:	003e4006 	br	102166c <__alt_data_end+0xfffe41ac>
 1021d6c:	008040b4 	movhi	r2,258
 1021d70:	109f1504 	addi	r2,r2,31828
 1021d74:	15000015 	stw	r20,0(r2)
 1021d78:	003f1106 	br	10219c0 <__alt_data_end+0xfffe4500>
 1021d7c:	00800044 	movi	r2,1
 1021d80:	002b883a 	mov	r21,zero
 1021d84:	003f1f06 	br	1021a04 <__alt_data_end+0xfffe4544>
 1021d88:	81400204 	addi	r5,r16,8
 1021d8c:	9009883a 	mov	r4,r18
 1021d90:	102307c0 	call	102307c <_free_r>
 1021d94:	008040f4 	movhi	r2,259
 1021d98:	10a5c704 	addi	r2,r2,-26852
 1021d9c:	10c00017 	ldw	r3,0(r2)
 1021da0:	003f2c06 	br	1021a54 <__alt_data_end+0xfffe4594>
 1021da4:	00c05504 	movi	r3,340
 1021da8:	18800536 	bltu	r3,r2,1021dc0 <_malloc_r+0x7cc>
 1021dac:	3804d3fa 	srli	r2,r7,15
 1021db0:	11401e04 	addi	r5,r2,120
 1021db4:	10c01dc4 	addi	r3,r2,119
 1021db8:	294b883a 	add	r5,r5,r5
 1021dbc:	003f5606 	br	1021b18 <__alt_data_end+0xfffe4658>
 1021dc0:	00c15504 	movi	r3,1364
 1021dc4:	18800536 	bltu	r3,r2,1021ddc <_malloc_r+0x7e8>
 1021dc8:	3804d4ba 	srli	r2,r7,18
 1021dcc:	11401f44 	addi	r5,r2,125
 1021dd0:	10c01f04 	addi	r3,r2,124
 1021dd4:	294b883a 	add	r5,r5,r5
 1021dd8:	003f4f06 	br	1021b18 <__alt_data_end+0xfffe4658>
 1021ddc:	01403f84 	movi	r5,254
 1021de0:	00c01f84 	movi	r3,126
 1021de4:	003f4c06 	br	1021b18 <__alt_data_end+0xfffe4658>
 1021de8:	98800117 	ldw	r2,4(r19)
 1021dec:	003fa006 	br	1021c70 <__alt_data_end+0xfffe47b0>
 1021df0:	8808d0fa 	srli	r4,r17,3
 1021df4:	20800044 	addi	r2,r4,1
 1021df8:	1085883a 	add	r2,r2,r2
 1021dfc:	003e9006 	br	1021840 <__alt_data_end+0xfffe4380>

01021e00 <memchr>:
 1021e00:	208000cc 	andi	r2,r4,3
 1021e04:	280f883a 	mov	r7,r5
 1021e08:	10003426 	beq	r2,zero,1021edc <memchr+0xdc>
 1021e0c:	30bfffc4 	addi	r2,r6,-1
 1021e10:	30001a26 	beq	r6,zero,1021e7c <memchr+0x7c>
 1021e14:	20c00003 	ldbu	r3,0(r4)
 1021e18:	29803fcc 	andi	r6,r5,255
 1021e1c:	30c0051e 	bne	r6,r3,1021e34 <memchr+0x34>
 1021e20:	00001806 	br	1021e84 <memchr+0x84>
 1021e24:	10001526 	beq	r2,zero,1021e7c <memchr+0x7c>
 1021e28:	20c00003 	ldbu	r3,0(r4)
 1021e2c:	10bfffc4 	addi	r2,r2,-1
 1021e30:	30c01426 	beq	r6,r3,1021e84 <memchr+0x84>
 1021e34:	21000044 	addi	r4,r4,1
 1021e38:	20c000cc 	andi	r3,r4,3
 1021e3c:	183ff91e 	bne	r3,zero,1021e24 <__alt_data_end+0xfffe4964>
 1021e40:	020000c4 	movi	r8,3
 1021e44:	40801136 	bltu	r8,r2,1021e8c <memchr+0x8c>
 1021e48:	10000c26 	beq	r2,zero,1021e7c <memchr+0x7c>
 1021e4c:	20c00003 	ldbu	r3,0(r4)
 1021e50:	29403fcc 	andi	r5,r5,255
 1021e54:	28c00b26 	beq	r5,r3,1021e84 <memchr+0x84>
 1021e58:	20c00044 	addi	r3,r4,1
 1021e5c:	39803fcc 	andi	r6,r7,255
 1021e60:	2089883a 	add	r4,r4,r2
 1021e64:	00000306 	br	1021e74 <memchr+0x74>
 1021e68:	18c00044 	addi	r3,r3,1
 1021e6c:	197fffc3 	ldbu	r5,-1(r3)
 1021e70:	31400526 	beq	r6,r5,1021e88 <memchr+0x88>
 1021e74:	1805883a 	mov	r2,r3
 1021e78:	20fffb1e 	bne	r4,r3,1021e68 <__alt_data_end+0xfffe49a8>
 1021e7c:	0005883a 	mov	r2,zero
 1021e80:	f800283a 	ret
 1021e84:	2005883a 	mov	r2,r4
 1021e88:	f800283a 	ret
 1021e8c:	28c03fcc 	andi	r3,r5,255
 1021e90:	1812923a 	slli	r9,r3,8
 1021e94:	02ffbff4 	movhi	r11,65279
 1021e98:	02a02074 	movhi	r10,32897
 1021e9c:	48d2b03a 	or	r9,r9,r3
 1021ea0:	4806943a 	slli	r3,r9,16
 1021ea4:	5affbfc4 	addi	r11,r11,-257
 1021ea8:	52a02004 	addi	r10,r10,-32640
 1021eac:	48d2b03a 	or	r9,r9,r3
 1021eb0:	20c00017 	ldw	r3,0(r4)
 1021eb4:	48c6f03a 	xor	r3,r9,r3
 1021eb8:	1acd883a 	add	r6,r3,r11
 1021ebc:	00c6303a 	nor	r3,zero,r3
 1021ec0:	30c6703a 	and	r3,r6,r3
 1021ec4:	1a86703a 	and	r3,r3,r10
 1021ec8:	183fe01e 	bne	r3,zero,1021e4c <__alt_data_end+0xfffe498c>
 1021ecc:	10bfff04 	addi	r2,r2,-4
 1021ed0:	21000104 	addi	r4,r4,4
 1021ed4:	40bff636 	bltu	r8,r2,1021eb0 <__alt_data_end+0xfffe49f0>
 1021ed8:	003fdb06 	br	1021e48 <__alt_data_end+0xfffe4988>
 1021edc:	3005883a 	mov	r2,r6
 1021ee0:	003fd706 	br	1021e40 <__alt_data_end+0xfffe4980>

01021ee4 <memcpy>:
 1021ee4:	defffd04 	addi	sp,sp,-12
 1021ee8:	dfc00215 	stw	ra,8(sp)
 1021eec:	dc400115 	stw	r17,4(sp)
 1021ef0:	dc000015 	stw	r16,0(sp)
 1021ef4:	00c003c4 	movi	r3,15
 1021ef8:	2005883a 	mov	r2,r4
 1021efc:	1980452e 	bgeu	r3,r6,1022014 <memcpy+0x130>
 1021f00:	2906b03a 	or	r3,r5,r4
 1021f04:	18c000cc 	andi	r3,r3,3
 1021f08:	1800441e 	bne	r3,zero,102201c <memcpy+0x138>
 1021f0c:	347ffc04 	addi	r17,r6,-16
 1021f10:	8822d13a 	srli	r17,r17,4
 1021f14:	28c00104 	addi	r3,r5,4
 1021f18:	23400104 	addi	r13,r4,4
 1021f1c:	8820913a 	slli	r16,r17,4
 1021f20:	2b000204 	addi	r12,r5,8
 1021f24:	22c00204 	addi	r11,r4,8
 1021f28:	84000504 	addi	r16,r16,20
 1021f2c:	2a800304 	addi	r10,r5,12
 1021f30:	22400304 	addi	r9,r4,12
 1021f34:	2c21883a 	add	r16,r5,r16
 1021f38:	2811883a 	mov	r8,r5
 1021f3c:	200f883a 	mov	r7,r4
 1021f40:	41000017 	ldw	r4,0(r8)
 1021f44:	1fc00017 	ldw	ra,0(r3)
 1021f48:	63c00017 	ldw	r15,0(r12)
 1021f4c:	39000015 	stw	r4,0(r7)
 1021f50:	53800017 	ldw	r14,0(r10)
 1021f54:	6fc00015 	stw	ra,0(r13)
 1021f58:	5bc00015 	stw	r15,0(r11)
 1021f5c:	4b800015 	stw	r14,0(r9)
 1021f60:	18c00404 	addi	r3,r3,16
 1021f64:	39c00404 	addi	r7,r7,16
 1021f68:	42000404 	addi	r8,r8,16
 1021f6c:	6b400404 	addi	r13,r13,16
 1021f70:	63000404 	addi	r12,r12,16
 1021f74:	5ac00404 	addi	r11,r11,16
 1021f78:	52800404 	addi	r10,r10,16
 1021f7c:	4a400404 	addi	r9,r9,16
 1021f80:	1c3fef1e 	bne	r3,r16,1021f40 <__alt_data_end+0xfffe4a80>
 1021f84:	89c00044 	addi	r7,r17,1
 1021f88:	380e913a 	slli	r7,r7,4
 1021f8c:	310003cc 	andi	r4,r6,15
 1021f90:	02c000c4 	movi	r11,3
 1021f94:	11c7883a 	add	r3,r2,r7
 1021f98:	29cb883a 	add	r5,r5,r7
 1021f9c:	5900212e 	bgeu	r11,r4,1022024 <memcpy+0x140>
 1021fa0:	1813883a 	mov	r9,r3
 1021fa4:	2811883a 	mov	r8,r5
 1021fa8:	200f883a 	mov	r7,r4
 1021fac:	42800017 	ldw	r10,0(r8)
 1021fb0:	4a400104 	addi	r9,r9,4
 1021fb4:	39ffff04 	addi	r7,r7,-4
 1021fb8:	4abfff15 	stw	r10,-4(r9)
 1021fbc:	42000104 	addi	r8,r8,4
 1021fc0:	59fffa36 	bltu	r11,r7,1021fac <__alt_data_end+0xfffe4aec>
 1021fc4:	213fff04 	addi	r4,r4,-4
 1021fc8:	2008d0ba 	srli	r4,r4,2
 1021fcc:	318000cc 	andi	r6,r6,3
 1021fd0:	21000044 	addi	r4,r4,1
 1021fd4:	2109883a 	add	r4,r4,r4
 1021fd8:	2109883a 	add	r4,r4,r4
 1021fdc:	1907883a 	add	r3,r3,r4
 1021fe0:	290b883a 	add	r5,r5,r4
 1021fe4:	30000626 	beq	r6,zero,1022000 <memcpy+0x11c>
 1021fe8:	198d883a 	add	r6,r3,r6
 1021fec:	29c00003 	ldbu	r7,0(r5)
 1021ff0:	18c00044 	addi	r3,r3,1
 1021ff4:	29400044 	addi	r5,r5,1
 1021ff8:	19ffffc5 	stb	r7,-1(r3)
 1021ffc:	19bffb1e 	bne	r3,r6,1021fec <__alt_data_end+0xfffe4b2c>
 1022000:	dfc00217 	ldw	ra,8(sp)
 1022004:	dc400117 	ldw	r17,4(sp)
 1022008:	dc000017 	ldw	r16,0(sp)
 102200c:	dec00304 	addi	sp,sp,12
 1022010:	f800283a 	ret
 1022014:	2007883a 	mov	r3,r4
 1022018:	003ff206 	br	1021fe4 <__alt_data_end+0xfffe4b24>
 102201c:	2007883a 	mov	r3,r4
 1022020:	003ff106 	br	1021fe8 <__alt_data_end+0xfffe4b28>
 1022024:	200d883a 	mov	r6,r4
 1022028:	003fee06 	br	1021fe4 <__alt_data_end+0xfffe4b24>

0102202c <memmove>:
 102202c:	2005883a 	mov	r2,r4
 1022030:	29000b2e 	bgeu	r5,r4,1022060 <memmove+0x34>
 1022034:	298f883a 	add	r7,r5,r6
 1022038:	21c0092e 	bgeu	r4,r7,1022060 <memmove+0x34>
 102203c:	2187883a 	add	r3,r4,r6
 1022040:	198bc83a 	sub	r5,r3,r6
 1022044:	30004826 	beq	r6,zero,1022168 <memmove+0x13c>
 1022048:	39ffffc4 	addi	r7,r7,-1
 102204c:	39000003 	ldbu	r4,0(r7)
 1022050:	18ffffc4 	addi	r3,r3,-1
 1022054:	19000005 	stb	r4,0(r3)
 1022058:	28fffb1e 	bne	r5,r3,1022048 <__alt_data_end+0xfffe4b88>
 102205c:	f800283a 	ret
 1022060:	00c003c4 	movi	r3,15
 1022064:	1980412e 	bgeu	r3,r6,102216c <memmove+0x140>
 1022068:	2886b03a 	or	r3,r5,r2
 102206c:	18c000cc 	andi	r3,r3,3
 1022070:	1800401e 	bne	r3,zero,1022174 <memmove+0x148>
 1022074:	33fffc04 	addi	r15,r6,-16
 1022078:	781ed13a 	srli	r15,r15,4
 102207c:	28c00104 	addi	r3,r5,4
 1022080:	13400104 	addi	r13,r2,4
 1022084:	781c913a 	slli	r14,r15,4
 1022088:	2b000204 	addi	r12,r5,8
 102208c:	12c00204 	addi	r11,r2,8
 1022090:	73800504 	addi	r14,r14,20
 1022094:	2a800304 	addi	r10,r5,12
 1022098:	12400304 	addi	r9,r2,12
 102209c:	2b9d883a 	add	r14,r5,r14
 10220a0:	2811883a 	mov	r8,r5
 10220a4:	100f883a 	mov	r7,r2
 10220a8:	41000017 	ldw	r4,0(r8)
 10220ac:	39c00404 	addi	r7,r7,16
 10220b0:	18c00404 	addi	r3,r3,16
 10220b4:	393ffc15 	stw	r4,-16(r7)
 10220b8:	193ffc17 	ldw	r4,-16(r3)
 10220bc:	6b400404 	addi	r13,r13,16
 10220c0:	5ac00404 	addi	r11,r11,16
 10220c4:	693ffc15 	stw	r4,-16(r13)
 10220c8:	61000017 	ldw	r4,0(r12)
 10220cc:	4a400404 	addi	r9,r9,16
 10220d0:	42000404 	addi	r8,r8,16
 10220d4:	593ffc15 	stw	r4,-16(r11)
 10220d8:	51000017 	ldw	r4,0(r10)
 10220dc:	63000404 	addi	r12,r12,16
 10220e0:	52800404 	addi	r10,r10,16
 10220e4:	493ffc15 	stw	r4,-16(r9)
 10220e8:	1bbfef1e 	bne	r3,r14,10220a8 <__alt_data_end+0xfffe4be8>
 10220ec:	79000044 	addi	r4,r15,1
 10220f0:	2008913a 	slli	r4,r4,4
 10220f4:	328003cc 	andi	r10,r6,15
 10220f8:	02c000c4 	movi	r11,3
 10220fc:	1107883a 	add	r3,r2,r4
 1022100:	290b883a 	add	r5,r5,r4
 1022104:	5a801e2e 	bgeu	r11,r10,1022180 <memmove+0x154>
 1022108:	1813883a 	mov	r9,r3
 102210c:	2811883a 	mov	r8,r5
 1022110:	500f883a 	mov	r7,r10
 1022114:	41000017 	ldw	r4,0(r8)
 1022118:	4a400104 	addi	r9,r9,4
 102211c:	39ffff04 	addi	r7,r7,-4
 1022120:	493fff15 	stw	r4,-4(r9)
 1022124:	42000104 	addi	r8,r8,4
 1022128:	59fffa36 	bltu	r11,r7,1022114 <__alt_data_end+0xfffe4c54>
 102212c:	513fff04 	addi	r4,r10,-4
 1022130:	2008d0ba 	srli	r4,r4,2
 1022134:	318000cc 	andi	r6,r6,3
 1022138:	21000044 	addi	r4,r4,1
 102213c:	2109883a 	add	r4,r4,r4
 1022140:	2109883a 	add	r4,r4,r4
 1022144:	1907883a 	add	r3,r3,r4
 1022148:	290b883a 	add	r5,r5,r4
 102214c:	30000b26 	beq	r6,zero,102217c <memmove+0x150>
 1022150:	198d883a 	add	r6,r3,r6
 1022154:	29c00003 	ldbu	r7,0(r5)
 1022158:	18c00044 	addi	r3,r3,1
 102215c:	29400044 	addi	r5,r5,1
 1022160:	19ffffc5 	stb	r7,-1(r3)
 1022164:	19bffb1e 	bne	r3,r6,1022154 <__alt_data_end+0xfffe4c94>
 1022168:	f800283a 	ret
 102216c:	1007883a 	mov	r3,r2
 1022170:	003ff606 	br	102214c <__alt_data_end+0xfffe4c8c>
 1022174:	1007883a 	mov	r3,r2
 1022178:	003ff506 	br	1022150 <__alt_data_end+0xfffe4c90>
 102217c:	f800283a 	ret
 1022180:	500d883a 	mov	r6,r10
 1022184:	003ff106 	br	102214c <__alt_data_end+0xfffe4c8c>

01022188 <memset>:
 1022188:	20c000cc 	andi	r3,r4,3
 102218c:	2005883a 	mov	r2,r4
 1022190:	18004426 	beq	r3,zero,10222a4 <memset+0x11c>
 1022194:	31ffffc4 	addi	r7,r6,-1
 1022198:	30004026 	beq	r6,zero,102229c <memset+0x114>
 102219c:	2813883a 	mov	r9,r5
 10221a0:	200d883a 	mov	r6,r4
 10221a4:	2007883a 	mov	r3,r4
 10221a8:	00000406 	br	10221bc <memset+0x34>
 10221ac:	3a3fffc4 	addi	r8,r7,-1
 10221b0:	31800044 	addi	r6,r6,1
 10221b4:	38003926 	beq	r7,zero,102229c <memset+0x114>
 10221b8:	400f883a 	mov	r7,r8
 10221bc:	18c00044 	addi	r3,r3,1
 10221c0:	32400005 	stb	r9,0(r6)
 10221c4:	1a0000cc 	andi	r8,r3,3
 10221c8:	403ff81e 	bne	r8,zero,10221ac <__alt_data_end+0xfffe4cec>
 10221cc:	010000c4 	movi	r4,3
 10221d0:	21c02d2e 	bgeu	r4,r7,1022288 <memset+0x100>
 10221d4:	29003fcc 	andi	r4,r5,255
 10221d8:	200c923a 	slli	r6,r4,8
 10221dc:	3108b03a 	or	r4,r6,r4
 10221e0:	200c943a 	slli	r6,r4,16
 10221e4:	218cb03a 	or	r6,r4,r6
 10221e8:	010003c4 	movi	r4,15
 10221ec:	21c0182e 	bgeu	r4,r7,1022250 <memset+0xc8>
 10221f0:	3b3ffc04 	addi	r12,r7,-16
 10221f4:	6018d13a 	srli	r12,r12,4
 10221f8:	1a000104 	addi	r8,r3,4
 10221fc:	1ac00204 	addi	r11,r3,8
 1022200:	6008913a 	slli	r4,r12,4
 1022204:	1a800304 	addi	r10,r3,12
 1022208:	1813883a 	mov	r9,r3
 102220c:	21000504 	addi	r4,r4,20
 1022210:	1909883a 	add	r4,r3,r4
 1022214:	49800015 	stw	r6,0(r9)
 1022218:	41800015 	stw	r6,0(r8)
 102221c:	59800015 	stw	r6,0(r11)
 1022220:	51800015 	stw	r6,0(r10)
 1022224:	42000404 	addi	r8,r8,16
 1022228:	4a400404 	addi	r9,r9,16
 102222c:	5ac00404 	addi	r11,r11,16
 1022230:	52800404 	addi	r10,r10,16
 1022234:	413ff71e 	bne	r8,r4,1022214 <__alt_data_end+0xfffe4d54>
 1022238:	63000044 	addi	r12,r12,1
 102223c:	6018913a 	slli	r12,r12,4
 1022240:	39c003cc 	andi	r7,r7,15
 1022244:	010000c4 	movi	r4,3
 1022248:	1b07883a 	add	r3,r3,r12
 102224c:	21c00e2e 	bgeu	r4,r7,1022288 <memset+0x100>
 1022250:	1813883a 	mov	r9,r3
 1022254:	3811883a 	mov	r8,r7
 1022258:	010000c4 	movi	r4,3
 102225c:	49800015 	stw	r6,0(r9)
 1022260:	423fff04 	addi	r8,r8,-4
 1022264:	4a400104 	addi	r9,r9,4
 1022268:	223ffc36 	bltu	r4,r8,102225c <__alt_data_end+0xfffe4d9c>
 102226c:	393fff04 	addi	r4,r7,-4
 1022270:	2008d0ba 	srli	r4,r4,2
 1022274:	39c000cc 	andi	r7,r7,3
 1022278:	21000044 	addi	r4,r4,1
 102227c:	2109883a 	add	r4,r4,r4
 1022280:	2109883a 	add	r4,r4,r4
 1022284:	1907883a 	add	r3,r3,r4
 1022288:	38000526 	beq	r7,zero,10222a0 <memset+0x118>
 102228c:	19cf883a 	add	r7,r3,r7
 1022290:	19400005 	stb	r5,0(r3)
 1022294:	18c00044 	addi	r3,r3,1
 1022298:	38fffd1e 	bne	r7,r3,1022290 <__alt_data_end+0xfffe4dd0>
 102229c:	f800283a 	ret
 10222a0:	f800283a 	ret
 10222a4:	2007883a 	mov	r3,r4
 10222a8:	300f883a 	mov	r7,r6
 10222ac:	003fc706 	br	10221cc <__alt_data_end+0xfffe4d0c>

010222b0 <_realloc_r>:
 10222b0:	defff604 	addi	sp,sp,-40
 10222b4:	dc800215 	stw	r18,8(sp)
 10222b8:	dfc00915 	stw	ra,36(sp)
 10222bc:	df000815 	stw	fp,32(sp)
 10222c0:	ddc00715 	stw	r23,28(sp)
 10222c4:	dd800615 	stw	r22,24(sp)
 10222c8:	dd400515 	stw	r21,20(sp)
 10222cc:	dd000415 	stw	r20,16(sp)
 10222d0:	dcc00315 	stw	r19,12(sp)
 10222d4:	dc400115 	stw	r17,4(sp)
 10222d8:	dc000015 	stw	r16,0(sp)
 10222dc:	3025883a 	mov	r18,r6
 10222e0:	2800b726 	beq	r5,zero,10225c0 <_realloc_r+0x310>
 10222e4:	282b883a 	mov	r21,r5
 10222e8:	2029883a 	mov	r20,r4
 10222ec:	1023de80 	call	1023de8 <__malloc_lock>
 10222f0:	a8bfff17 	ldw	r2,-4(r21)
 10222f4:	043fff04 	movi	r16,-4
 10222f8:	90c002c4 	addi	r3,r18,11
 10222fc:	01000584 	movi	r4,22
 1022300:	acfffe04 	addi	r19,r21,-8
 1022304:	1420703a 	and	r16,r2,r16
 1022308:	20c0332e 	bgeu	r4,r3,10223d8 <_realloc_r+0x128>
 102230c:	047ffe04 	movi	r17,-8
 1022310:	1c62703a 	and	r17,r3,r17
 1022314:	8807883a 	mov	r3,r17
 1022318:	88005816 	blt	r17,zero,102247c <_realloc_r+0x1cc>
 102231c:	8c805736 	bltu	r17,r18,102247c <_realloc_r+0x1cc>
 1022320:	80c0300e 	bge	r16,r3,10223e4 <_realloc_r+0x134>
 1022324:	070040b4 	movhi	fp,258
 1022328:	e7198f04 	addi	fp,fp,26172
 102232c:	e1c00217 	ldw	r7,8(fp)
 1022330:	9c09883a 	add	r4,r19,r16
 1022334:	22000117 	ldw	r8,4(r4)
 1022338:	21c06326 	beq	r4,r7,10224c8 <_realloc_r+0x218>
 102233c:	017fff84 	movi	r5,-2
 1022340:	414a703a 	and	r5,r8,r5
 1022344:	214b883a 	add	r5,r4,r5
 1022348:	29800117 	ldw	r6,4(r5)
 102234c:	3180004c 	andi	r6,r6,1
 1022350:	30003f26 	beq	r6,zero,1022450 <_realloc_r+0x1a0>
 1022354:	1080004c 	andi	r2,r2,1
 1022358:	10008326 	beq	r2,zero,1022568 <_realloc_r+0x2b8>
 102235c:	900b883a 	mov	r5,r18
 1022360:	a009883a 	mov	r4,r20
 1022364:	10215f40 	call	10215f4 <_malloc_r>
 1022368:	1025883a 	mov	r18,r2
 102236c:	10011e26 	beq	r2,zero,10227e8 <_realloc_r+0x538>
 1022370:	a93fff17 	ldw	r4,-4(r21)
 1022374:	10fffe04 	addi	r3,r2,-8
 1022378:	00bfff84 	movi	r2,-2
 102237c:	2084703a 	and	r2,r4,r2
 1022380:	9885883a 	add	r2,r19,r2
 1022384:	1880ee26 	beq	r3,r2,1022740 <_realloc_r+0x490>
 1022388:	81bfff04 	addi	r6,r16,-4
 102238c:	00800904 	movi	r2,36
 1022390:	1180b836 	bltu	r2,r6,1022674 <_realloc_r+0x3c4>
 1022394:	00c004c4 	movi	r3,19
 1022398:	19809636 	bltu	r3,r6,10225f4 <_realloc_r+0x344>
 102239c:	9005883a 	mov	r2,r18
 10223a0:	a807883a 	mov	r3,r21
 10223a4:	19000017 	ldw	r4,0(r3)
 10223a8:	11000015 	stw	r4,0(r2)
 10223ac:	19000117 	ldw	r4,4(r3)
 10223b0:	11000115 	stw	r4,4(r2)
 10223b4:	18c00217 	ldw	r3,8(r3)
 10223b8:	10c00215 	stw	r3,8(r2)
 10223bc:	a80b883a 	mov	r5,r21
 10223c0:	a009883a 	mov	r4,r20
 10223c4:	102307c0 	call	102307c <_free_r>
 10223c8:	a009883a 	mov	r4,r20
 10223cc:	1023e0c0 	call	1023e0c <__malloc_unlock>
 10223d0:	9005883a 	mov	r2,r18
 10223d4:	00001206 	br	1022420 <_realloc_r+0x170>
 10223d8:	00c00404 	movi	r3,16
 10223dc:	1823883a 	mov	r17,r3
 10223e0:	003fce06 	br	102231c <__alt_data_end+0xfffe4e5c>
 10223e4:	a825883a 	mov	r18,r21
 10223e8:	8445c83a 	sub	r2,r16,r17
 10223ec:	00c003c4 	movi	r3,15
 10223f0:	18802636 	bltu	r3,r2,102248c <_realloc_r+0x1dc>
 10223f4:	99800117 	ldw	r6,4(r19)
 10223f8:	9c07883a 	add	r3,r19,r16
 10223fc:	3180004c 	andi	r6,r6,1
 1022400:	3420b03a 	or	r16,r6,r16
 1022404:	9c000115 	stw	r16,4(r19)
 1022408:	18800117 	ldw	r2,4(r3)
 102240c:	10800054 	ori	r2,r2,1
 1022410:	18800115 	stw	r2,4(r3)
 1022414:	a009883a 	mov	r4,r20
 1022418:	1023e0c0 	call	1023e0c <__malloc_unlock>
 102241c:	9005883a 	mov	r2,r18
 1022420:	dfc00917 	ldw	ra,36(sp)
 1022424:	df000817 	ldw	fp,32(sp)
 1022428:	ddc00717 	ldw	r23,28(sp)
 102242c:	dd800617 	ldw	r22,24(sp)
 1022430:	dd400517 	ldw	r21,20(sp)
 1022434:	dd000417 	ldw	r20,16(sp)
 1022438:	dcc00317 	ldw	r19,12(sp)
 102243c:	dc800217 	ldw	r18,8(sp)
 1022440:	dc400117 	ldw	r17,4(sp)
 1022444:	dc000017 	ldw	r16,0(sp)
 1022448:	dec00a04 	addi	sp,sp,40
 102244c:	f800283a 	ret
 1022450:	017fff04 	movi	r5,-4
 1022454:	414a703a 	and	r5,r8,r5
 1022458:	814d883a 	add	r6,r16,r5
 102245c:	30c01f16 	blt	r6,r3,10224dc <_realloc_r+0x22c>
 1022460:	20800317 	ldw	r2,12(r4)
 1022464:	20c00217 	ldw	r3,8(r4)
 1022468:	a825883a 	mov	r18,r21
 102246c:	3021883a 	mov	r16,r6
 1022470:	18800315 	stw	r2,12(r3)
 1022474:	10c00215 	stw	r3,8(r2)
 1022478:	003fdb06 	br	10223e8 <__alt_data_end+0xfffe4f28>
 102247c:	00800304 	movi	r2,12
 1022480:	a0800015 	stw	r2,0(r20)
 1022484:	0005883a 	mov	r2,zero
 1022488:	003fe506 	br	1022420 <__alt_data_end+0xfffe4f60>
 102248c:	98c00117 	ldw	r3,4(r19)
 1022490:	9c4b883a 	add	r5,r19,r17
 1022494:	11000054 	ori	r4,r2,1
 1022498:	18c0004c 	andi	r3,r3,1
 102249c:	1c62b03a 	or	r17,r3,r17
 10224a0:	9c400115 	stw	r17,4(r19)
 10224a4:	29000115 	stw	r4,4(r5)
 10224a8:	2885883a 	add	r2,r5,r2
 10224ac:	10c00117 	ldw	r3,4(r2)
 10224b0:	29400204 	addi	r5,r5,8
 10224b4:	a009883a 	mov	r4,r20
 10224b8:	18c00054 	ori	r3,r3,1
 10224bc:	10c00115 	stw	r3,4(r2)
 10224c0:	102307c0 	call	102307c <_free_r>
 10224c4:	003fd306 	br	1022414 <__alt_data_end+0xfffe4f54>
 10224c8:	017fff04 	movi	r5,-4
 10224cc:	414a703a 	and	r5,r8,r5
 10224d0:	89800404 	addi	r6,r17,16
 10224d4:	8151883a 	add	r8,r16,r5
 10224d8:	4180590e 	bge	r8,r6,1022640 <_realloc_r+0x390>
 10224dc:	1080004c 	andi	r2,r2,1
 10224e0:	103f9e1e 	bne	r2,zero,102235c <__alt_data_end+0xfffe4e9c>
 10224e4:	adbffe17 	ldw	r22,-8(r21)
 10224e8:	00bfff04 	movi	r2,-4
 10224ec:	9dadc83a 	sub	r22,r19,r22
 10224f0:	b1800117 	ldw	r6,4(r22)
 10224f4:	3084703a 	and	r2,r6,r2
 10224f8:	20002026 	beq	r4,zero,102257c <_realloc_r+0x2cc>
 10224fc:	80af883a 	add	r23,r16,r2
 1022500:	b96f883a 	add	r23,r23,r5
 1022504:	21c05f26 	beq	r4,r7,1022684 <_realloc_r+0x3d4>
 1022508:	b8c01c16 	blt	r23,r3,102257c <_realloc_r+0x2cc>
 102250c:	20800317 	ldw	r2,12(r4)
 1022510:	20c00217 	ldw	r3,8(r4)
 1022514:	81bfff04 	addi	r6,r16,-4
 1022518:	01000904 	movi	r4,36
 102251c:	18800315 	stw	r2,12(r3)
 1022520:	10c00215 	stw	r3,8(r2)
 1022524:	b0c00217 	ldw	r3,8(r22)
 1022528:	b0800317 	ldw	r2,12(r22)
 102252c:	b4800204 	addi	r18,r22,8
 1022530:	18800315 	stw	r2,12(r3)
 1022534:	10c00215 	stw	r3,8(r2)
 1022538:	21801b36 	bltu	r4,r6,10225a8 <_realloc_r+0x2f8>
 102253c:	008004c4 	movi	r2,19
 1022540:	1180352e 	bgeu	r2,r6,1022618 <_realloc_r+0x368>
 1022544:	a8800017 	ldw	r2,0(r21)
 1022548:	b0800215 	stw	r2,8(r22)
 102254c:	a8800117 	ldw	r2,4(r21)
 1022550:	b0800315 	stw	r2,12(r22)
 1022554:	008006c4 	movi	r2,27
 1022558:	11807f36 	bltu	r2,r6,1022758 <_realloc_r+0x4a8>
 102255c:	b0800404 	addi	r2,r22,16
 1022560:	ad400204 	addi	r21,r21,8
 1022564:	00002d06 	br	102261c <_realloc_r+0x36c>
 1022568:	adbffe17 	ldw	r22,-8(r21)
 102256c:	00bfff04 	movi	r2,-4
 1022570:	9dadc83a 	sub	r22,r19,r22
 1022574:	b1000117 	ldw	r4,4(r22)
 1022578:	2084703a 	and	r2,r4,r2
 102257c:	b03f7726 	beq	r22,zero,102235c <__alt_data_end+0xfffe4e9c>
 1022580:	80af883a 	add	r23,r16,r2
 1022584:	b8ff7516 	blt	r23,r3,102235c <__alt_data_end+0xfffe4e9c>
 1022588:	b0800317 	ldw	r2,12(r22)
 102258c:	b0c00217 	ldw	r3,8(r22)
 1022590:	81bfff04 	addi	r6,r16,-4
 1022594:	01000904 	movi	r4,36
 1022598:	18800315 	stw	r2,12(r3)
 102259c:	10c00215 	stw	r3,8(r2)
 10225a0:	b4800204 	addi	r18,r22,8
 10225a4:	21bfe52e 	bgeu	r4,r6,102253c <__alt_data_end+0xfffe507c>
 10225a8:	a80b883a 	mov	r5,r21
 10225ac:	9009883a 	mov	r4,r18
 10225b0:	102202c0 	call	102202c <memmove>
 10225b4:	b821883a 	mov	r16,r23
 10225b8:	b027883a 	mov	r19,r22
 10225bc:	003f8a06 	br	10223e8 <__alt_data_end+0xfffe4f28>
 10225c0:	300b883a 	mov	r5,r6
 10225c4:	dfc00917 	ldw	ra,36(sp)
 10225c8:	df000817 	ldw	fp,32(sp)
 10225cc:	ddc00717 	ldw	r23,28(sp)
 10225d0:	dd800617 	ldw	r22,24(sp)
 10225d4:	dd400517 	ldw	r21,20(sp)
 10225d8:	dd000417 	ldw	r20,16(sp)
 10225dc:	dcc00317 	ldw	r19,12(sp)
 10225e0:	dc800217 	ldw	r18,8(sp)
 10225e4:	dc400117 	ldw	r17,4(sp)
 10225e8:	dc000017 	ldw	r16,0(sp)
 10225ec:	dec00a04 	addi	sp,sp,40
 10225f0:	10215f41 	jmpi	10215f4 <_malloc_r>
 10225f4:	a8c00017 	ldw	r3,0(r21)
 10225f8:	90c00015 	stw	r3,0(r18)
 10225fc:	a8c00117 	ldw	r3,4(r21)
 1022600:	90c00115 	stw	r3,4(r18)
 1022604:	00c006c4 	movi	r3,27
 1022608:	19804536 	bltu	r3,r6,1022720 <_realloc_r+0x470>
 102260c:	90800204 	addi	r2,r18,8
 1022610:	a8c00204 	addi	r3,r21,8
 1022614:	003f6306 	br	10223a4 <__alt_data_end+0xfffe4ee4>
 1022618:	9005883a 	mov	r2,r18
 102261c:	a8c00017 	ldw	r3,0(r21)
 1022620:	b821883a 	mov	r16,r23
 1022624:	b027883a 	mov	r19,r22
 1022628:	10c00015 	stw	r3,0(r2)
 102262c:	a8c00117 	ldw	r3,4(r21)
 1022630:	10c00115 	stw	r3,4(r2)
 1022634:	a8c00217 	ldw	r3,8(r21)
 1022638:	10c00215 	stw	r3,8(r2)
 102263c:	003f6a06 	br	10223e8 <__alt_data_end+0xfffe4f28>
 1022640:	9c67883a 	add	r19,r19,r17
 1022644:	4445c83a 	sub	r2,r8,r17
 1022648:	e4c00215 	stw	r19,8(fp)
 102264c:	10800054 	ori	r2,r2,1
 1022650:	98800115 	stw	r2,4(r19)
 1022654:	a8bfff17 	ldw	r2,-4(r21)
 1022658:	a009883a 	mov	r4,r20
 102265c:	1080004c 	andi	r2,r2,1
 1022660:	1462b03a 	or	r17,r2,r17
 1022664:	ac7fff15 	stw	r17,-4(r21)
 1022668:	1023e0c0 	call	1023e0c <__malloc_unlock>
 102266c:	a805883a 	mov	r2,r21
 1022670:	003f6b06 	br	1022420 <__alt_data_end+0xfffe4f60>
 1022674:	a80b883a 	mov	r5,r21
 1022678:	9009883a 	mov	r4,r18
 102267c:	102202c0 	call	102202c <memmove>
 1022680:	003f4e06 	br	10223bc <__alt_data_end+0xfffe4efc>
 1022684:	89000404 	addi	r4,r17,16
 1022688:	b93fbc16 	blt	r23,r4,102257c <__alt_data_end+0xfffe50bc>
 102268c:	b0800317 	ldw	r2,12(r22)
 1022690:	b0c00217 	ldw	r3,8(r22)
 1022694:	81bfff04 	addi	r6,r16,-4
 1022698:	01000904 	movi	r4,36
 102269c:	18800315 	stw	r2,12(r3)
 10226a0:	10c00215 	stw	r3,8(r2)
 10226a4:	b4800204 	addi	r18,r22,8
 10226a8:	21804336 	bltu	r4,r6,10227b8 <_realloc_r+0x508>
 10226ac:	008004c4 	movi	r2,19
 10226b0:	11803f2e 	bgeu	r2,r6,10227b0 <_realloc_r+0x500>
 10226b4:	a8800017 	ldw	r2,0(r21)
 10226b8:	b0800215 	stw	r2,8(r22)
 10226bc:	a8800117 	ldw	r2,4(r21)
 10226c0:	b0800315 	stw	r2,12(r22)
 10226c4:	008006c4 	movi	r2,27
 10226c8:	11803f36 	bltu	r2,r6,10227c8 <_realloc_r+0x518>
 10226cc:	b0800404 	addi	r2,r22,16
 10226d0:	ad400204 	addi	r21,r21,8
 10226d4:	a8c00017 	ldw	r3,0(r21)
 10226d8:	10c00015 	stw	r3,0(r2)
 10226dc:	a8c00117 	ldw	r3,4(r21)
 10226e0:	10c00115 	stw	r3,4(r2)
 10226e4:	a8c00217 	ldw	r3,8(r21)
 10226e8:	10c00215 	stw	r3,8(r2)
 10226ec:	b447883a 	add	r3,r22,r17
 10226f0:	bc45c83a 	sub	r2,r23,r17
 10226f4:	e0c00215 	stw	r3,8(fp)
 10226f8:	10800054 	ori	r2,r2,1
 10226fc:	18800115 	stw	r2,4(r3)
 1022700:	b0800117 	ldw	r2,4(r22)
 1022704:	a009883a 	mov	r4,r20
 1022708:	1080004c 	andi	r2,r2,1
 102270c:	1462b03a 	or	r17,r2,r17
 1022710:	b4400115 	stw	r17,4(r22)
 1022714:	1023e0c0 	call	1023e0c <__malloc_unlock>
 1022718:	9005883a 	mov	r2,r18
 102271c:	003f4006 	br	1022420 <__alt_data_end+0xfffe4f60>
 1022720:	a8c00217 	ldw	r3,8(r21)
 1022724:	90c00215 	stw	r3,8(r18)
 1022728:	a8c00317 	ldw	r3,12(r21)
 102272c:	90c00315 	stw	r3,12(r18)
 1022730:	30801126 	beq	r6,r2,1022778 <_realloc_r+0x4c8>
 1022734:	90800404 	addi	r2,r18,16
 1022738:	a8c00404 	addi	r3,r21,16
 102273c:	003f1906 	br	10223a4 <__alt_data_end+0xfffe4ee4>
 1022740:	90ffff17 	ldw	r3,-4(r18)
 1022744:	00bfff04 	movi	r2,-4
 1022748:	a825883a 	mov	r18,r21
 102274c:	1884703a 	and	r2,r3,r2
 1022750:	80a1883a 	add	r16,r16,r2
 1022754:	003f2406 	br	10223e8 <__alt_data_end+0xfffe4f28>
 1022758:	a8800217 	ldw	r2,8(r21)
 102275c:	b0800415 	stw	r2,16(r22)
 1022760:	a8800317 	ldw	r2,12(r21)
 1022764:	b0800515 	stw	r2,20(r22)
 1022768:	31000a26 	beq	r6,r4,1022794 <_realloc_r+0x4e4>
 102276c:	b0800604 	addi	r2,r22,24
 1022770:	ad400404 	addi	r21,r21,16
 1022774:	003fa906 	br	102261c <__alt_data_end+0xfffe515c>
 1022778:	a9000417 	ldw	r4,16(r21)
 102277c:	90800604 	addi	r2,r18,24
 1022780:	a8c00604 	addi	r3,r21,24
 1022784:	91000415 	stw	r4,16(r18)
 1022788:	a9000517 	ldw	r4,20(r21)
 102278c:	91000515 	stw	r4,20(r18)
 1022790:	003f0406 	br	10223a4 <__alt_data_end+0xfffe4ee4>
 1022794:	a8c00417 	ldw	r3,16(r21)
 1022798:	ad400604 	addi	r21,r21,24
 102279c:	b0800804 	addi	r2,r22,32
 10227a0:	b0c00615 	stw	r3,24(r22)
 10227a4:	a8ffff17 	ldw	r3,-4(r21)
 10227a8:	b0c00715 	stw	r3,28(r22)
 10227ac:	003f9b06 	br	102261c <__alt_data_end+0xfffe515c>
 10227b0:	9005883a 	mov	r2,r18
 10227b4:	003fc706 	br	10226d4 <__alt_data_end+0xfffe5214>
 10227b8:	a80b883a 	mov	r5,r21
 10227bc:	9009883a 	mov	r4,r18
 10227c0:	102202c0 	call	102202c <memmove>
 10227c4:	003fc906 	br	10226ec <__alt_data_end+0xfffe522c>
 10227c8:	a8800217 	ldw	r2,8(r21)
 10227cc:	b0800415 	stw	r2,16(r22)
 10227d0:	a8800317 	ldw	r2,12(r21)
 10227d4:	b0800515 	stw	r2,20(r22)
 10227d8:	31000726 	beq	r6,r4,10227f8 <_realloc_r+0x548>
 10227dc:	b0800604 	addi	r2,r22,24
 10227e0:	ad400404 	addi	r21,r21,16
 10227e4:	003fbb06 	br	10226d4 <__alt_data_end+0xfffe5214>
 10227e8:	a009883a 	mov	r4,r20
 10227ec:	1023e0c0 	call	1023e0c <__malloc_unlock>
 10227f0:	0005883a 	mov	r2,zero
 10227f4:	003f0a06 	br	1022420 <__alt_data_end+0xfffe4f60>
 10227f8:	a8c00417 	ldw	r3,16(r21)
 10227fc:	ad400604 	addi	r21,r21,24
 1022800:	b0800804 	addi	r2,r22,32
 1022804:	b0c00615 	stw	r3,24(r22)
 1022808:	a8ffff17 	ldw	r3,-4(r21)
 102280c:	b0c00715 	stw	r3,28(r22)
 1022810:	003fb006 	br	10226d4 <__alt_data_end+0xfffe5214>

01022814 <_sbrk_r>:
 1022814:	defffd04 	addi	sp,sp,-12
 1022818:	dc000015 	stw	r16,0(sp)
 102281c:	040040f4 	movhi	r16,259
 1022820:	dc400115 	stw	r17,4(sp)
 1022824:	8425bf04 	addi	r16,r16,-26884
 1022828:	2023883a 	mov	r17,r4
 102282c:	2809883a 	mov	r4,r5
 1022830:	dfc00215 	stw	ra,8(sp)
 1022834:	80000015 	stw	zero,0(r16)
 1022838:	1023fcc0 	call	1023fcc <sbrk>
 102283c:	00ffffc4 	movi	r3,-1
 1022840:	10c00526 	beq	r2,r3,1022858 <_sbrk_r+0x44>
 1022844:	dfc00217 	ldw	ra,8(sp)
 1022848:	dc400117 	ldw	r17,4(sp)
 102284c:	dc000017 	ldw	r16,0(sp)
 1022850:	dec00304 	addi	sp,sp,12
 1022854:	f800283a 	ret
 1022858:	80c00017 	ldw	r3,0(r16)
 102285c:	183ff926 	beq	r3,zero,1022844 <__alt_data_end+0xfffe5384>
 1022860:	88c00015 	stw	r3,0(r17)
 1022864:	003ff706 	br	1022844 <__alt_data_end+0xfffe5384>

01022868 <__sread>:
 1022868:	defffe04 	addi	sp,sp,-8
 102286c:	dc000015 	stw	r16,0(sp)
 1022870:	2821883a 	mov	r16,r5
 1022874:	2940038f 	ldh	r5,14(r5)
 1022878:	dfc00115 	stw	ra,4(sp)
 102287c:	10235a80 	call	10235a8 <_read_r>
 1022880:	10000716 	blt	r2,zero,10228a0 <__sread+0x38>
 1022884:	80c01417 	ldw	r3,80(r16)
 1022888:	1887883a 	add	r3,r3,r2
 102288c:	80c01415 	stw	r3,80(r16)
 1022890:	dfc00117 	ldw	ra,4(sp)
 1022894:	dc000017 	ldw	r16,0(sp)
 1022898:	dec00204 	addi	sp,sp,8
 102289c:	f800283a 	ret
 10228a0:	80c0030b 	ldhu	r3,12(r16)
 10228a4:	18fbffcc 	andi	r3,r3,61439
 10228a8:	80c0030d 	sth	r3,12(r16)
 10228ac:	dfc00117 	ldw	ra,4(sp)
 10228b0:	dc000017 	ldw	r16,0(sp)
 10228b4:	dec00204 	addi	sp,sp,8
 10228b8:	f800283a 	ret

010228bc <__seofread>:
 10228bc:	0005883a 	mov	r2,zero
 10228c0:	f800283a 	ret

010228c4 <__swrite>:
 10228c4:	2880030b 	ldhu	r2,12(r5)
 10228c8:	defffb04 	addi	sp,sp,-20
 10228cc:	dcc00315 	stw	r19,12(sp)
 10228d0:	dc800215 	stw	r18,8(sp)
 10228d4:	dc400115 	stw	r17,4(sp)
 10228d8:	dc000015 	stw	r16,0(sp)
 10228dc:	dfc00415 	stw	ra,16(sp)
 10228e0:	10c0400c 	andi	r3,r2,256
 10228e4:	2821883a 	mov	r16,r5
 10228e8:	2023883a 	mov	r17,r4
 10228ec:	3025883a 	mov	r18,r6
 10228f0:	3827883a 	mov	r19,r7
 10228f4:	18000526 	beq	r3,zero,102290c <__swrite+0x48>
 10228f8:	2940038f 	ldh	r5,14(r5)
 10228fc:	01c00084 	movi	r7,2
 1022900:	000d883a 	mov	r6,zero
 1022904:	102338c0 	call	102338c <_lseek_r>
 1022908:	8080030b 	ldhu	r2,12(r16)
 102290c:	8140038f 	ldh	r5,14(r16)
 1022910:	10bbffcc 	andi	r2,r2,61439
 1022914:	980f883a 	mov	r7,r19
 1022918:	900d883a 	mov	r6,r18
 102291c:	8809883a 	mov	r4,r17
 1022920:	8080030d 	sth	r2,12(r16)
 1022924:	dfc00417 	ldw	ra,16(sp)
 1022928:	dcc00317 	ldw	r19,12(sp)
 102292c:	dc800217 	ldw	r18,8(sp)
 1022930:	dc400117 	ldw	r17,4(sp)
 1022934:	dc000017 	ldw	r16,0(sp)
 1022938:	dec00504 	addi	sp,sp,20
 102293c:	10229a41 	jmpi	10229a4 <_write_r>

01022940 <__sseek>:
 1022940:	defffe04 	addi	sp,sp,-8
 1022944:	dc000015 	stw	r16,0(sp)
 1022948:	2821883a 	mov	r16,r5
 102294c:	2940038f 	ldh	r5,14(r5)
 1022950:	dfc00115 	stw	ra,4(sp)
 1022954:	102338c0 	call	102338c <_lseek_r>
 1022958:	00ffffc4 	movi	r3,-1
 102295c:	10c00826 	beq	r2,r3,1022980 <__sseek+0x40>
 1022960:	80c0030b 	ldhu	r3,12(r16)
 1022964:	80801415 	stw	r2,80(r16)
 1022968:	18c40014 	ori	r3,r3,4096
 102296c:	80c0030d 	sth	r3,12(r16)
 1022970:	dfc00117 	ldw	ra,4(sp)
 1022974:	dc000017 	ldw	r16,0(sp)
 1022978:	dec00204 	addi	sp,sp,8
 102297c:	f800283a 	ret
 1022980:	80c0030b 	ldhu	r3,12(r16)
 1022984:	18fbffcc 	andi	r3,r3,61439
 1022988:	80c0030d 	sth	r3,12(r16)
 102298c:	dfc00117 	ldw	ra,4(sp)
 1022990:	dc000017 	ldw	r16,0(sp)
 1022994:	dec00204 	addi	sp,sp,8
 1022998:	f800283a 	ret

0102299c <__sclose>:
 102299c:	2940038f 	ldh	r5,14(r5)
 10229a0:	1022b581 	jmpi	1022b58 <_close_r>

010229a4 <_write_r>:
 10229a4:	defffd04 	addi	sp,sp,-12
 10229a8:	2805883a 	mov	r2,r5
 10229ac:	dc000015 	stw	r16,0(sp)
 10229b0:	040040f4 	movhi	r16,259
 10229b4:	dc400115 	stw	r17,4(sp)
 10229b8:	300b883a 	mov	r5,r6
 10229bc:	8425bf04 	addi	r16,r16,-26884
 10229c0:	2023883a 	mov	r17,r4
 10229c4:	380d883a 	mov	r6,r7
 10229c8:	1009883a 	mov	r4,r2
 10229cc:	dfc00215 	stw	ra,8(sp)
 10229d0:	80000015 	stw	zero,0(r16)
 10229d4:	10240e80 	call	10240e8 <write>
 10229d8:	00ffffc4 	movi	r3,-1
 10229dc:	10c00526 	beq	r2,r3,10229f4 <_write_r+0x50>
 10229e0:	dfc00217 	ldw	ra,8(sp)
 10229e4:	dc400117 	ldw	r17,4(sp)
 10229e8:	dc000017 	ldw	r16,0(sp)
 10229ec:	dec00304 	addi	sp,sp,12
 10229f0:	f800283a 	ret
 10229f4:	80c00017 	ldw	r3,0(r16)
 10229f8:	183ff926 	beq	r3,zero,10229e0 <__alt_data_end+0xfffe5520>
 10229fc:	88c00015 	stw	r3,0(r17)
 1022a00:	003ff706 	br	10229e0 <__alt_data_end+0xfffe5520>

01022a04 <__swsetup_r>:
 1022a04:	008040b4 	movhi	r2,258
 1022a08:	defffd04 	addi	sp,sp,-12
 1022a0c:	109f1404 	addi	r2,r2,31824
 1022a10:	dc400115 	stw	r17,4(sp)
 1022a14:	2023883a 	mov	r17,r4
 1022a18:	11000017 	ldw	r4,0(r2)
 1022a1c:	dc000015 	stw	r16,0(sp)
 1022a20:	dfc00215 	stw	ra,8(sp)
 1022a24:	2821883a 	mov	r16,r5
 1022a28:	20000226 	beq	r4,zero,1022a34 <__swsetup_r+0x30>
 1022a2c:	20800e17 	ldw	r2,56(r4)
 1022a30:	10003126 	beq	r2,zero,1022af8 <__swsetup_r+0xf4>
 1022a34:	8080030b 	ldhu	r2,12(r16)
 1022a38:	10c0020c 	andi	r3,r2,8
 1022a3c:	1009883a 	mov	r4,r2
 1022a40:	18000f26 	beq	r3,zero,1022a80 <__swsetup_r+0x7c>
 1022a44:	80c00417 	ldw	r3,16(r16)
 1022a48:	18001526 	beq	r3,zero,1022aa0 <__swsetup_r+0x9c>
 1022a4c:	1100004c 	andi	r4,r2,1
 1022a50:	20001c1e 	bne	r4,zero,1022ac4 <__swsetup_r+0xc0>
 1022a54:	1080008c 	andi	r2,r2,2
 1022a58:	1000291e 	bne	r2,zero,1022b00 <__swsetup_r+0xfc>
 1022a5c:	80800517 	ldw	r2,20(r16)
 1022a60:	80800215 	stw	r2,8(r16)
 1022a64:	18001c26 	beq	r3,zero,1022ad8 <__swsetup_r+0xd4>
 1022a68:	0005883a 	mov	r2,zero
 1022a6c:	dfc00217 	ldw	ra,8(sp)
 1022a70:	dc400117 	ldw	r17,4(sp)
 1022a74:	dc000017 	ldw	r16,0(sp)
 1022a78:	dec00304 	addi	sp,sp,12
 1022a7c:	f800283a 	ret
 1022a80:	2080040c 	andi	r2,r4,16
 1022a84:	10002e26 	beq	r2,zero,1022b40 <__swsetup_r+0x13c>
 1022a88:	2080010c 	andi	r2,r4,4
 1022a8c:	10001e1e 	bne	r2,zero,1022b08 <__swsetup_r+0x104>
 1022a90:	80c00417 	ldw	r3,16(r16)
 1022a94:	20800214 	ori	r2,r4,8
 1022a98:	8080030d 	sth	r2,12(r16)
 1022a9c:	183feb1e 	bne	r3,zero,1022a4c <__alt_data_end+0xfffe558c>
 1022aa0:	1100a00c 	andi	r4,r2,640
 1022aa4:	01408004 	movi	r5,512
 1022aa8:	217fe826 	beq	r4,r5,1022a4c <__alt_data_end+0xfffe558c>
 1022aac:	800b883a 	mov	r5,r16
 1022ab0:	8809883a 	mov	r4,r17
 1022ab4:	10233ec0 	call	10233ec <__smakebuf_r>
 1022ab8:	8080030b 	ldhu	r2,12(r16)
 1022abc:	80c00417 	ldw	r3,16(r16)
 1022ac0:	003fe206 	br	1022a4c <__alt_data_end+0xfffe558c>
 1022ac4:	80800517 	ldw	r2,20(r16)
 1022ac8:	80000215 	stw	zero,8(r16)
 1022acc:	0085c83a 	sub	r2,zero,r2
 1022ad0:	80800615 	stw	r2,24(r16)
 1022ad4:	183fe41e 	bne	r3,zero,1022a68 <__alt_data_end+0xfffe55a8>
 1022ad8:	80c0030b 	ldhu	r3,12(r16)
 1022adc:	0005883a 	mov	r2,zero
 1022ae0:	1900200c 	andi	r4,r3,128
 1022ae4:	203fe126 	beq	r4,zero,1022a6c <__alt_data_end+0xfffe55ac>
 1022ae8:	18c01014 	ori	r3,r3,64
 1022aec:	80c0030d 	sth	r3,12(r16)
 1022af0:	00bfffc4 	movi	r2,-1
 1022af4:	003fdd06 	br	1022a6c <__alt_data_end+0xfffe55ac>
 1022af8:	1020f600 	call	1020f60 <__sinit>
 1022afc:	003fcd06 	br	1022a34 <__alt_data_end+0xfffe5574>
 1022b00:	0005883a 	mov	r2,zero
 1022b04:	003fd606 	br	1022a60 <__alt_data_end+0xfffe55a0>
 1022b08:	81400c17 	ldw	r5,48(r16)
 1022b0c:	28000626 	beq	r5,zero,1022b28 <__swsetup_r+0x124>
 1022b10:	80801004 	addi	r2,r16,64
 1022b14:	28800326 	beq	r5,r2,1022b24 <__swsetup_r+0x120>
 1022b18:	8809883a 	mov	r4,r17
 1022b1c:	102307c0 	call	102307c <_free_r>
 1022b20:	8100030b 	ldhu	r4,12(r16)
 1022b24:	80000c15 	stw	zero,48(r16)
 1022b28:	80c00417 	ldw	r3,16(r16)
 1022b2c:	00bff6c4 	movi	r2,-37
 1022b30:	1108703a 	and	r4,r2,r4
 1022b34:	80000115 	stw	zero,4(r16)
 1022b38:	80c00015 	stw	r3,0(r16)
 1022b3c:	003fd506 	br	1022a94 <__alt_data_end+0xfffe55d4>
 1022b40:	00800244 	movi	r2,9
 1022b44:	88800015 	stw	r2,0(r17)
 1022b48:	20801014 	ori	r2,r4,64
 1022b4c:	8080030d 	sth	r2,12(r16)
 1022b50:	00bfffc4 	movi	r2,-1
 1022b54:	003fc506 	br	1022a6c <__alt_data_end+0xfffe55ac>

01022b58 <_close_r>:
 1022b58:	defffd04 	addi	sp,sp,-12
 1022b5c:	dc000015 	stw	r16,0(sp)
 1022b60:	040040f4 	movhi	r16,259
 1022b64:	dc400115 	stw	r17,4(sp)
 1022b68:	8425bf04 	addi	r16,r16,-26884
 1022b6c:	2023883a 	mov	r17,r4
 1022b70:	2809883a 	mov	r4,r5
 1022b74:	dfc00215 	stw	ra,8(sp)
 1022b78:	80000015 	stw	zero,0(r16)
 1022b7c:	10238a80 	call	10238a8 <close>
 1022b80:	00ffffc4 	movi	r3,-1
 1022b84:	10c00526 	beq	r2,r3,1022b9c <_close_r+0x44>
 1022b88:	dfc00217 	ldw	ra,8(sp)
 1022b8c:	dc400117 	ldw	r17,4(sp)
 1022b90:	dc000017 	ldw	r16,0(sp)
 1022b94:	dec00304 	addi	sp,sp,12
 1022b98:	f800283a 	ret
 1022b9c:	80c00017 	ldw	r3,0(r16)
 1022ba0:	183ff926 	beq	r3,zero,1022b88 <__alt_data_end+0xfffe56c8>
 1022ba4:	88c00015 	stw	r3,0(r17)
 1022ba8:	003ff706 	br	1022b88 <__alt_data_end+0xfffe56c8>

01022bac <_fclose_r>:
 1022bac:	28003926 	beq	r5,zero,1022c94 <_fclose_r+0xe8>
 1022bb0:	defffc04 	addi	sp,sp,-16
 1022bb4:	dc400115 	stw	r17,4(sp)
 1022bb8:	dc000015 	stw	r16,0(sp)
 1022bbc:	dfc00315 	stw	ra,12(sp)
 1022bc0:	dc800215 	stw	r18,8(sp)
 1022bc4:	2023883a 	mov	r17,r4
 1022bc8:	2821883a 	mov	r16,r5
 1022bcc:	20000226 	beq	r4,zero,1022bd8 <_fclose_r+0x2c>
 1022bd0:	20800e17 	ldw	r2,56(r4)
 1022bd4:	10002726 	beq	r2,zero,1022c74 <_fclose_r+0xc8>
 1022bd8:	8080030f 	ldh	r2,12(r16)
 1022bdc:	1000071e 	bne	r2,zero,1022bfc <_fclose_r+0x50>
 1022be0:	0005883a 	mov	r2,zero
 1022be4:	dfc00317 	ldw	ra,12(sp)
 1022be8:	dc800217 	ldw	r18,8(sp)
 1022bec:	dc400117 	ldw	r17,4(sp)
 1022bf0:	dc000017 	ldw	r16,0(sp)
 1022bf4:	dec00404 	addi	sp,sp,16
 1022bf8:	f800283a 	ret
 1022bfc:	800b883a 	mov	r5,r16
 1022c00:	8809883a 	mov	r4,r17
 1022c04:	1022cb00 	call	1022cb0 <__sflush_r>
 1022c08:	1025883a 	mov	r18,r2
 1022c0c:	80800b17 	ldw	r2,44(r16)
 1022c10:	10000426 	beq	r2,zero,1022c24 <_fclose_r+0x78>
 1022c14:	81400717 	ldw	r5,28(r16)
 1022c18:	8809883a 	mov	r4,r17
 1022c1c:	103ee83a 	callr	r2
 1022c20:	10001616 	blt	r2,zero,1022c7c <_fclose_r+0xd0>
 1022c24:	8080030b 	ldhu	r2,12(r16)
 1022c28:	1080200c 	andi	r2,r2,128
 1022c2c:	1000151e 	bne	r2,zero,1022c84 <_fclose_r+0xd8>
 1022c30:	81400c17 	ldw	r5,48(r16)
 1022c34:	28000526 	beq	r5,zero,1022c4c <_fclose_r+0xa0>
 1022c38:	80801004 	addi	r2,r16,64
 1022c3c:	28800226 	beq	r5,r2,1022c48 <_fclose_r+0x9c>
 1022c40:	8809883a 	mov	r4,r17
 1022c44:	102307c0 	call	102307c <_free_r>
 1022c48:	80000c15 	stw	zero,48(r16)
 1022c4c:	81401117 	ldw	r5,68(r16)
 1022c50:	28000326 	beq	r5,zero,1022c60 <_fclose_r+0xb4>
 1022c54:	8809883a 	mov	r4,r17
 1022c58:	102307c0 	call	102307c <_free_r>
 1022c5c:	80001115 	stw	zero,68(r16)
 1022c60:	1020f700 	call	1020f70 <__sfp_lock_acquire>
 1022c64:	8000030d 	sth	zero,12(r16)
 1022c68:	1020f740 	call	1020f74 <__sfp_lock_release>
 1022c6c:	9005883a 	mov	r2,r18
 1022c70:	003fdc06 	br	1022be4 <__alt_data_end+0xfffe5724>
 1022c74:	1020f600 	call	1020f60 <__sinit>
 1022c78:	003fd706 	br	1022bd8 <__alt_data_end+0xfffe5718>
 1022c7c:	04bfffc4 	movi	r18,-1
 1022c80:	003fe806 	br	1022c24 <__alt_data_end+0xfffe5764>
 1022c84:	81400417 	ldw	r5,16(r16)
 1022c88:	8809883a 	mov	r4,r17
 1022c8c:	102307c0 	call	102307c <_free_r>
 1022c90:	003fe706 	br	1022c30 <__alt_data_end+0xfffe5770>
 1022c94:	0005883a 	mov	r2,zero
 1022c98:	f800283a 	ret

01022c9c <fclose>:
 1022c9c:	008040b4 	movhi	r2,258
 1022ca0:	109f1404 	addi	r2,r2,31824
 1022ca4:	200b883a 	mov	r5,r4
 1022ca8:	11000017 	ldw	r4,0(r2)
 1022cac:	1022bac1 	jmpi	1022bac <_fclose_r>

01022cb0 <__sflush_r>:
 1022cb0:	2880030b 	ldhu	r2,12(r5)
 1022cb4:	defffb04 	addi	sp,sp,-20
 1022cb8:	dcc00315 	stw	r19,12(sp)
 1022cbc:	dc400115 	stw	r17,4(sp)
 1022cc0:	dfc00415 	stw	ra,16(sp)
 1022cc4:	dc800215 	stw	r18,8(sp)
 1022cc8:	dc000015 	stw	r16,0(sp)
 1022ccc:	10c0020c 	andi	r3,r2,8
 1022cd0:	2823883a 	mov	r17,r5
 1022cd4:	2027883a 	mov	r19,r4
 1022cd8:	1800311e 	bne	r3,zero,1022da0 <__sflush_r+0xf0>
 1022cdc:	28c00117 	ldw	r3,4(r5)
 1022ce0:	10820014 	ori	r2,r2,2048
 1022ce4:	2880030d 	sth	r2,12(r5)
 1022ce8:	00c04b0e 	bge	zero,r3,1022e18 <__sflush_r+0x168>
 1022cec:	8a000a17 	ldw	r8,40(r17)
 1022cf0:	40002326 	beq	r8,zero,1022d80 <__sflush_r+0xd0>
 1022cf4:	9c000017 	ldw	r16,0(r19)
 1022cf8:	10c4000c 	andi	r3,r2,4096
 1022cfc:	98000015 	stw	zero,0(r19)
 1022d00:	18004826 	beq	r3,zero,1022e24 <__sflush_r+0x174>
 1022d04:	89801417 	ldw	r6,80(r17)
 1022d08:	10c0010c 	andi	r3,r2,4
 1022d0c:	18000626 	beq	r3,zero,1022d28 <__sflush_r+0x78>
 1022d10:	88c00117 	ldw	r3,4(r17)
 1022d14:	88800c17 	ldw	r2,48(r17)
 1022d18:	30cdc83a 	sub	r6,r6,r3
 1022d1c:	10000226 	beq	r2,zero,1022d28 <__sflush_r+0x78>
 1022d20:	88800f17 	ldw	r2,60(r17)
 1022d24:	308dc83a 	sub	r6,r6,r2
 1022d28:	89400717 	ldw	r5,28(r17)
 1022d2c:	000f883a 	mov	r7,zero
 1022d30:	9809883a 	mov	r4,r19
 1022d34:	403ee83a 	callr	r8
 1022d38:	00ffffc4 	movi	r3,-1
 1022d3c:	10c04426 	beq	r2,r3,1022e50 <__sflush_r+0x1a0>
 1022d40:	88c0030b 	ldhu	r3,12(r17)
 1022d44:	89000417 	ldw	r4,16(r17)
 1022d48:	88000115 	stw	zero,4(r17)
 1022d4c:	197dffcc 	andi	r5,r3,63487
 1022d50:	8940030d 	sth	r5,12(r17)
 1022d54:	89000015 	stw	r4,0(r17)
 1022d58:	18c4000c 	andi	r3,r3,4096
 1022d5c:	18002c1e 	bne	r3,zero,1022e10 <__sflush_r+0x160>
 1022d60:	89400c17 	ldw	r5,48(r17)
 1022d64:	9c000015 	stw	r16,0(r19)
 1022d68:	28000526 	beq	r5,zero,1022d80 <__sflush_r+0xd0>
 1022d6c:	88801004 	addi	r2,r17,64
 1022d70:	28800226 	beq	r5,r2,1022d7c <__sflush_r+0xcc>
 1022d74:	9809883a 	mov	r4,r19
 1022d78:	102307c0 	call	102307c <_free_r>
 1022d7c:	88000c15 	stw	zero,48(r17)
 1022d80:	0005883a 	mov	r2,zero
 1022d84:	dfc00417 	ldw	ra,16(sp)
 1022d88:	dcc00317 	ldw	r19,12(sp)
 1022d8c:	dc800217 	ldw	r18,8(sp)
 1022d90:	dc400117 	ldw	r17,4(sp)
 1022d94:	dc000017 	ldw	r16,0(sp)
 1022d98:	dec00504 	addi	sp,sp,20
 1022d9c:	f800283a 	ret
 1022da0:	2c800417 	ldw	r18,16(r5)
 1022da4:	903ff626 	beq	r18,zero,1022d80 <__alt_data_end+0xfffe58c0>
 1022da8:	2c000017 	ldw	r16,0(r5)
 1022dac:	108000cc 	andi	r2,r2,3
 1022db0:	2c800015 	stw	r18,0(r5)
 1022db4:	84a1c83a 	sub	r16,r16,r18
 1022db8:	1000131e 	bne	r2,zero,1022e08 <__sflush_r+0x158>
 1022dbc:	28800517 	ldw	r2,20(r5)
 1022dc0:	88800215 	stw	r2,8(r17)
 1022dc4:	04000316 	blt	zero,r16,1022dd4 <__sflush_r+0x124>
 1022dc8:	003fed06 	br	1022d80 <__alt_data_end+0xfffe58c0>
 1022dcc:	90a5883a 	add	r18,r18,r2
 1022dd0:	043feb0e 	bge	zero,r16,1022d80 <__alt_data_end+0xfffe58c0>
 1022dd4:	88800917 	ldw	r2,36(r17)
 1022dd8:	89400717 	ldw	r5,28(r17)
 1022ddc:	800f883a 	mov	r7,r16
 1022de0:	900d883a 	mov	r6,r18
 1022de4:	9809883a 	mov	r4,r19
 1022de8:	103ee83a 	callr	r2
 1022dec:	80a1c83a 	sub	r16,r16,r2
 1022df0:	00bff616 	blt	zero,r2,1022dcc <__alt_data_end+0xfffe590c>
 1022df4:	88c0030b 	ldhu	r3,12(r17)
 1022df8:	00bfffc4 	movi	r2,-1
 1022dfc:	18c01014 	ori	r3,r3,64
 1022e00:	88c0030d 	sth	r3,12(r17)
 1022e04:	003fdf06 	br	1022d84 <__alt_data_end+0xfffe58c4>
 1022e08:	0005883a 	mov	r2,zero
 1022e0c:	003fec06 	br	1022dc0 <__alt_data_end+0xfffe5900>
 1022e10:	88801415 	stw	r2,80(r17)
 1022e14:	003fd206 	br	1022d60 <__alt_data_end+0xfffe58a0>
 1022e18:	28c00f17 	ldw	r3,60(r5)
 1022e1c:	00ffb316 	blt	zero,r3,1022cec <__alt_data_end+0xfffe582c>
 1022e20:	003fd706 	br	1022d80 <__alt_data_end+0xfffe58c0>
 1022e24:	89400717 	ldw	r5,28(r17)
 1022e28:	000d883a 	mov	r6,zero
 1022e2c:	01c00044 	movi	r7,1
 1022e30:	9809883a 	mov	r4,r19
 1022e34:	403ee83a 	callr	r8
 1022e38:	100d883a 	mov	r6,r2
 1022e3c:	00bfffc4 	movi	r2,-1
 1022e40:	30801426 	beq	r6,r2,1022e94 <__sflush_r+0x1e4>
 1022e44:	8880030b 	ldhu	r2,12(r17)
 1022e48:	8a000a17 	ldw	r8,40(r17)
 1022e4c:	003fae06 	br	1022d08 <__alt_data_end+0xfffe5848>
 1022e50:	98c00017 	ldw	r3,0(r19)
 1022e54:	183fba26 	beq	r3,zero,1022d40 <__alt_data_end+0xfffe5880>
 1022e58:	01000744 	movi	r4,29
 1022e5c:	19000626 	beq	r3,r4,1022e78 <__sflush_r+0x1c8>
 1022e60:	01000584 	movi	r4,22
 1022e64:	19000426 	beq	r3,r4,1022e78 <__sflush_r+0x1c8>
 1022e68:	88c0030b 	ldhu	r3,12(r17)
 1022e6c:	18c01014 	ori	r3,r3,64
 1022e70:	88c0030d 	sth	r3,12(r17)
 1022e74:	003fc306 	br	1022d84 <__alt_data_end+0xfffe58c4>
 1022e78:	8880030b 	ldhu	r2,12(r17)
 1022e7c:	88c00417 	ldw	r3,16(r17)
 1022e80:	88000115 	stw	zero,4(r17)
 1022e84:	10bdffcc 	andi	r2,r2,63487
 1022e88:	8880030d 	sth	r2,12(r17)
 1022e8c:	88c00015 	stw	r3,0(r17)
 1022e90:	003fb306 	br	1022d60 <__alt_data_end+0xfffe58a0>
 1022e94:	98800017 	ldw	r2,0(r19)
 1022e98:	103fea26 	beq	r2,zero,1022e44 <__alt_data_end+0xfffe5984>
 1022e9c:	00c00744 	movi	r3,29
 1022ea0:	10c00226 	beq	r2,r3,1022eac <__sflush_r+0x1fc>
 1022ea4:	00c00584 	movi	r3,22
 1022ea8:	10c0031e 	bne	r2,r3,1022eb8 <__sflush_r+0x208>
 1022eac:	9c000015 	stw	r16,0(r19)
 1022eb0:	0005883a 	mov	r2,zero
 1022eb4:	003fb306 	br	1022d84 <__alt_data_end+0xfffe58c4>
 1022eb8:	88c0030b 	ldhu	r3,12(r17)
 1022ebc:	3005883a 	mov	r2,r6
 1022ec0:	18c01014 	ori	r3,r3,64
 1022ec4:	88c0030d 	sth	r3,12(r17)
 1022ec8:	003fae06 	br	1022d84 <__alt_data_end+0xfffe58c4>

01022ecc <_fflush_r>:
 1022ecc:	defffd04 	addi	sp,sp,-12
 1022ed0:	dc000115 	stw	r16,4(sp)
 1022ed4:	dfc00215 	stw	ra,8(sp)
 1022ed8:	2021883a 	mov	r16,r4
 1022edc:	20000226 	beq	r4,zero,1022ee8 <_fflush_r+0x1c>
 1022ee0:	20800e17 	ldw	r2,56(r4)
 1022ee4:	10000c26 	beq	r2,zero,1022f18 <_fflush_r+0x4c>
 1022ee8:	2880030f 	ldh	r2,12(r5)
 1022eec:	1000051e 	bne	r2,zero,1022f04 <_fflush_r+0x38>
 1022ef0:	0005883a 	mov	r2,zero
 1022ef4:	dfc00217 	ldw	ra,8(sp)
 1022ef8:	dc000117 	ldw	r16,4(sp)
 1022efc:	dec00304 	addi	sp,sp,12
 1022f00:	f800283a 	ret
 1022f04:	8009883a 	mov	r4,r16
 1022f08:	dfc00217 	ldw	ra,8(sp)
 1022f0c:	dc000117 	ldw	r16,4(sp)
 1022f10:	dec00304 	addi	sp,sp,12
 1022f14:	1022cb01 	jmpi	1022cb0 <__sflush_r>
 1022f18:	d9400015 	stw	r5,0(sp)
 1022f1c:	1020f600 	call	1020f60 <__sinit>
 1022f20:	d9400017 	ldw	r5,0(sp)
 1022f24:	003ff006 	br	1022ee8 <__alt_data_end+0xfffe5a28>

01022f28 <fflush>:
 1022f28:	20000526 	beq	r4,zero,1022f40 <fflush+0x18>
 1022f2c:	008040b4 	movhi	r2,258
 1022f30:	109f1404 	addi	r2,r2,31824
 1022f34:	200b883a 	mov	r5,r4
 1022f38:	11000017 	ldw	r4,0(r2)
 1022f3c:	1022ecc1 	jmpi	1022ecc <_fflush_r>
 1022f40:	008040b4 	movhi	r2,258
 1022f44:	109f1304 	addi	r2,r2,31820
 1022f48:	11000017 	ldw	r4,0(r2)
 1022f4c:	014040b4 	movhi	r5,258
 1022f50:	294bb304 	addi	r5,r5,11980
 1022f54:	10215301 	jmpi	1021530 <_fwalk_reent>

01022f58 <_malloc_trim_r>:
 1022f58:	defffb04 	addi	sp,sp,-20
 1022f5c:	dcc00315 	stw	r19,12(sp)
 1022f60:	04c040b4 	movhi	r19,258
 1022f64:	dc800215 	stw	r18,8(sp)
 1022f68:	dc400115 	stw	r17,4(sp)
 1022f6c:	dc000015 	stw	r16,0(sp)
 1022f70:	dfc00415 	stw	ra,16(sp)
 1022f74:	2821883a 	mov	r16,r5
 1022f78:	9cd98f04 	addi	r19,r19,26172
 1022f7c:	2025883a 	mov	r18,r4
 1022f80:	1023de80 	call	1023de8 <__malloc_lock>
 1022f84:	98800217 	ldw	r2,8(r19)
 1022f88:	14400117 	ldw	r17,4(r2)
 1022f8c:	00bfff04 	movi	r2,-4
 1022f90:	88a2703a 	and	r17,r17,r2
 1022f94:	8c21c83a 	sub	r16,r17,r16
 1022f98:	8403fbc4 	addi	r16,r16,4079
 1022f9c:	8020d33a 	srli	r16,r16,12
 1022fa0:	0083ffc4 	movi	r2,4095
 1022fa4:	843fffc4 	addi	r16,r16,-1
 1022fa8:	8020933a 	slli	r16,r16,12
 1022fac:	1400060e 	bge	r2,r16,1022fc8 <_malloc_trim_r+0x70>
 1022fb0:	000b883a 	mov	r5,zero
 1022fb4:	9009883a 	mov	r4,r18
 1022fb8:	10228140 	call	1022814 <_sbrk_r>
 1022fbc:	98c00217 	ldw	r3,8(r19)
 1022fc0:	1c47883a 	add	r3,r3,r17
 1022fc4:	10c00a26 	beq	r2,r3,1022ff0 <_malloc_trim_r+0x98>
 1022fc8:	9009883a 	mov	r4,r18
 1022fcc:	1023e0c0 	call	1023e0c <__malloc_unlock>
 1022fd0:	0005883a 	mov	r2,zero
 1022fd4:	dfc00417 	ldw	ra,16(sp)
 1022fd8:	dcc00317 	ldw	r19,12(sp)
 1022fdc:	dc800217 	ldw	r18,8(sp)
 1022fe0:	dc400117 	ldw	r17,4(sp)
 1022fe4:	dc000017 	ldw	r16,0(sp)
 1022fe8:	dec00504 	addi	sp,sp,20
 1022fec:	f800283a 	ret
 1022ff0:	040bc83a 	sub	r5,zero,r16
 1022ff4:	9009883a 	mov	r4,r18
 1022ff8:	10228140 	call	1022814 <_sbrk_r>
 1022ffc:	00ffffc4 	movi	r3,-1
 1023000:	10c00d26 	beq	r2,r3,1023038 <_malloc_trim_r+0xe0>
 1023004:	00c040f4 	movhi	r3,259
 1023008:	18e5c704 	addi	r3,r3,-26852
 102300c:	18800017 	ldw	r2,0(r3)
 1023010:	99000217 	ldw	r4,8(r19)
 1023014:	8c23c83a 	sub	r17,r17,r16
 1023018:	8c400054 	ori	r17,r17,1
 102301c:	1421c83a 	sub	r16,r2,r16
 1023020:	24400115 	stw	r17,4(r4)
 1023024:	9009883a 	mov	r4,r18
 1023028:	1c000015 	stw	r16,0(r3)
 102302c:	1023e0c0 	call	1023e0c <__malloc_unlock>
 1023030:	00800044 	movi	r2,1
 1023034:	003fe706 	br	1022fd4 <__alt_data_end+0xfffe5b14>
 1023038:	000b883a 	mov	r5,zero
 102303c:	9009883a 	mov	r4,r18
 1023040:	10228140 	call	1022814 <_sbrk_r>
 1023044:	99000217 	ldw	r4,8(r19)
 1023048:	014003c4 	movi	r5,15
 102304c:	1107c83a 	sub	r3,r2,r4
 1023050:	28ffdd0e 	bge	r5,r3,1022fc8 <__alt_data_end+0xfffe5b08>
 1023054:	014040b4 	movhi	r5,258
 1023058:	295f1504 	addi	r5,r5,31828
 102305c:	29400017 	ldw	r5,0(r5)
 1023060:	18c00054 	ori	r3,r3,1
 1023064:	20c00115 	stw	r3,4(r4)
 1023068:	00c040f4 	movhi	r3,259
 102306c:	1145c83a 	sub	r2,r2,r5
 1023070:	18e5c704 	addi	r3,r3,-26852
 1023074:	18800015 	stw	r2,0(r3)
 1023078:	003fd306 	br	1022fc8 <__alt_data_end+0xfffe5b08>

0102307c <_free_r>:
 102307c:	28004126 	beq	r5,zero,1023184 <_free_r+0x108>
 1023080:	defffd04 	addi	sp,sp,-12
 1023084:	dc400115 	stw	r17,4(sp)
 1023088:	dc000015 	stw	r16,0(sp)
 102308c:	2023883a 	mov	r17,r4
 1023090:	2821883a 	mov	r16,r5
 1023094:	dfc00215 	stw	ra,8(sp)
 1023098:	1023de80 	call	1023de8 <__malloc_lock>
 102309c:	81ffff17 	ldw	r7,-4(r16)
 10230a0:	00bfff84 	movi	r2,-2
 10230a4:	010040b4 	movhi	r4,258
 10230a8:	81bffe04 	addi	r6,r16,-8
 10230ac:	3884703a 	and	r2,r7,r2
 10230b0:	21198f04 	addi	r4,r4,26172
 10230b4:	308b883a 	add	r5,r6,r2
 10230b8:	2a400117 	ldw	r9,4(r5)
 10230bc:	22000217 	ldw	r8,8(r4)
 10230c0:	00ffff04 	movi	r3,-4
 10230c4:	48c6703a 	and	r3,r9,r3
 10230c8:	2a005726 	beq	r5,r8,1023228 <_free_r+0x1ac>
 10230cc:	28c00115 	stw	r3,4(r5)
 10230d0:	39c0004c 	andi	r7,r7,1
 10230d4:	3800091e 	bne	r7,zero,10230fc <_free_r+0x80>
 10230d8:	823ffe17 	ldw	r8,-8(r16)
 10230dc:	22400204 	addi	r9,r4,8
 10230e0:	320dc83a 	sub	r6,r6,r8
 10230e4:	31c00217 	ldw	r7,8(r6)
 10230e8:	1205883a 	add	r2,r2,r8
 10230ec:	3a406526 	beq	r7,r9,1023284 <_free_r+0x208>
 10230f0:	32000317 	ldw	r8,12(r6)
 10230f4:	3a000315 	stw	r8,12(r7)
 10230f8:	41c00215 	stw	r7,8(r8)
 10230fc:	28cf883a 	add	r7,r5,r3
 1023100:	39c00117 	ldw	r7,4(r7)
 1023104:	39c0004c 	andi	r7,r7,1
 1023108:	38003a26 	beq	r7,zero,10231f4 <_free_r+0x178>
 102310c:	10c00054 	ori	r3,r2,1
 1023110:	30c00115 	stw	r3,4(r6)
 1023114:	3087883a 	add	r3,r6,r2
 1023118:	18800015 	stw	r2,0(r3)
 102311c:	00c07fc4 	movi	r3,511
 1023120:	18801936 	bltu	r3,r2,1023188 <_free_r+0x10c>
 1023124:	1004d0fa 	srli	r2,r2,3
 1023128:	01c00044 	movi	r7,1
 102312c:	21400117 	ldw	r5,4(r4)
 1023130:	10c00044 	addi	r3,r2,1
 1023134:	18c7883a 	add	r3,r3,r3
 1023138:	1005d0ba 	srai	r2,r2,2
 102313c:	18c7883a 	add	r3,r3,r3
 1023140:	18c7883a 	add	r3,r3,r3
 1023144:	1907883a 	add	r3,r3,r4
 1023148:	3884983a 	sll	r2,r7,r2
 102314c:	19c00017 	ldw	r7,0(r3)
 1023150:	1a3ffe04 	addi	r8,r3,-8
 1023154:	1144b03a 	or	r2,r2,r5
 1023158:	32000315 	stw	r8,12(r6)
 102315c:	31c00215 	stw	r7,8(r6)
 1023160:	20800115 	stw	r2,4(r4)
 1023164:	19800015 	stw	r6,0(r3)
 1023168:	39800315 	stw	r6,12(r7)
 102316c:	8809883a 	mov	r4,r17
 1023170:	dfc00217 	ldw	ra,8(sp)
 1023174:	dc400117 	ldw	r17,4(sp)
 1023178:	dc000017 	ldw	r16,0(sp)
 102317c:	dec00304 	addi	sp,sp,12
 1023180:	1023e0c1 	jmpi	1023e0c <__malloc_unlock>
 1023184:	f800283a 	ret
 1023188:	100ad27a 	srli	r5,r2,9
 102318c:	00c00104 	movi	r3,4
 1023190:	19404a36 	bltu	r3,r5,10232bc <_free_r+0x240>
 1023194:	100ad1ba 	srli	r5,r2,6
 1023198:	28c00e44 	addi	r3,r5,57
 102319c:	18c7883a 	add	r3,r3,r3
 10231a0:	29400e04 	addi	r5,r5,56
 10231a4:	18c7883a 	add	r3,r3,r3
 10231a8:	18c7883a 	add	r3,r3,r3
 10231ac:	1909883a 	add	r4,r3,r4
 10231b0:	20c00017 	ldw	r3,0(r4)
 10231b4:	01c040b4 	movhi	r7,258
 10231b8:	213ffe04 	addi	r4,r4,-8
 10231bc:	39d98f04 	addi	r7,r7,26172
 10231c0:	20c04426 	beq	r4,r3,10232d4 <_free_r+0x258>
 10231c4:	01ffff04 	movi	r7,-4
 10231c8:	19400117 	ldw	r5,4(r3)
 10231cc:	29ca703a 	and	r5,r5,r7
 10231d0:	1140022e 	bgeu	r2,r5,10231dc <_free_r+0x160>
 10231d4:	18c00217 	ldw	r3,8(r3)
 10231d8:	20fffb1e 	bne	r4,r3,10231c8 <__alt_data_end+0xfffe5d08>
 10231dc:	19000317 	ldw	r4,12(r3)
 10231e0:	31000315 	stw	r4,12(r6)
 10231e4:	30c00215 	stw	r3,8(r6)
 10231e8:	21800215 	stw	r6,8(r4)
 10231ec:	19800315 	stw	r6,12(r3)
 10231f0:	003fde06 	br	102316c <__alt_data_end+0xfffe5cac>
 10231f4:	29c00217 	ldw	r7,8(r5)
 10231f8:	10c5883a 	add	r2,r2,r3
 10231fc:	00c040b4 	movhi	r3,258
 1023200:	18d99104 	addi	r3,r3,26180
 1023204:	38c03b26 	beq	r7,r3,10232f4 <_free_r+0x278>
 1023208:	2a000317 	ldw	r8,12(r5)
 102320c:	11400054 	ori	r5,r2,1
 1023210:	3087883a 	add	r3,r6,r2
 1023214:	3a000315 	stw	r8,12(r7)
 1023218:	41c00215 	stw	r7,8(r8)
 102321c:	31400115 	stw	r5,4(r6)
 1023220:	18800015 	stw	r2,0(r3)
 1023224:	003fbd06 	br	102311c <__alt_data_end+0xfffe5c5c>
 1023228:	39c0004c 	andi	r7,r7,1
 102322c:	10c5883a 	add	r2,r2,r3
 1023230:	3800071e 	bne	r7,zero,1023250 <_free_r+0x1d4>
 1023234:	81fffe17 	ldw	r7,-8(r16)
 1023238:	31cdc83a 	sub	r6,r6,r7
 102323c:	30c00317 	ldw	r3,12(r6)
 1023240:	31400217 	ldw	r5,8(r6)
 1023244:	11c5883a 	add	r2,r2,r7
 1023248:	28c00315 	stw	r3,12(r5)
 102324c:	19400215 	stw	r5,8(r3)
 1023250:	10c00054 	ori	r3,r2,1
 1023254:	30c00115 	stw	r3,4(r6)
 1023258:	00c040b4 	movhi	r3,258
 102325c:	18df1604 	addi	r3,r3,31832
 1023260:	18c00017 	ldw	r3,0(r3)
 1023264:	21800215 	stw	r6,8(r4)
 1023268:	10ffc036 	bltu	r2,r3,102316c <__alt_data_end+0xfffe5cac>
 102326c:	008040f4 	movhi	r2,259
 1023270:	10a5be04 	addi	r2,r2,-26888
 1023274:	11400017 	ldw	r5,0(r2)
 1023278:	8809883a 	mov	r4,r17
 102327c:	1022f580 	call	1022f58 <_malloc_trim_r>
 1023280:	003fba06 	br	102316c <__alt_data_end+0xfffe5cac>
 1023284:	28c9883a 	add	r4,r5,r3
 1023288:	21000117 	ldw	r4,4(r4)
 102328c:	2100004c 	andi	r4,r4,1
 1023290:	2000391e 	bne	r4,zero,1023378 <_free_r+0x2fc>
 1023294:	29c00217 	ldw	r7,8(r5)
 1023298:	29000317 	ldw	r4,12(r5)
 102329c:	1885883a 	add	r2,r3,r2
 10232a0:	10c00054 	ori	r3,r2,1
 10232a4:	39000315 	stw	r4,12(r7)
 10232a8:	21c00215 	stw	r7,8(r4)
 10232ac:	30c00115 	stw	r3,4(r6)
 10232b0:	308d883a 	add	r6,r6,r2
 10232b4:	30800015 	stw	r2,0(r6)
 10232b8:	003fac06 	br	102316c <__alt_data_end+0xfffe5cac>
 10232bc:	00c00504 	movi	r3,20
 10232c0:	19401536 	bltu	r3,r5,1023318 <_free_r+0x29c>
 10232c4:	28c01704 	addi	r3,r5,92
 10232c8:	18c7883a 	add	r3,r3,r3
 10232cc:	294016c4 	addi	r5,r5,91
 10232d0:	003fb406 	br	10231a4 <__alt_data_end+0xfffe5ce4>
 10232d4:	280bd0ba 	srai	r5,r5,2
 10232d8:	00c00044 	movi	r3,1
 10232dc:	38800117 	ldw	r2,4(r7)
 10232e0:	194a983a 	sll	r5,r3,r5
 10232e4:	2007883a 	mov	r3,r4
 10232e8:	2884b03a 	or	r2,r5,r2
 10232ec:	38800115 	stw	r2,4(r7)
 10232f0:	003fbb06 	br	10231e0 <__alt_data_end+0xfffe5d20>
 10232f4:	21800515 	stw	r6,20(r4)
 10232f8:	21800415 	stw	r6,16(r4)
 10232fc:	10c00054 	ori	r3,r2,1
 1023300:	31c00315 	stw	r7,12(r6)
 1023304:	31c00215 	stw	r7,8(r6)
 1023308:	30c00115 	stw	r3,4(r6)
 102330c:	308d883a 	add	r6,r6,r2
 1023310:	30800015 	stw	r2,0(r6)
 1023314:	003f9506 	br	102316c <__alt_data_end+0xfffe5cac>
 1023318:	00c01504 	movi	r3,84
 102331c:	19400536 	bltu	r3,r5,1023334 <_free_r+0x2b8>
 1023320:	100ad33a 	srli	r5,r2,12
 1023324:	28c01bc4 	addi	r3,r5,111
 1023328:	18c7883a 	add	r3,r3,r3
 102332c:	29401b84 	addi	r5,r5,110
 1023330:	003f9c06 	br	10231a4 <__alt_data_end+0xfffe5ce4>
 1023334:	00c05504 	movi	r3,340
 1023338:	19400536 	bltu	r3,r5,1023350 <_free_r+0x2d4>
 102333c:	100ad3fa 	srli	r5,r2,15
 1023340:	28c01e04 	addi	r3,r5,120
 1023344:	18c7883a 	add	r3,r3,r3
 1023348:	29401dc4 	addi	r5,r5,119
 102334c:	003f9506 	br	10231a4 <__alt_data_end+0xfffe5ce4>
 1023350:	00c15504 	movi	r3,1364
 1023354:	19400536 	bltu	r3,r5,102336c <_free_r+0x2f0>
 1023358:	100ad4ba 	srli	r5,r2,18
 102335c:	28c01f44 	addi	r3,r5,125
 1023360:	18c7883a 	add	r3,r3,r3
 1023364:	29401f04 	addi	r5,r5,124
 1023368:	003f8e06 	br	10231a4 <__alt_data_end+0xfffe5ce4>
 102336c:	00c03f84 	movi	r3,254
 1023370:	01401f84 	movi	r5,126
 1023374:	003f8b06 	br	10231a4 <__alt_data_end+0xfffe5ce4>
 1023378:	10c00054 	ori	r3,r2,1
 102337c:	30c00115 	stw	r3,4(r6)
 1023380:	308d883a 	add	r6,r6,r2
 1023384:	30800015 	stw	r2,0(r6)
 1023388:	003f7806 	br	102316c <__alt_data_end+0xfffe5cac>

0102338c <_lseek_r>:
 102338c:	defffd04 	addi	sp,sp,-12
 1023390:	2805883a 	mov	r2,r5
 1023394:	dc000015 	stw	r16,0(sp)
 1023398:	040040f4 	movhi	r16,259
 102339c:	dc400115 	stw	r17,4(sp)
 10233a0:	300b883a 	mov	r5,r6
 10233a4:	8425bf04 	addi	r16,r16,-26884
 10233a8:	2023883a 	mov	r17,r4
 10233ac:	380d883a 	mov	r6,r7
 10233b0:	1009883a 	mov	r4,r2
 10233b4:	dfc00215 	stw	ra,8(sp)
 10233b8:	80000015 	stw	zero,0(r16)
 10233bc:	1023c980 	call	1023c98 <lseek>
 10233c0:	00ffffc4 	movi	r3,-1
 10233c4:	10c00526 	beq	r2,r3,10233dc <_lseek_r+0x50>
 10233c8:	dfc00217 	ldw	ra,8(sp)
 10233cc:	dc400117 	ldw	r17,4(sp)
 10233d0:	dc000017 	ldw	r16,0(sp)
 10233d4:	dec00304 	addi	sp,sp,12
 10233d8:	f800283a 	ret
 10233dc:	80c00017 	ldw	r3,0(r16)
 10233e0:	183ff926 	beq	r3,zero,10233c8 <__alt_data_end+0xfffe5f08>
 10233e4:	88c00015 	stw	r3,0(r17)
 10233e8:	003ff706 	br	10233c8 <__alt_data_end+0xfffe5f08>

010233ec <__smakebuf_r>:
 10233ec:	2880030b 	ldhu	r2,12(r5)
 10233f0:	10c0008c 	andi	r3,r2,2
 10233f4:	1800411e 	bne	r3,zero,10234fc <__smakebuf_r+0x110>
 10233f8:	deffec04 	addi	sp,sp,-80
 10233fc:	dc000f15 	stw	r16,60(sp)
 1023400:	2821883a 	mov	r16,r5
 1023404:	2940038f 	ldh	r5,14(r5)
 1023408:	dc401015 	stw	r17,64(sp)
 102340c:	dfc01315 	stw	ra,76(sp)
 1023410:	dcc01215 	stw	r19,72(sp)
 1023414:	dc801115 	stw	r18,68(sp)
 1023418:	2023883a 	mov	r17,r4
 102341c:	28001c16 	blt	r5,zero,1023490 <__smakebuf_r+0xa4>
 1023420:	d80d883a 	mov	r6,sp
 1023424:	10236080 	call	1023608 <_fstat_r>
 1023428:	10001816 	blt	r2,zero,102348c <__smakebuf_r+0xa0>
 102342c:	d8800117 	ldw	r2,4(sp)
 1023430:	00e00014 	movui	r3,32768
 1023434:	10bc000c 	andi	r2,r2,61440
 1023438:	14c80020 	cmpeqi	r19,r2,8192
 102343c:	10c03726 	beq	r2,r3,102351c <__smakebuf_r+0x130>
 1023440:	80c0030b 	ldhu	r3,12(r16)
 1023444:	18c20014 	ori	r3,r3,2048
 1023448:	80c0030d 	sth	r3,12(r16)
 102344c:	00c80004 	movi	r3,8192
 1023450:	10c0521e 	bne	r2,r3,102359c <__smakebuf_r+0x1b0>
 1023454:	8140038f 	ldh	r5,14(r16)
 1023458:	8809883a 	mov	r4,r17
 102345c:	10236640 	call	1023664 <_isatty_r>
 1023460:	10004c26 	beq	r2,zero,1023594 <__smakebuf_r+0x1a8>
 1023464:	8080030b 	ldhu	r2,12(r16)
 1023468:	80c010c4 	addi	r3,r16,67
 102346c:	80c00015 	stw	r3,0(r16)
 1023470:	10800054 	ori	r2,r2,1
 1023474:	8080030d 	sth	r2,12(r16)
 1023478:	00800044 	movi	r2,1
 102347c:	80c00415 	stw	r3,16(r16)
 1023480:	80800515 	stw	r2,20(r16)
 1023484:	04810004 	movi	r18,1024
 1023488:	00000706 	br	10234a8 <__smakebuf_r+0xbc>
 102348c:	8080030b 	ldhu	r2,12(r16)
 1023490:	10c0200c 	andi	r3,r2,128
 1023494:	18001f1e 	bne	r3,zero,1023514 <__smakebuf_r+0x128>
 1023498:	04810004 	movi	r18,1024
 102349c:	10820014 	ori	r2,r2,2048
 10234a0:	8080030d 	sth	r2,12(r16)
 10234a4:	0027883a 	mov	r19,zero
 10234a8:	900b883a 	mov	r5,r18
 10234ac:	8809883a 	mov	r4,r17
 10234b0:	10215f40 	call	10215f4 <_malloc_r>
 10234b4:	10002c26 	beq	r2,zero,1023568 <__smakebuf_r+0x17c>
 10234b8:	80c0030b 	ldhu	r3,12(r16)
 10234bc:	010040b4 	movhi	r4,258
 10234c0:	21030604 	addi	r4,r4,3096
 10234c4:	89000f15 	stw	r4,60(r17)
 10234c8:	18c02014 	ori	r3,r3,128
 10234cc:	80c0030d 	sth	r3,12(r16)
 10234d0:	80800015 	stw	r2,0(r16)
 10234d4:	80800415 	stw	r2,16(r16)
 10234d8:	84800515 	stw	r18,20(r16)
 10234dc:	98001a1e 	bne	r19,zero,1023548 <__smakebuf_r+0x15c>
 10234e0:	dfc01317 	ldw	ra,76(sp)
 10234e4:	dcc01217 	ldw	r19,72(sp)
 10234e8:	dc801117 	ldw	r18,68(sp)
 10234ec:	dc401017 	ldw	r17,64(sp)
 10234f0:	dc000f17 	ldw	r16,60(sp)
 10234f4:	dec01404 	addi	sp,sp,80
 10234f8:	f800283a 	ret
 10234fc:	288010c4 	addi	r2,r5,67
 1023500:	28800015 	stw	r2,0(r5)
 1023504:	28800415 	stw	r2,16(r5)
 1023508:	00800044 	movi	r2,1
 102350c:	28800515 	stw	r2,20(r5)
 1023510:	f800283a 	ret
 1023514:	04801004 	movi	r18,64
 1023518:	003fe006 	br	102349c <__alt_data_end+0xfffe5fdc>
 102351c:	81000a17 	ldw	r4,40(r16)
 1023520:	00c040b4 	movhi	r3,258
 1023524:	18ca5004 	addi	r3,r3,10560
 1023528:	20ffc51e 	bne	r4,r3,1023440 <__alt_data_end+0xfffe5f80>
 102352c:	8080030b 	ldhu	r2,12(r16)
 1023530:	04810004 	movi	r18,1024
 1023534:	84801315 	stw	r18,76(r16)
 1023538:	1484b03a 	or	r2,r2,r18
 102353c:	8080030d 	sth	r2,12(r16)
 1023540:	0027883a 	mov	r19,zero
 1023544:	003fd806 	br	10234a8 <__alt_data_end+0xfffe5fe8>
 1023548:	8140038f 	ldh	r5,14(r16)
 102354c:	8809883a 	mov	r4,r17
 1023550:	10236640 	call	1023664 <_isatty_r>
 1023554:	103fe226 	beq	r2,zero,10234e0 <__alt_data_end+0xfffe6020>
 1023558:	8080030b 	ldhu	r2,12(r16)
 102355c:	10800054 	ori	r2,r2,1
 1023560:	8080030d 	sth	r2,12(r16)
 1023564:	003fde06 	br	10234e0 <__alt_data_end+0xfffe6020>
 1023568:	8080030b 	ldhu	r2,12(r16)
 102356c:	10c0800c 	andi	r3,r2,512
 1023570:	183fdb1e 	bne	r3,zero,10234e0 <__alt_data_end+0xfffe6020>
 1023574:	10800094 	ori	r2,r2,2
 1023578:	80c010c4 	addi	r3,r16,67
 102357c:	8080030d 	sth	r2,12(r16)
 1023580:	00800044 	movi	r2,1
 1023584:	80c00015 	stw	r3,0(r16)
 1023588:	80c00415 	stw	r3,16(r16)
 102358c:	80800515 	stw	r2,20(r16)
 1023590:	003fd306 	br	10234e0 <__alt_data_end+0xfffe6020>
 1023594:	04810004 	movi	r18,1024
 1023598:	003fc306 	br	10234a8 <__alt_data_end+0xfffe5fe8>
 102359c:	0027883a 	mov	r19,zero
 10235a0:	04810004 	movi	r18,1024
 10235a4:	003fc006 	br	10234a8 <__alt_data_end+0xfffe5fe8>

010235a8 <_read_r>:
 10235a8:	defffd04 	addi	sp,sp,-12
 10235ac:	2805883a 	mov	r2,r5
 10235b0:	dc000015 	stw	r16,0(sp)
 10235b4:	040040f4 	movhi	r16,259
 10235b8:	dc400115 	stw	r17,4(sp)
 10235bc:	300b883a 	mov	r5,r6
 10235c0:	8425bf04 	addi	r16,r16,-26884
 10235c4:	2023883a 	mov	r17,r4
 10235c8:	380d883a 	mov	r6,r7
 10235cc:	1009883a 	mov	r4,r2
 10235d0:	dfc00215 	stw	ra,8(sp)
 10235d4:	80000015 	stw	zero,0(r16)
 10235d8:	1023e6c0 	call	1023e6c <read>
 10235dc:	00ffffc4 	movi	r3,-1
 10235e0:	10c00526 	beq	r2,r3,10235f8 <_read_r+0x50>
 10235e4:	dfc00217 	ldw	ra,8(sp)
 10235e8:	dc400117 	ldw	r17,4(sp)
 10235ec:	dc000017 	ldw	r16,0(sp)
 10235f0:	dec00304 	addi	sp,sp,12
 10235f4:	f800283a 	ret
 10235f8:	80c00017 	ldw	r3,0(r16)
 10235fc:	183ff926 	beq	r3,zero,10235e4 <__alt_data_end+0xfffe6124>
 1023600:	88c00015 	stw	r3,0(r17)
 1023604:	003ff706 	br	10235e4 <__alt_data_end+0xfffe6124>

01023608 <_fstat_r>:
 1023608:	defffd04 	addi	sp,sp,-12
 102360c:	2805883a 	mov	r2,r5
 1023610:	dc000015 	stw	r16,0(sp)
 1023614:	040040f4 	movhi	r16,259
 1023618:	dc400115 	stw	r17,4(sp)
 102361c:	8425bf04 	addi	r16,r16,-26884
 1023620:	2023883a 	mov	r17,r4
 1023624:	300b883a 	mov	r5,r6
 1023628:	1009883a 	mov	r4,r2
 102362c:	dfc00215 	stw	ra,8(sp)
 1023630:	80000015 	stw	zero,0(r16)
 1023634:	10239e00 	call	10239e0 <fstat>
 1023638:	00ffffc4 	movi	r3,-1
 102363c:	10c00526 	beq	r2,r3,1023654 <_fstat_r+0x4c>
 1023640:	dfc00217 	ldw	ra,8(sp)
 1023644:	dc400117 	ldw	r17,4(sp)
 1023648:	dc000017 	ldw	r16,0(sp)
 102364c:	dec00304 	addi	sp,sp,12
 1023650:	f800283a 	ret
 1023654:	80c00017 	ldw	r3,0(r16)
 1023658:	183ff926 	beq	r3,zero,1023640 <__alt_data_end+0xfffe6180>
 102365c:	88c00015 	stw	r3,0(r17)
 1023660:	003ff706 	br	1023640 <__alt_data_end+0xfffe6180>

01023664 <_isatty_r>:
 1023664:	defffd04 	addi	sp,sp,-12
 1023668:	dc000015 	stw	r16,0(sp)
 102366c:	040040f4 	movhi	r16,259
 1023670:	dc400115 	stw	r17,4(sp)
 1023674:	8425bf04 	addi	r16,r16,-26884
 1023678:	2023883a 	mov	r17,r4
 102367c:	2809883a 	mov	r4,r5
 1023680:	dfc00215 	stw	ra,8(sp)
 1023684:	80000015 	stw	zero,0(r16)
 1023688:	1023acc0 	call	1023acc <isatty>
 102368c:	00ffffc4 	movi	r3,-1
 1023690:	10c00526 	beq	r2,r3,10236a8 <_isatty_r+0x44>
 1023694:	dfc00217 	ldw	ra,8(sp)
 1023698:	dc400117 	ldw	r17,4(sp)
 102369c:	dc000017 	ldw	r16,0(sp)
 10236a0:	dec00304 	addi	sp,sp,12
 10236a4:	f800283a 	ret
 10236a8:	80c00017 	ldw	r3,0(r16)
 10236ac:	183ff926 	beq	r3,zero,1023694 <__alt_data_end+0xfffe61d4>
 10236b0:	88c00015 	stw	r3,0(r17)
 10236b4:	003ff706 	br	1023694 <__alt_data_end+0xfffe61d4>

010236b8 <__divsi3>:
 10236b8:	20001b16 	blt	r4,zero,1023728 <__divsi3+0x70>
 10236bc:	000f883a 	mov	r7,zero
 10236c0:	28001616 	blt	r5,zero,102371c <__divsi3+0x64>
 10236c4:	200d883a 	mov	r6,r4
 10236c8:	29001a2e 	bgeu	r5,r4,1023734 <__divsi3+0x7c>
 10236cc:	00800804 	movi	r2,32
 10236d0:	00c00044 	movi	r3,1
 10236d4:	00000106 	br	10236dc <__divsi3+0x24>
 10236d8:	10000d26 	beq	r2,zero,1023710 <__divsi3+0x58>
 10236dc:	294b883a 	add	r5,r5,r5
 10236e0:	10bfffc4 	addi	r2,r2,-1
 10236e4:	18c7883a 	add	r3,r3,r3
 10236e8:	293ffb36 	bltu	r5,r4,10236d8 <__alt_data_end+0xfffe6218>
 10236ec:	0005883a 	mov	r2,zero
 10236f0:	18000726 	beq	r3,zero,1023710 <__divsi3+0x58>
 10236f4:	0005883a 	mov	r2,zero
 10236f8:	31400236 	bltu	r6,r5,1023704 <__divsi3+0x4c>
 10236fc:	314dc83a 	sub	r6,r6,r5
 1023700:	10c4b03a 	or	r2,r2,r3
 1023704:	1806d07a 	srli	r3,r3,1
 1023708:	280ad07a 	srli	r5,r5,1
 102370c:	183ffa1e 	bne	r3,zero,10236f8 <__alt_data_end+0xfffe6238>
 1023710:	38000126 	beq	r7,zero,1023718 <__divsi3+0x60>
 1023714:	0085c83a 	sub	r2,zero,r2
 1023718:	f800283a 	ret
 102371c:	014bc83a 	sub	r5,zero,r5
 1023720:	39c0005c 	xori	r7,r7,1
 1023724:	003fe706 	br	10236c4 <__alt_data_end+0xfffe6204>
 1023728:	0109c83a 	sub	r4,zero,r4
 102372c:	01c00044 	movi	r7,1
 1023730:	003fe306 	br	10236c0 <__alt_data_end+0xfffe6200>
 1023734:	00c00044 	movi	r3,1
 1023738:	003fee06 	br	10236f4 <__alt_data_end+0xfffe6234>

0102373c <__modsi3>:
 102373c:	20001716 	blt	r4,zero,102379c <__modsi3+0x60>
 1023740:	000f883a 	mov	r7,zero
 1023744:	2005883a 	mov	r2,r4
 1023748:	28001216 	blt	r5,zero,1023794 <__modsi3+0x58>
 102374c:	2900162e 	bgeu	r5,r4,10237a8 <__modsi3+0x6c>
 1023750:	01800804 	movi	r6,32
 1023754:	00c00044 	movi	r3,1
 1023758:	00000106 	br	1023760 <__modsi3+0x24>
 102375c:	30000a26 	beq	r6,zero,1023788 <__modsi3+0x4c>
 1023760:	294b883a 	add	r5,r5,r5
 1023764:	31bfffc4 	addi	r6,r6,-1
 1023768:	18c7883a 	add	r3,r3,r3
 102376c:	293ffb36 	bltu	r5,r4,102375c <__alt_data_end+0xfffe629c>
 1023770:	18000526 	beq	r3,zero,1023788 <__modsi3+0x4c>
 1023774:	1806d07a 	srli	r3,r3,1
 1023778:	11400136 	bltu	r2,r5,1023780 <__modsi3+0x44>
 102377c:	1145c83a 	sub	r2,r2,r5
 1023780:	280ad07a 	srli	r5,r5,1
 1023784:	183ffb1e 	bne	r3,zero,1023774 <__alt_data_end+0xfffe62b4>
 1023788:	38000126 	beq	r7,zero,1023790 <__modsi3+0x54>
 102378c:	0085c83a 	sub	r2,zero,r2
 1023790:	f800283a 	ret
 1023794:	014bc83a 	sub	r5,zero,r5
 1023798:	003fec06 	br	102374c <__alt_data_end+0xfffe628c>
 102379c:	0109c83a 	sub	r4,zero,r4
 10237a0:	01c00044 	movi	r7,1
 10237a4:	003fe706 	br	1023744 <__alt_data_end+0xfffe6284>
 10237a8:	00c00044 	movi	r3,1
 10237ac:	003ff106 	br	1023774 <__alt_data_end+0xfffe62b4>

010237b0 <__udivsi3>:
 10237b0:	200d883a 	mov	r6,r4
 10237b4:	2900152e 	bgeu	r5,r4,102380c <__udivsi3+0x5c>
 10237b8:	28001416 	blt	r5,zero,102380c <__udivsi3+0x5c>
 10237bc:	00800804 	movi	r2,32
 10237c0:	00c00044 	movi	r3,1
 10237c4:	00000206 	br	10237d0 <__udivsi3+0x20>
 10237c8:	10000e26 	beq	r2,zero,1023804 <__udivsi3+0x54>
 10237cc:	28000516 	blt	r5,zero,10237e4 <__udivsi3+0x34>
 10237d0:	294b883a 	add	r5,r5,r5
 10237d4:	10bfffc4 	addi	r2,r2,-1
 10237d8:	18c7883a 	add	r3,r3,r3
 10237dc:	293ffa36 	bltu	r5,r4,10237c8 <__alt_data_end+0xfffe6308>
 10237e0:	18000826 	beq	r3,zero,1023804 <__udivsi3+0x54>
 10237e4:	0005883a 	mov	r2,zero
 10237e8:	31400236 	bltu	r6,r5,10237f4 <__udivsi3+0x44>
 10237ec:	314dc83a 	sub	r6,r6,r5
 10237f0:	10c4b03a 	or	r2,r2,r3
 10237f4:	1806d07a 	srli	r3,r3,1
 10237f8:	280ad07a 	srli	r5,r5,1
 10237fc:	183ffa1e 	bne	r3,zero,10237e8 <__alt_data_end+0xfffe6328>
 1023800:	f800283a 	ret
 1023804:	0005883a 	mov	r2,zero
 1023808:	f800283a 	ret
 102380c:	00c00044 	movi	r3,1
 1023810:	003ff406 	br	10237e4 <__alt_data_end+0xfffe6324>

01023814 <__umodsi3>:
 1023814:	2005883a 	mov	r2,r4
 1023818:	2900122e 	bgeu	r5,r4,1023864 <__umodsi3+0x50>
 102381c:	28001116 	blt	r5,zero,1023864 <__umodsi3+0x50>
 1023820:	01800804 	movi	r6,32
 1023824:	00c00044 	movi	r3,1
 1023828:	00000206 	br	1023834 <__umodsi3+0x20>
 102382c:	30000c26 	beq	r6,zero,1023860 <__umodsi3+0x4c>
 1023830:	28000516 	blt	r5,zero,1023848 <__umodsi3+0x34>
 1023834:	294b883a 	add	r5,r5,r5
 1023838:	31bfffc4 	addi	r6,r6,-1
 102383c:	18c7883a 	add	r3,r3,r3
 1023840:	293ffa36 	bltu	r5,r4,102382c <__alt_data_end+0xfffe636c>
 1023844:	18000626 	beq	r3,zero,1023860 <__umodsi3+0x4c>
 1023848:	1806d07a 	srli	r3,r3,1
 102384c:	11400136 	bltu	r2,r5,1023854 <__umodsi3+0x40>
 1023850:	1145c83a 	sub	r2,r2,r5
 1023854:	280ad07a 	srli	r5,r5,1
 1023858:	183ffb1e 	bne	r3,zero,1023848 <__alt_data_end+0xfffe6388>
 102385c:	f800283a 	ret
 1023860:	f800283a 	ret
 1023864:	00c00044 	movi	r3,1
 1023868:	003ff706 	br	1023848 <__alt_data_end+0xfffe6388>

0102386c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 102386c:	defffe04 	addi	sp,sp,-8
 1023870:	dfc00115 	stw	ra,4(sp)
 1023874:	df000015 	stw	fp,0(sp)
 1023878:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 102387c:	d0a00917 	ldw	r2,-32732(gp)
 1023880:	10000326 	beq	r2,zero,1023890 <alt_get_errno+0x24>
 1023884:	d0a00917 	ldw	r2,-32732(gp)
 1023888:	103ee83a 	callr	r2
 102388c:	00000106 	br	1023894 <alt_get_errno+0x28>
 1023890:	d0a6ac04 	addi	r2,gp,-25936
}
 1023894:	e037883a 	mov	sp,fp
 1023898:	dfc00117 	ldw	ra,4(sp)
 102389c:	df000017 	ldw	fp,0(sp)
 10238a0:	dec00204 	addi	sp,sp,8
 10238a4:	f800283a 	ret

010238a8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 10238a8:	defffb04 	addi	sp,sp,-20
 10238ac:	dfc00415 	stw	ra,16(sp)
 10238b0:	df000315 	stw	fp,12(sp)
 10238b4:	df000304 	addi	fp,sp,12
 10238b8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 10238bc:	e0bfff17 	ldw	r2,-4(fp)
 10238c0:	10000616 	blt	r2,zero,10238dc <close+0x34>
 10238c4:	e0bfff17 	ldw	r2,-4(fp)
 10238c8:	10c00324 	muli	r3,r2,12
 10238cc:	008040b4 	movhi	r2,258
 10238d0:	109a9b04 	addi	r2,r2,27244
 10238d4:	1885883a 	add	r2,r3,r2
 10238d8:	00000106 	br	10238e0 <close+0x38>
 10238dc:	0005883a 	mov	r2,zero
 10238e0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 10238e4:	e0bffd17 	ldw	r2,-12(fp)
 10238e8:	10001926 	beq	r2,zero,1023950 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 10238ec:	e0bffd17 	ldw	r2,-12(fp)
 10238f0:	10800017 	ldw	r2,0(r2)
 10238f4:	10800417 	ldw	r2,16(r2)
 10238f8:	10000626 	beq	r2,zero,1023914 <close+0x6c>
 10238fc:	e0bffd17 	ldw	r2,-12(fp)
 1023900:	10800017 	ldw	r2,0(r2)
 1023904:	10800417 	ldw	r2,16(r2)
 1023908:	e13ffd17 	ldw	r4,-12(fp)
 102390c:	103ee83a 	callr	r2
 1023910:	00000106 	br	1023918 <close+0x70>
 1023914:	0005883a 	mov	r2,zero
 1023918:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 102391c:	e13fff17 	ldw	r4,-4(fp)
 1023920:	1023f680 	call	1023f68 <alt_release_fd>
    if (rval < 0)
 1023924:	e0bffe17 	ldw	r2,-8(fp)
 1023928:	1000070e 	bge	r2,zero,1023948 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 102392c:	102386c0 	call	102386c <alt_get_errno>
 1023930:	1007883a 	mov	r3,r2
 1023934:	e0bffe17 	ldw	r2,-8(fp)
 1023938:	0085c83a 	sub	r2,zero,r2
 102393c:	18800015 	stw	r2,0(r3)
      return -1;
 1023940:	00bfffc4 	movi	r2,-1
 1023944:	00000706 	br	1023964 <close+0xbc>
    }
    return 0;
 1023948:	0005883a 	mov	r2,zero
 102394c:	00000506 	br	1023964 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 1023950:	102386c0 	call	102386c <alt_get_errno>
 1023954:	1007883a 	mov	r3,r2
 1023958:	00801444 	movi	r2,81
 102395c:	18800015 	stw	r2,0(r3)
    return -1;
 1023960:	00bfffc4 	movi	r2,-1
  }
}
 1023964:	e037883a 	mov	sp,fp
 1023968:	dfc00117 	ldw	ra,4(sp)
 102396c:	df000017 	ldw	fp,0(sp)
 1023970:	dec00204 	addi	sp,sp,8
 1023974:	f800283a 	ret

01023978 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 1023978:	defffc04 	addi	sp,sp,-16
 102397c:	df000315 	stw	fp,12(sp)
 1023980:	df000304 	addi	fp,sp,12
 1023984:	e13ffd15 	stw	r4,-12(fp)
 1023988:	e17ffe15 	stw	r5,-8(fp)
 102398c:	e1bfff15 	stw	r6,-4(fp)
  return len;
 1023990:	e0bfff17 	ldw	r2,-4(fp)
}
 1023994:	e037883a 	mov	sp,fp
 1023998:	df000017 	ldw	fp,0(sp)
 102399c:	dec00104 	addi	sp,sp,4
 10239a0:	f800283a 	ret

010239a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 10239a4:	defffe04 	addi	sp,sp,-8
 10239a8:	dfc00115 	stw	ra,4(sp)
 10239ac:	df000015 	stw	fp,0(sp)
 10239b0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 10239b4:	d0a00917 	ldw	r2,-32732(gp)
 10239b8:	10000326 	beq	r2,zero,10239c8 <alt_get_errno+0x24>
 10239bc:	d0a00917 	ldw	r2,-32732(gp)
 10239c0:	103ee83a 	callr	r2
 10239c4:	00000106 	br	10239cc <alt_get_errno+0x28>
 10239c8:	d0a6ac04 	addi	r2,gp,-25936
}
 10239cc:	e037883a 	mov	sp,fp
 10239d0:	dfc00117 	ldw	ra,4(sp)
 10239d4:	df000017 	ldw	fp,0(sp)
 10239d8:	dec00204 	addi	sp,sp,8
 10239dc:	f800283a 	ret

010239e0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 10239e0:	defffb04 	addi	sp,sp,-20
 10239e4:	dfc00415 	stw	ra,16(sp)
 10239e8:	df000315 	stw	fp,12(sp)
 10239ec:	df000304 	addi	fp,sp,12
 10239f0:	e13ffe15 	stw	r4,-8(fp)
 10239f4:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 10239f8:	e0bffe17 	ldw	r2,-8(fp)
 10239fc:	10000616 	blt	r2,zero,1023a18 <fstat+0x38>
 1023a00:	e0bffe17 	ldw	r2,-8(fp)
 1023a04:	10c00324 	muli	r3,r2,12
 1023a08:	008040b4 	movhi	r2,258
 1023a0c:	109a9b04 	addi	r2,r2,27244
 1023a10:	1885883a 	add	r2,r3,r2
 1023a14:	00000106 	br	1023a1c <fstat+0x3c>
 1023a18:	0005883a 	mov	r2,zero
 1023a1c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 1023a20:	e0bffd17 	ldw	r2,-12(fp)
 1023a24:	10001026 	beq	r2,zero,1023a68 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 1023a28:	e0bffd17 	ldw	r2,-12(fp)
 1023a2c:	10800017 	ldw	r2,0(r2)
 1023a30:	10800817 	ldw	r2,32(r2)
 1023a34:	10000726 	beq	r2,zero,1023a54 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 1023a38:	e0bffd17 	ldw	r2,-12(fp)
 1023a3c:	10800017 	ldw	r2,0(r2)
 1023a40:	10800817 	ldw	r2,32(r2)
 1023a44:	e17fff17 	ldw	r5,-4(fp)
 1023a48:	e13ffd17 	ldw	r4,-12(fp)
 1023a4c:	103ee83a 	callr	r2
 1023a50:	00000a06 	br	1023a7c <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 1023a54:	e0bfff17 	ldw	r2,-4(fp)
 1023a58:	00c80004 	movi	r3,8192
 1023a5c:	10c00115 	stw	r3,4(r2)
      return 0;
 1023a60:	0005883a 	mov	r2,zero
 1023a64:	00000506 	br	1023a7c <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 1023a68:	10239a40 	call	10239a4 <alt_get_errno>
 1023a6c:	1007883a 	mov	r3,r2
 1023a70:	00801444 	movi	r2,81
 1023a74:	18800015 	stw	r2,0(r3)
    return -1;
 1023a78:	00bfffc4 	movi	r2,-1
  }
}
 1023a7c:	e037883a 	mov	sp,fp
 1023a80:	dfc00117 	ldw	ra,4(sp)
 1023a84:	df000017 	ldw	fp,0(sp)
 1023a88:	dec00204 	addi	sp,sp,8
 1023a8c:	f800283a 	ret

01023a90 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1023a90:	defffe04 	addi	sp,sp,-8
 1023a94:	dfc00115 	stw	ra,4(sp)
 1023a98:	df000015 	stw	fp,0(sp)
 1023a9c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1023aa0:	d0a00917 	ldw	r2,-32732(gp)
 1023aa4:	10000326 	beq	r2,zero,1023ab4 <alt_get_errno+0x24>
 1023aa8:	d0a00917 	ldw	r2,-32732(gp)
 1023aac:	103ee83a 	callr	r2
 1023ab0:	00000106 	br	1023ab8 <alt_get_errno+0x28>
 1023ab4:	d0a6ac04 	addi	r2,gp,-25936
}
 1023ab8:	e037883a 	mov	sp,fp
 1023abc:	dfc00117 	ldw	ra,4(sp)
 1023ac0:	df000017 	ldw	fp,0(sp)
 1023ac4:	dec00204 	addi	sp,sp,8
 1023ac8:	f800283a 	ret

01023acc <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 1023acc:	deffed04 	addi	sp,sp,-76
 1023ad0:	dfc01215 	stw	ra,72(sp)
 1023ad4:	df001115 	stw	fp,68(sp)
 1023ad8:	df001104 	addi	fp,sp,68
 1023adc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1023ae0:	e0bfff17 	ldw	r2,-4(fp)
 1023ae4:	10000616 	blt	r2,zero,1023b00 <isatty+0x34>
 1023ae8:	e0bfff17 	ldw	r2,-4(fp)
 1023aec:	10c00324 	muli	r3,r2,12
 1023af0:	008040b4 	movhi	r2,258
 1023af4:	109a9b04 	addi	r2,r2,27244
 1023af8:	1885883a 	add	r2,r3,r2
 1023afc:	00000106 	br	1023b04 <isatty+0x38>
 1023b00:	0005883a 	mov	r2,zero
 1023b04:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 1023b08:	e0bfef17 	ldw	r2,-68(fp)
 1023b0c:	10000e26 	beq	r2,zero,1023b48 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 1023b10:	e0bfef17 	ldw	r2,-68(fp)
 1023b14:	10800017 	ldw	r2,0(r2)
 1023b18:	10800817 	ldw	r2,32(r2)
 1023b1c:	1000021e 	bne	r2,zero,1023b28 <isatty+0x5c>
    {
      return 1;
 1023b20:	00800044 	movi	r2,1
 1023b24:	00000d06 	br	1023b5c <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 1023b28:	e0bff004 	addi	r2,fp,-64
 1023b2c:	100b883a 	mov	r5,r2
 1023b30:	e13fff17 	ldw	r4,-4(fp)
 1023b34:	10239e00 	call	10239e0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 1023b38:	e0bff117 	ldw	r2,-60(fp)
 1023b3c:	10880020 	cmpeqi	r2,r2,8192
 1023b40:	10803fcc 	andi	r2,r2,255
 1023b44:	00000506 	br	1023b5c <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 1023b48:	1023a900 	call	1023a90 <alt_get_errno>
 1023b4c:	1007883a 	mov	r3,r2
 1023b50:	00801444 	movi	r2,81
 1023b54:	18800015 	stw	r2,0(r3)
    return 0;
 1023b58:	0005883a 	mov	r2,zero
  }
}
 1023b5c:	e037883a 	mov	sp,fp
 1023b60:	dfc00117 	ldw	ra,4(sp)
 1023b64:	df000017 	ldw	fp,0(sp)
 1023b68:	dec00204 	addi	sp,sp,8
 1023b6c:	f800283a 	ret

01023b70 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 1023b70:	defffc04 	addi	sp,sp,-16
 1023b74:	df000315 	stw	fp,12(sp)
 1023b78:	df000304 	addi	fp,sp,12
 1023b7c:	e13ffd15 	stw	r4,-12(fp)
 1023b80:	e17ffe15 	stw	r5,-8(fp)
 1023b84:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 1023b88:	e0fffe17 	ldw	r3,-8(fp)
 1023b8c:	e0bffd17 	ldw	r2,-12(fp)
 1023b90:	18800c26 	beq	r3,r2,1023bc4 <alt_load_section+0x54>
  {
    while( to != end )
 1023b94:	00000806 	br	1023bb8 <alt_load_section+0x48>
    {
      *to++ = *from++;
 1023b98:	e0bffe17 	ldw	r2,-8(fp)
 1023b9c:	10c00104 	addi	r3,r2,4
 1023ba0:	e0fffe15 	stw	r3,-8(fp)
 1023ba4:	e0fffd17 	ldw	r3,-12(fp)
 1023ba8:	19000104 	addi	r4,r3,4
 1023bac:	e13ffd15 	stw	r4,-12(fp)
 1023bb0:	18c00017 	ldw	r3,0(r3)
 1023bb4:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 1023bb8:	e0fffe17 	ldw	r3,-8(fp)
 1023bbc:	e0bfff17 	ldw	r2,-4(fp)
 1023bc0:	18bff51e 	bne	r3,r2,1023b98 <__alt_data_end+0xfffe66d8>
    {
      *to++ = *from++;
    }
  }
}
 1023bc4:	0001883a 	nop
 1023bc8:	e037883a 	mov	sp,fp
 1023bcc:	df000017 	ldw	fp,0(sp)
 1023bd0:	dec00104 	addi	sp,sp,4
 1023bd4:	f800283a 	ret

01023bd8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 1023bd8:	defffe04 	addi	sp,sp,-8
 1023bdc:	dfc00115 	stw	ra,4(sp)
 1023be0:	df000015 	stw	fp,0(sp)
 1023be4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 1023be8:	018040b4 	movhi	r6,258
 1023bec:	319f2104 	addi	r6,r6,31876
 1023bf0:	014040b4 	movhi	r5,258
 1023bf4:	29588604 	addi	r5,r5,25112
 1023bf8:	010040b4 	movhi	r4,258
 1023bfc:	211f2104 	addi	r4,r4,31876
 1023c00:	1023b700 	call	1023b70 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 1023c04:	018040b4 	movhi	r6,258
 1023c08:	31809104 	addi	r6,r6,580
 1023c0c:	014040b4 	movhi	r5,258
 1023c10:	29400804 	addi	r5,r5,32
 1023c14:	010040b4 	movhi	r4,258
 1023c18:	21000804 	addi	r4,r4,32
 1023c1c:	1023b700 	call	1023b70 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 1023c20:	018040b4 	movhi	r6,258
 1023c24:	31988604 	addi	r6,r6,25112
 1023c28:	014040b4 	movhi	r5,258
 1023c2c:	29586804 	addi	r5,r5,24992
 1023c30:	010040b4 	movhi	r4,258
 1023c34:	21186804 	addi	r4,r4,24992
 1023c38:	1023b700 	call	1023b70 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 1023c3c:	102508c0 	call	102508c <alt_dcache_flush_all>
  alt_icache_flush_all();
 1023c40:	10252740 	call	1025274 <alt_icache_flush_all>
}
 1023c44:	0001883a 	nop
 1023c48:	e037883a 	mov	sp,fp
 1023c4c:	dfc00117 	ldw	ra,4(sp)
 1023c50:	df000017 	ldw	fp,0(sp)
 1023c54:	dec00204 	addi	sp,sp,8
 1023c58:	f800283a 	ret

01023c5c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1023c5c:	defffe04 	addi	sp,sp,-8
 1023c60:	dfc00115 	stw	ra,4(sp)
 1023c64:	df000015 	stw	fp,0(sp)
 1023c68:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1023c6c:	d0a00917 	ldw	r2,-32732(gp)
 1023c70:	10000326 	beq	r2,zero,1023c80 <alt_get_errno+0x24>
 1023c74:	d0a00917 	ldw	r2,-32732(gp)
 1023c78:	103ee83a 	callr	r2
 1023c7c:	00000106 	br	1023c84 <alt_get_errno+0x28>
 1023c80:	d0a6ac04 	addi	r2,gp,-25936
}
 1023c84:	e037883a 	mov	sp,fp
 1023c88:	dfc00117 	ldw	ra,4(sp)
 1023c8c:	df000017 	ldw	fp,0(sp)
 1023c90:	dec00204 	addi	sp,sp,8
 1023c94:	f800283a 	ret

01023c98 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 1023c98:	defff904 	addi	sp,sp,-28
 1023c9c:	dfc00615 	stw	ra,24(sp)
 1023ca0:	df000515 	stw	fp,20(sp)
 1023ca4:	df000504 	addi	fp,sp,20
 1023ca8:	e13ffd15 	stw	r4,-12(fp)
 1023cac:	e17ffe15 	stw	r5,-8(fp)
 1023cb0:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 1023cb4:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1023cb8:	e0bffd17 	ldw	r2,-12(fp)
 1023cbc:	10000616 	blt	r2,zero,1023cd8 <lseek+0x40>
 1023cc0:	e0bffd17 	ldw	r2,-12(fp)
 1023cc4:	10c00324 	muli	r3,r2,12
 1023cc8:	008040b4 	movhi	r2,258
 1023ccc:	109a9b04 	addi	r2,r2,27244
 1023cd0:	1885883a 	add	r2,r3,r2
 1023cd4:	00000106 	br	1023cdc <lseek+0x44>
 1023cd8:	0005883a 	mov	r2,zero
 1023cdc:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 1023ce0:	e0bffc17 	ldw	r2,-16(fp)
 1023ce4:	10001026 	beq	r2,zero,1023d28 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 1023ce8:	e0bffc17 	ldw	r2,-16(fp)
 1023cec:	10800017 	ldw	r2,0(r2)
 1023cf0:	10800717 	ldw	r2,28(r2)
 1023cf4:	10000926 	beq	r2,zero,1023d1c <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 1023cf8:	e0bffc17 	ldw	r2,-16(fp)
 1023cfc:	10800017 	ldw	r2,0(r2)
 1023d00:	10800717 	ldw	r2,28(r2)
 1023d04:	e1bfff17 	ldw	r6,-4(fp)
 1023d08:	e17ffe17 	ldw	r5,-8(fp)
 1023d0c:	e13ffc17 	ldw	r4,-16(fp)
 1023d10:	103ee83a 	callr	r2
 1023d14:	e0bffb15 	stw	r2,-20(fp)
 1023d18:	00000506 	br	1023d30 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 1023d1c:	00bfde84 	movi	r2,-134
 1023d20:	e0bffb15 	stw	r2,-20(fp)
 1023d24:	00000206 	br	1023d30 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 1023d28:	00bfebc4 	movi	r2,-81
 1023d2c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 1023d30:	e0bffb17 	ldw	r2,-20(fp)
 1023d34:	1000070e 	bge	r2,zero,1023d54 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 1023d38:	1023c5c0 	call	1023c5c <alt_get_errno>
 1023d3c:	1007883a 	mov	r3,r2
 1023d40:	e0bffb17 	ldw	r2,-20(fp)
 1023d44:	0085c83a 	sub	r2,zero,r2
 1023d48:	18800015 	stw	r2,0(r3)
    rc = -1;
 1023d4c:	00bfffc4 	movi	r2,-1
 1023d50:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 1023d54:	e0bffb17 	ldw	r2,-20(fp)
}
 1023d58:	e037883a 	mov	sp,fp
 1023d5c:	dfc00117 	ldw	ra,4(sp)
 1023d60:	df000017 	ldw	fp,0(sp)
 1023d64:	dec00204 	addi	sp,sp,8
 1023d68:	f800283a 	ret

01023d6c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 1023d6c:	defffd04 	addi	sp,sp,-12
 1023d70:	dfc00215 	stw	ra,8(sp)
 1023d74:	df000115 	stw	fp,4(sp)
 1023d78:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 1023d7c:	0009883a 	mov	r4,zero
 1023d80:	10242140 	call	1024214 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 1023d84:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 1023d88:	102424c0 	call	102424c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 1023d8c:	018040b4 	movhi	r6,258
 1023d90:	31987e04 	addi	r6,r6,25080
 1023d94:	014040b4 	movhi	r5,258
 1023d98:	29587e04 	addi	r5,r5,25080
 1023d9c:	010040b4 	movhi	r4,258
 1023da0:	21187e04 	addi	r4,r4,25080
 1023da4:	102560c0 	call	102560c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 1023da8:	10251b40 	call	10251b4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 1023dac:	010040b4 	movhi	r4,258
 1023db0:	21148504 	addi	r4,r4,21012
 1023db4:	1025e0c0 	call	1025e0c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 1023db8:	d0a6ad17 	ldw	r2,-25932(gp)
 1023dbc:	d0e6ae17 	ldw	r3,-25928(gp)
 1023dc0:	d126af17 	ldw	r4,-25924(gp)
 1023dc4:	200d883a 	mov	r6,r4
 1023dc8:	180b883a 	mov	r5,r3
 1023dcc:	1009883a 	mov	r4,r2
 1023dd0:	10205080 	call	1020508 <main>
 1023dd4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 1023dd8:	01000044 	movi	r4,1
 1023ddc:	10238a80 	call	10238a8 <close>
  exit (result);
 1023de0:	e13fff17 	ldw	r4,-4(fp)
 1023de4:	1025e200 	call	1025e20 <exit>

01023de8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 1023de8:	defffe04 	addi	sp,sp,-8
 1023dec:	df000115 	stw	fp,4(sp)
 1023df0:	df000104 	addi	fp,sp,4
 1023df4:	e13fff15 	stw	r4,-4(fp)
}
 1023df8:	0001883a 	nop
 1023dfc:	e037883a 	mov	sp,fp
 1023e00:	df000017 	ldw	fp,0(sp)
 1023e04:	dec00104 	addi	sp,sp,4
 1023e08:	f800283a 	ret

01023e0c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 1023e0c:	defffe04 	addi	sp,sp,-8
 1023e10:	df000115 	stw	fp,4(sp)
 1023e14:	df000104 	addi	fp,sp,4
 1023e18:	e13fff15 	stw	r4,-4(fp)
}
 1023e1c:	0001883a 	nop
 1023e20:	e037883a 	mov	sp,fp
 1023e24:	df000017 	ldw	fp,0(sp)
 1023e28:	dec00104 	addi	sp,sp,4
 1023e2c:	f800283a 	ret

01023e30 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1023e30:	defffe04 	addi	sp,sp,-8
 1023e34:	dfc00115 	stw	ra,4(sp)
 1023e38:	df000015 	stw	fp,0(sp)
 1023e3c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1023e40:	d0a00917 	ldw	r2,-32732(gp)
 1023e44:	10000326 	beq	r2,zero,1023e54 <alt_get_errno+0x24>
 1023e48:	d0a00917 	ldw	r2,-32732(gp)
 1023e4c:	103ee83a 	callr	r2
 1023e50:	00000106 	br	1023e58 <alt_get_errno+0x28>
 1023e54:	d0a6ac04 	addi	r2,gp,-25936
}
 1023e58:	e037883a 	mov	sp,fp
 1023e5c:	dfc00117 	ldw	ra,4(sp)
 1023e60:	df000017 	ldw	fp,0(sp)
 1023e64:	dec00204 	addi	sp,sp,8
 1023e68:	f800283a 	ret

01023e6c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 1023e6c:	defff904 	addi	sp,sp,-28
 1023e70:	dfc00615 	stw	ra,24(sp)
 1023e74:	df000515 	stw	fp,20(sp)
 1023e78:	df000504 	addi	fp,sp,20
 1023e7c:	e13ffd15 	stw	r4,-12(fp)
 1023e80:	e17ffe15 	stw	r5,-8(fp)
 1023e84:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1023e88:	e0bffd17 	ldw	r2,-12(fp)
 1023e8c:	10000616 	blt	r2,zero,1023ea8 <read+0x3c>
 1023e90:	e0bffd17 	ldw	r2,-12(fp)
 1023e94:	10c00324 	muli	r3,r2,12
 1023e98:	008040b4 	movhi	r2,258
 1023e9c:	109a9b04 	addi	r2,r2,27244
 1023ea0:	1885883a 	add	r2,r3,r2
 1023ea4:	00000106 	br	1023eac <read+0x40>
 1023ea8:	0005883a 	mov	r2,zero
 1023eac:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 1023eb0:	e0bffb17 	ldw	r2,-20(fp)
 1023eb4:	10002226 	beq	r2,zero,1023f40 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 1023eb8:	e0bffb17 	ldw	r2,-20(fp)
 1023ebc:	10800217 	ldw	r2,8(r2)
 1023ec0:	108000cc 	andi	r2,r2,3
 1023ec4:	10800060 	cmpeqi	r2,r2,1
 1023ec8:	1000181e 	bne	r2,zero,1023f2c <read+0xc0>
        (fd->dev->read))
 1023ecc:	e0bffb17 	ldw	r2,-20(fp)
 1023ed0:	10800017 	ldw	r2,0(r2)
 1023ed4:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 1023ed8:	10001426 	beq	r2,zero,1023f2c <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 1023edc:	e0bffb17 	ldw	r2,-20(fp)
 1023ee0:	10800017 	ldw	r2,0(r2)
 1023ee4:	10800517 	ldw	r2,20(r2)
 1023ee8:	e0ffff17 	ldw	r3,-4(fp)
 1023eec:	180d883a 	mov	r6,r3
 1023ef0:	e17ffe17 	ldw	r5,-8(fp)
 1023ef4:	e13ffb17 	ldw	r4,-20(fp)
 1023ef8:	103ee83a 	callr	r2
 1023efc:	e0bffc15 	stw	r2,-16(fp)
 1023f00:	e0bffc17 	ldw	r2,-16(fp)
 1023f04:	1000070e 	bge	r2,zero,1023f24 <read+0xb8>
        {
          ALT_ERRNO = -rval;
 1023f08:	1023e300 	call	1023e30 <alt_get_errno>
 1023f0c:	1007883a 	mov	r3,r2
 1023f10:	e0bffc17 	ldw	r2,-16(fp)
 1023f14:	0085c83a 	sub	r2,zero,r2
 1023f18:	18800015 	stw	r2,0(r3)
          return -1;
 1023f1c:	00bfffc4 	movi	r2,-1
 1023f20:	00000c06 	br	1023f54 <read+0xe8>
        }
        return rval;
 1023f24:	e0bffc17 	ldw	r2,-16(fp)
 1023f28:	00000a06 	br	1023f54 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 1023f2c:	1023e300 	call	1023e30 <alt_get_errno>
 1023f30:	1007883a 	mov	r3,r2
 1023f34:	00800344 	movi	r2,13
 1023f38:	18800015 	stw	r2,0(r3)
 1023f3c:	00000406 	br	1023f50 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 1023f40:	1023e300 	call	1023e30 <alt_get_errno>
 1023f44:	1007883a 	mov	r3,r2
 1023f48:	00801444 	movi	r2,81
 1023f4c:	18800015 	stw	r2,0(r3)
  }
  return -1;
 1023f50:	00bfffc4 	movi	r2,-1
}
 1023f54:	e037883a 	mov	sp,fp
 1023f58:	dfc00117 	ldw	ra,4(sp)
 1023f5c:	df000017 	ldw	fp,0(sp)
 1023f60:	dec00204 	addi	sp,sp,8
 1023f64:	f800283a 	ret

01023f68 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 1023f68:	defffe04 	addi	sp,sp,-8
 1023f6c:	df000115 	stw	fp,4(sp)
 1023f70:	df000104 	addi	fp,sp,4
 1023f74:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 1023f78:	e0bfff17 	ldw	r2,-4(fp)
 1023f7c:	108000d0 	cmplti	r2,r2,3
 1023f80:	10000d1e 	bne	r2,zero,1023fb8 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 1023f84:	008040b4 	movhi	r2,258
 1023f88:	109a9b04 	addi	r2,r2,27244
 1023f8c:	e0ffff17 	ldw	r3,-4(fp)
 1023f90:	18c00324 	muli	r3,r3,12
 1023f94:	10c5883a 	add	r2,r2,r3
 1023f98:	10800204 	addi	r2,r2,8
 1023f9c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 1023fa0:	008040b4 	movhi	r2,258
 1023fa4:	109a9b04 	addi	r2,r2,27244
 1023fa8:	e0ffff17 	ldw	r3,-4(fp)
 1023fac:	18c00324 	muli	r3,r3,12
 1023fb0:	10c5883a 	add	r2,r2,r3
 1023fb4:	10000015 	stw	zero,0(r2)
  }
}
 1023fb8:	0001883a 	nop
 1023fbc:	e037883a 	mov	sp,fp
 1023fc0:	df000017 	ldw	fp,0(sp)
 1023fc4:	dec00104 	addi	sp,sp,4
 1023fc8:	f800283a 	ret

01023fcc <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 1023fcc:	defff904 	addi	sp,sp,-28
 1023fd0:	df000615 	stw	fp,24(sp)
 1023fd4:	df000604 	addi	fp,sp,24
 1023fd8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1023fdc:	0005303a 	rdctl	r2,status
 1023fe0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1023fe4:	e0fffe17 	ldw	r3,-8(fp)
 1023fe8:	00bfff84 	movi	r2,-2
 1023fec:	1884703a 	and	r2,r3,r2
 1023ff0:	1001703a 	wrctl	status,r2
  
  return context;
 1023ff4:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 1023ff8:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 1023ffc:	d0a00a17 	ldw	r2,-32728(gp)
 1024000:	10c000c4 	addi	r3,r2,3
 1024004:	00bfff04 	movi	r2,-4
 1024008:	1884703a 	and	r2,r3,r2
 102400c:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 1024010:	d0e00a17 	ldw	r3,-32728(gp)
 1024014:	e0bfff17 	ldw	r2,-4(fp)
 1024018:	1887883a 	add	r3,r3,r2
 102401c:	00804134 	movhi	r2,260
 1024020:	10b53004 	addi	r2,r2,-11072
 1024024:	10c0062e 	bgeu	r2,r3,1024040 <sbrk+0x74>
 1024028:	e0bffb17 	ldw	r2,-20(fp)
 102402c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1024030:	e0bffa17 	ldw	r2,-24(fp)
 1024034:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 1024038:	00bfffc4 	movi	r2,-1
 102403c:	00000b06 	br	102406c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 1024040:	d0a00a17 	ldw	r2,-32728(gp)
 1024044:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 1024048:	d0e00a17 	ldw	r3,-32728(gp)
 102404c:	e0bfff17 	ldw	r2,-4(fp)
 1024050:	1885883a 	add	r2,r3,r2
 1024054:	d0a00a15 	stw	r2,-32728(gp)
 1024058:	e0bffb17 	ldw	r2,-20(fp)
 102405c:	e0bffc15 	stw	r2,-16(fp)
 1024060:	e0bffc17 	ldw	r2,-16(fp)
 1024064:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 1024068:	e0bffd17 	ldw	r2,-12(fp)
} 
 102406c:	e037883a 	mov	sp,fp
 1024070:	df000017 	ldw	fp,0(sp)
 1024074:	dec00104 	addi	sp,sp,4
 1024078:	f800283a 	ret

0102407c <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 102407c:	defffd04 	addi	sp,sp,-12
 1024080:	dfc00215 	stw	ra,8(sp)
 1024084:	df000115 	stw	fp,4(sp)
 1024088:	df000104 	addi	fp,sp,4
 102408c:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 1024090:	e13fff17 	ldw	r4,-4(fp)
 1024094:	1024f340 	call	1024f34 <alt_busy_sleep>
}
 1024098:	e037883a 	mov	sp,fp
 102409c:	dfc00117 	ldw	ra,4(sp)
 10240a0:	df000017 	ldw	fp,0(sp)
 10240a4:	dec00204 	addi	sp,sp,8
 10240a8:	f800283a 	ret

010240ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 10240ac:	defffe04 	addi	sp,sp,-8
 10240b0:	dfc00115 	stw	ra,4(sp)
 10240b4:	df000015 	stw	fp,0(sp)
 10240b8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 10240bc:	d0a00917 	ldw	r2,-32732(gp)
 10240c0:	10000326 	beq	r2,zero,10240d0 <alt_get_errno+0x24>
 10240c4:	d0a00917 	ldw	r2,-32732(gp)
 10240c8:	103ee83a 	callr	r2
 10240cc:	00000106 	br	10240d4 <alt_get_errno+0x28>
 10240d0:	d0a6ac04 	addi	r2,gp,-25936
}
 10240d4:	e037883a 	mov	sp,fp
 10240d8:	dfc00117 	ldw	ra,4(sp)
 10240dc:	df000017 	ldw	fp,0(sp)
 10240e0:	dec00204 	addi	sp,sp,8
 10240e4:	f800283a 	ret

010240e8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 10240e8:	defff904 	addi	sp,sp,-28
 10240ec:	dfc00615 	stw	ra,24(sp)
 10240f0:	df000515 	stw	fp,20(sp)
 10240f4:	df000504 	addi	fp,sp,20
 10240f8:	e13ffd15 	stw	r4,-12(fp)
 10240fc:	e17ffe15 	stw	r5,-8(fp)
 1024100:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1024104:	e0bffd17 	ldw	r2,-12(fp)
 1024108:	10000616 	blt	r2,zero,1024124 <write+0x3c>
 102410c:	e0bffd17 	ldw	r2,-12(fp)
 1024110:	10c00324 	muli	r3,r2,12
 1024114:	008040b4 	movhi	r2,258
 1024118:	109a9b04 	addi	r2,r2,27244
 102411c:	1885883a 	add	r2,r3,r2
 1024120:	00000106 	br	1024128 <write+0x40>
 1024124:	0005883a 	mov	r2,zero
 1024128:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 102412c:	e0bffb17 	ldw	r2,-20(fp)
 1024130:	10002126 	beq	r2,zero,10241b8 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 1024134:	e0bffb17 	ldw	r2,-20(fp)
 1024138:	10800217 	ldw	r2,8(r2)
 102413c:	108000cc 	andi	r2,r2,3
 1024140:	10001826 	beq	r2,zero,10241a4 <write+0xbc>
 1024144:	e0bffb17 	ldw	r2,-20(fp)
 1024148:	10800017 	ldw	r2,0(r2)
 102414c:	10800617 	ldw	r2,24(r2)
 1024150:	10001426 	beq	r2,zero,10241a4 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 1024154:	e0bffb17 	ldw	r2,-20(fp)
 1024158:	10800017 	ldw	r2,0(r2)
 102415c:	10800617 	ldw	r2,24(r2)
 1024160:	e0ffff17 	ldw	r3,-4(fp)
 1024164:	180d883a 	mov	r6,r3
 1024168:	e17ffe17 	ldw	r5,-8(fp)
 102416c:	e13ffb17 	ldw	r4,-20(fp)
 1024170:	103ee83a 	callr	r2
 1024174:	e0bffc15 	stw	r2,-16(fp)
 1024178:	e0bffc17 	ldw	r2,-16(fp)
 102417c:	1000070e 	bge	r2,zero,102419c <write+0xb4>
      {
        ALT_ERRNO = -rval;
 1024180:	10240ac0 	call	10240ac <alt_get_errno>
 1024184:	1007883a 	mov	r3,r2
 1024188:	e0bffc17 	ldw	r2,-16(fp)
 102418c:	0085c83a 	sub	r2,zero,r2
 1024190:	18800015 	stw	r2,0(r3)
        return -1;
 1024194:	00bfffc4 	movi	r2,-1
 1024198:	00000c06 	br	10241cc <write+0xe4>
      }
      return rval;
 102419c:	e0bffc17 	ldw	r2,-16(fp)
 10241a0:	00000a06 	br	10241cc <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 10241a4:	10240ac0 	call	10240ac <alt_get_errno>
 10241a8:	1007883a 	mov	r3,r2
 10241ac:	00800344 	movi	r2,13
 10241b0:	18800015 	stw	r2,0(r3)
 10241b4:	00000406 	br	10241c8 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 10241b8:	10240ac0 	call	10240ac <alt_get_errno>
 10241bc:	1007883a 	mov	r3,r2
 10241c0:	00801444 	movi	r2,81
 10241c4:	18800015 	stw	r2,0(r3)
  }
  return -1;
 10241c8:	00bfffc4 	movi	r2,-1
}
 10241cc:	e037883a 	mov	sp,fp
 10241d0:	dfc00117 	ldw	ra,4(sp)
 10241d4:	df000017 	ldw	fp,0(sp)
 10241d8:	dec00204 	addi	sp,sp,8
 10241dc:	f800283a 	ret

010241e0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 10241e0:	defffd04 	addi	sp,sp,-12
 10241e4:	dfc00215 	stw	ra,8(sp)
 10241e8:	df000115 	stw	fp,4(sp)
 10241ec:	df000104 	addi	fp,sp,4
 10241f0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 10241f4:	d1600604 	addi	r5,gp,-32744
 10241f8:	e13fff17 	ldw	r4,-4(fp)
 10241fc:	10251100 	call	1025110 <alt_dev_llist_insert>
}
 1024200:	e037883a 	mov	sp,fp
 1024204:	dfc00117 	ldw	ra,4(sp)
 1024208:	df000017 	ldw	fp,0(sp)
 102420c:	dec00204 	addi	sp,sp,8
 1024210:	f800283a 	ret

01024214 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 1024214:	defffd04 	addi	sp,sp,-12
 1024218:	dfc00215 	stw	ra,8(sp)
 102421c:	df000115 	stw	fp,4(sp)
 1024220:	df000104 	addi	fp,sp,4
 1024224:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2, nios2_gen2);
 1024228:	1025a800 	call	1025a80 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 102422c:	00800044 	movi	r2,1
 1024230:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 1024234:	0001883a 	nop
 1024238:	e037883a 	mov	sp,fp
 102423c:	dfc00117 	ldw	ra,4(sp)
 1024240:	df000017 	ldw	fp,0(sp)
 1024244:	dec00204 	addi	sp,sp,8
 1024248:	f800283a 	ret

0102424c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 102424c:	defffe04 	addi	sp,sp,-8
 1024250:	dfc00115 	stw	ra,4(sp)
 1024254:	df000015 	stw	fp,0(sp)
 1024258:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
 102425c:	01c0fa04 	movi	r7,1000
 1024260:	01800044 	movi	r6,1
 1024264:	000b883a 	mov	r5,zero
 1024268:	0009883a 	mov	r4,zero
 102426c:	1024d8c0 	call	1024d8c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 1024270:	000d883a 	mov	r6,zero
 1024274:	000b883a 	mov	r5,zero
 1024278:	010040b4 	movhi	r4,258
 102427c:	211b0504 	addi	r4,r4,27668
 1024280:	10244100 	call	1024410 <altera_avalon_jtag_uart_init>
 1024284:	010040b4 	movhi	r4,258
 1024288:	211afb04 	addi	r4,r4,27628
 102428c:	10241e00 	call	10241e0 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
 1024290:	0001883a 	nop
}
 1024294:	0001883a 	nop
 1024298:	e037883a 	mov	sp,fp
 102429c:	dfc00117 	ldw	ra,4(sp)
 10242a0:	df000017 	ldw	fp,0(sp)
 10242a4:	dec00204 	addi	sp,sp,8
 10242a8:	f800283a 	ret

010242ac <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 10242ac:	defffa04 	addi	sp,sp,-24
 10242b0:	dfc00515 	stw	ra,20(sp)
 10242b4:	df000415 	stw	fp,16(sp)
 10242b8:	df000404 	addi	fp,sp,16
 10242bc:	e13ffd15 	stw	r4,-12(fp)
 10242c0:	e17ffe15 	stw	r5,-8(fp)
 10242c4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 10242c8:	e0bffd17 	ldw	r2,-12(fp)
 10242cc:	10800017 	ldw	r2,0(r2)
 10242d0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 10242d4:	e0bffc17 	ldw	r2,-16(fp)
 10242d8:	10c00a04 	addi	r3,r2,40
 10242dc:	e0bffd17 	ldw	r2,-12(fp)
 10242e0:	10800217 	ldw	r2,8(r2)
 10242e4:	100f883a 	mov	r7,r2
 10242e8:	e1bfff17 	ldw	r6,-4(fp)
 10242ec:	e17ffe17 	ldw	r5,-8(fp)
 10242f0:	1809883a 	mov	r4,r3
 10242f4:	10248d40 	call	10248d4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 10242f8:	e037883a 	mov	sp,fp
 10242fc:	dfc00117 	ldw	ra,4(sp)
 1024300:	df000017 	ldw	fp,0(sp)
 1024304:	dec00204 	addi	sp,sp,8
 1024308:	f800283a 	ret

0102430c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 102430c:	defffa04 	addi	sp,sp,-24
 1024310:	dfc00515 	stw	ra,20(sp)
 1024314:	df000415 	stw	fp,16(sp)
 1024318:	df000404 	addi	fp,sp,16
 102431c:	e13ffd15 	stw	r4,-12(fp)
 1024320:	e17ffe15 	stw	r5,-8(fp)
 1024324:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 1024328:	e0bffd17 	ldw	r2,-12(fp)
 102432c:	10800017 	ldw	r2,0(r2)
 1024330:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 1024334:	e0bffc17 	ldw	r2,-16(fp)
 1024338:	10c00a04 	addi	r3,r2,40
 102433c:	e0bffd17 	ldw	r2,-12(fp)
 1024340:	10800217 	ldw	r2,8(r2)
 1024344:	100f883a 	mov	r7,r2
 1024348:	e1bfff17 	ldw	r6,-4(fp)
 102434c:	e17ffe17 	ldw	r5,-8(fp)
 1024350:	1809883a 	mov	r4,r3
 1024354:	1024af00 	call	1024af0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 1024358:	e037883a 	mov	sp,fp
 102435c:	dfc00117 	ldw	ra,4(sp)
 1024360:	df000017 	ldw	fp,0(sp)
 1024364:	dec00204 	addi	sp,sp,8
 1024368:	f800283a 	ret

0102436c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 102436c:	defffc04 	addi	sp,sp,-16
 1024370:	dfc00315 	stw	ra,12(sp)
 1024374:	df000215 	stw	fp,8(sp)
 1024378:	df000204 	addi	fp,sp,8
 102437c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 1024380:	e0bfff17 	ldw	r2,-4(fp)
 1024384:	10800017 	ldw	r2,0(r2)
 1024388:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 102438c:	e0bffe17 	ldw	r2,-8(fp)
 1024390:	10c00a04 	addi	r3,r2,40
 1024394:	e0bfff17 	ldw	r2,-4(fp)
 1024398:	10800217 	ldw	r2,8(r2)
 102439c:	100b883a 	mov	r5,r2
 10243a0:	1809883a 	mov	r4,r3
 10243a4:	102477c0 	call	102477c <altera_avalon_jtag_uart_close>
}
 10243a8:	e037883a 	mov	sp,fp
 10243ac:	dfc00117 	ldw	ra,4(sp)
 10243b0:	df000017 	ldw	fp,0(sp)
 10243b4:	dec00204 	addi	sp,sp,8
 10243b8:	f800283a 	ret

010243bc <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 10243bc:	defffa04 	addi	sp,sp,-24
 10243c0:	dfc00515 	stw	ra,20(sp)
 10243c4:	df000415 	stw	fp,16(sp)
 10243c8:	df000404 	addi	fp,sp,16
 10243cc:	e13ffd15 	stw	r4,-12(fp)
 10243d0:	e17ffe15 	stw	r5,-8(fp)
 10243d4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 10243d8:	e0bffd17 	ldw	r2,-12(fp)
 10243dc:	10800017 	ldw	r2,0(r2)
 10243e0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 10243e4:	e0bffc17 	ldw	r2,-16(fp)
 10243e8:	10800a04 	addi	r2,r2,40
 10243ec:	e1bfff17 	ldw	r6,-4(fp)
 10243f0:	e17ffe17 	ldw	r5,-8(fp)
 10243f4:	1009883a 	mov	r4,r2
 10243f8:	10247e40 	call	10247e4 <altera_avalon_jtag_uart_ioctl>
}
 10243fc:	e037883a 	mov	sp,fp
 1024400:	dfc00117 	ldw	ra,4(sp)
 1024404:	df000017 	ldw	fp,0(sp)
 1024408:	dec00204 	addi	sp,sp,8
 102440c:	f800283a 	ret

01024410 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 1024410:	defffa04 	addi	sp,sp,-24
 1024414:	dfc00515 	stw	ra,20(sp)
 1024418:	df000415 	stw	fp,16(sp)
 102441c:	df000404 	addi	fp,sp,16
 1024420:	e13ffd15 	stw	r4,-12(fp)
 1024424:	e17ffe15 	stw	r5,-8(fp)
 1024428:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 102442c:	e0bffd17 	ldw	r2,-12(fp)
 1024430:	00c00044 	movi	r3,1
 1024434:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 1024438:	e0bffd17 	ldw	r2,-12(fp)
 102443c:	10800017 	ldw	r2,0(r2)
 1024440:	10800104 	addi	r2,r2,4
 1024444:	1007883a 	mov	r3,r2
 1024448:	e0bffd17 	ldw	r2,-12(fp)
 102444c:	10800817 	ldw	r2,32(r2)
 1024450:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 1024454:	e0bffe17 	ldw	r2,-8(fp)
 1024458:	e0ffff17 	ldw	r3,-4(fp)
 102445c:	d8000015 	stw	zero,0(sp)
 1024460:	e1fffd17 	ldw	r7,-12(fp)
 1024464:	018040b4 	movhi	r6,258
 1024468:	31913404 	addi	r6,r6,17616
 102446c:	180b883a 	mov	r5,r3
 1024470:	1009883a 	mov	r4,r2
 1024474:	10252a80 	call	10252a8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 1024478:	e0bffd17 	ldw	r2,-12(fp)
 102447c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 1024480:	e0bffd17 	ldw	r2,-12(fp)
 1024484:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 1024488:	d0e6b117 	ldw	r3,-25916(gp)
 102448c:	e1fffd17 	ldw	r7,-12(fp)
 1024490:	018040b4 	movhi	r6,258
 1024494:	3191b704 	addi	r6,r6,18140
 1024498:	180b883a 	mov	r5,r3
 102449c:	1009883a 	mov	r4,r2
 10244a0:	1024e080 	call	1024e08 <alt_alarm_start>
 10244a4:	1000040e 	bge	r2,zero,10244b8 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 10244a8:	e0fffd17 	ldw	r3,-12(fp)
 10244ac:	00a00034 	movhi	r2,32768
 10244b0:	10bfffc4 	addi	r2,r2,-1
 10244b4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 10244b8:	0001883a 	nop
 10244bc:	e037883a 	mov	sp,fp
 10244c0:	dfc00117 	ldw	ra,4(sp)
 10244c4:	df000017 	ldw	fp,0(sp)
 10244c8:	dec00204 	addi	sp,sp,8
 10244cc:	f800283a 	ret

010244d0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 10244d0:	defff804 	addi	sp,sp,-32
 10244d4:	df000715 	stw	fp,28(sp)
 10244d8:	df000704 	addi	fp,sp,28
 10244dc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 10244e0:	e0bfff17 	ldw	r2,-4(fp)
 10244e4:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 10244e8:	e0bffb17 	ldw	r2,-20(fp)
 10244ec:	10800017 	ldw	r2,0(r2)
 10244f0:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 10244f4:	e0bffc17 	ldw	r2,-16(fp)
 10244f8:	10800104 	addi	r2,r2,4
 10244fc:	10800037 	ldwio	r2,0(r2)
 1024500:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 1024504:	e0bffd17 	ldw	r2,-12(fp)
 1024508:	1080c00c 	andi	r2,r2,768
 102450c:	10006d26 	beq	r2,zero,10246c4 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 1024510:	e0bffd17 	ldw	r2,-12(fp)
 1024514:	1080400c 	andi	r2,r2,256
 1024518:	10003526 	beq	r2,zero,10245f0 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 102451c:	00800074 	movhi	r2,1
 1024520:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1024524:	e0bffb17 	ldw	r2,-20(fp)
 1024528:	10800a17 	ldw	r2,40(r2)
 102452c:	10800044 	addi	r2,r2,1
 1024530:	1081ffcc 	andi	r2,r2,2047
 1024534:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 1024538:	e0bffb17 	ldw	r2,-20(fp)
 102453c:	10c00b17 	ldw	r3,44(r2)
 1024540:	e0bffe17 	ldw	r2,-8(fp)
 1024544:	18801526 	beq	r3,r2,102459c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 1024548:	e0bffc17 	ldw	r2,-16(fp)
 102454c:	10800037 	ldwio	r2,0(r2)
 1024550:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 1024554:	e0bff917 	ldw	r2,-28(fp)
 1024558:	10a0000c 	andi	r2,r2,32768
 102455c:	10001126 	beq	r2,zero,10245a4 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 1024560:	e0bffb17 	ldw	r2,-20(fp)
 1024564:	10800a17 	ldw	r2,40(r2)
 1024568:	e0fff917 	ldw	r3,-28(fp)
 102456c:	1809883a 	mov	r4,r3
 1024570:	e0fffb17 	ldw	r3,-20(fp)
 1024574:	1885883a 	add	r2,r3,r2
 1024578:	10800e04 	addi	r2,r2,56
 102457c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1024580:	e0bffb17 	ldw	r2,-20(fp)
 1024584:	10800a17 	ldw	r2,40(r2)
 1024588:	10800044 	addi	r2,r2,1
 102458c:	10c1ffcc 	andi	r3,r2,2047
 1024590:	e0bffb17 	ldw	r2,-20(fp)
 1024594:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 1024598:	003fe206 	br	1024524 <__alt_data_end+0xfffe7064>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 102459c:	0001883a 	nop
 10245a0:	00000106 	br	10245a8 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 10245a4:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 10245a8:	e0bff917 	ldw	r2,-28(fp)
 10245ac:	10bfffec 	andhi	r2,r2,65535
 10245b0:	10000f26 	beq	r2,zero,10245f0 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 10245b4:	e0bffb17 	ldw	r2,-20(fp)
 10245b8:	10c00817 	ldw	r3,32(r2)
 10245bc:	00bfff84 	movi	r2,-2
 10245c0:	1886703a 	and	r3,r3,r2
 10245c4:	e0bffb17 	ldw	r2,-20(fp)
 10245c8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 10245cc:	e0bffc17 	ldw	r2,-16(fp)
 10245d0:	10800104 	addi	r2,r2,4
 10245d4:	1007883a 	mov	r3,r2
 10245d8:	e0bffb17 	ldw	r2,-20(fp)
 10245dc:	10800817 	ldw	r2,32(r2)
 10245e0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 10245e4:	e0bffc17 	ldw	r2,-16(fp)
 10245e8:	10800104 	addi	r2,r2,4
 10245ec:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 10245f0:	e0bffd17 	ldw	r2,-12(fp)
 10245f4:	1080800c 	andi	r2,r2,512
 10245f8:	103fbe26 	beq	r2,zero,10244f4 <__alt_data_end+0xfffe7034>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 10245fc:	e0bffd17 	ldw	r2,-12(fp)
 1024600:	1004d43a 	srli	r2,r2,16
 1024604:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 1024608:	00001406 	br	102465c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 102460c:	e0bffc17 	ldw	r2,-16(fp)
 1024610:	e0fffb17 	ldw	r3,-20(fp)
 1024614:	18c00d17 	ldw	r3,52(r3)
 1024618:	e13ffb17 	ldw	r4,-20(fp)
 102461c:	20c7883a 	add	r3,r4,r3
 1024620:	18c20e04 	addi	r3,r3,2104
 1024624:	18c00003 	ldbu	r3,0(r3)
 1024628:	18c03fcc 	andi	r3,r3,255
 102462c:	18c0201c 	xori	r3,r3,128
 1024630:	18ffe004 	addi	r3,r3,-128
 1024634:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1024638:	e0bffb17 	ldw	r2,-20(fp)
 102463c:	10800d17 	ldw	r2,52(r2)
 1024640:	10800044 	addi	r2,r2,1
 1024644:	10c1ffcc 	andi	r3,r2,2047
 1024648:	e0bffb17 	ldw	r2,-20(fp)
 102464c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 1024650:	e0bffa17 	ldw	r2,-24(fp)
 1024654:	10bfffc4 	addi	r2,r2,-1
 1024658:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 102465c:	e0bffa17 	ldw	r2,-24(fp)
 1024660:	10000526 	beq	r2,zero,1024678 <altera_avalon_jtag_uart_irq+0x1a8>
 1024664:	e0bffb17 	ldw	r2,-20(fp)
 1024668:	10c00d17 	ldw	r3,52(r2)
 102466c:	e0bffb17 	ldw	r2,-20(fp)
 1024670:	10800c17 	ldw	r2,48(r2)
 1024674:	18bfe51e 	bne	r3,r2,102460c <__alt_data_end+0xfffe714c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 1024678:	e0bffa17 	ldw	r2,-24(fp)
 102467c:	103f9d26 	beq	r2,zero,10244f4 <__alt_data_end+0xfffe7034>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 1024680:	e0bffb17 	ldw	r2,-20(fp)
 1024684:	10c00817 	ldw	r3,32(r2)
 1024688:	00bfff44 	movi	r2,-3
 102468c:	1886703a 	and	r3,r3,r2
 1024690:	e0bffb17 	ldw	r2,-20(fp)
 1024694:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 1024698:	e0bffb17 	ldw	r2,-20(fp)
 102469c:	10800017 	ldw	r2,0(r2)
 10246a0:	10800104 	addi	r2,r2,4
 10246a4:	1007883a 	mov	r3,r2
 10246a8:	e0bffb17 	ldw	r2,-20(fp)
 10246ac:	10800817 	ldw	r2,32(r2)
 10246b0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 10246b4:	e0bffc17 	ldw	r2,-16(fp)
 10246b8:	10800104 	addi	r2,r2,4
 10246bc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 10246c0:	003f8c06 	br	10244f4 <__alt_data_end+0xfffe7034>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 10246c4:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 10246c8:	0001883a 	nop
 10246cc:	e037883a 	mov	sp,fp
 10246d0:	df000017 	ldw	fp,0(sp)
 10246d4:	dec00104 	addi	sp,sp,4
 10246d8:	f800283a 	ret

010246dc <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 10246dc:	defff804 	addi	sp,sp,-32
 10246e0:	df000715 	stw	fp,28(sp)
 10246e4:	df000704 	addi	fp,sp,28
 10246e8:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 10246ec:	e0bffb17 	ldw	r2,-20(fp)
 10246f0:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 10246f4:	e0bff917 	ldw	r2,-28(fp)
 10246f8:	10800017 	ldw	r2,0(r2)
 10246fc:	10800104 	addi	r2,r2,4
 1024700:	10800037 	ldwio	r2,0(r2)
 1024704:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 1024708:	e0bffa17 	ldw	r2,-24(fp)
 102470c:	1081000c 	andi	r2,r2,1024
 1024710:	10000b26 	beq	r2,zero,1024740 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 1024714:	e0bff917 	ldw	r2,-28(fp)
 1024718:	10800017 	ldw	r2,0(r2)
 102471c:	10800104 	addi	r2,r2,4
 1024720:	1007883a 	mov	r3,r2
 1024724:	e0bff917 	ldw	r2,-28(fp)
 1024728:	10800817 	ldw	r2,32(r2)
 102472c:	10810014 	ori	r2,r2,1024
 1024730:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 1024734:	e0bff917 	ldw	r2,-28(fp)
 1024738:	10000915 	stw	zero,36(r2)
 102473c:	00000a06 	br	1024768 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 1024740:	e0bff917 	ldw	r2,-28(fp)
 1024744:	10c00917 	ldw	r3,36(r2)
 1024748:	00a00034 	movhi	r2,32768
 102474c:	10bfff04 	addi	r2,r2,-4
 1024750:	10c00536 	bltu	r2,r3,1024768 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 1024754:	e0bff917 	ldw	r2,-28(fp)
 1024758:	10800917 	ldw	r2,36(r2)
 102475c:	10c00044 	addi	r3,r2,1
 1024760:	e0bff917 	ldw	r2,-28(fp)
 1024764:	10c00915 	stw	r3,36(r2)
 1024768:	d0a6b117 	ldw	r2,-25916(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 102476c:	e037883a 	mov	sp,fp
 1024770:	df000017 	ldw	fp,0(sp)
 1024774:	dec00104 	addi	sp,sp,4
 1024778:	f800283a 	ret

0102477c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 102477c:	defffd04 	addi	sp,sp,-12
 1024780:	df000215 	stw	fp,8(sp)
 1024784:	df000204 	addi	fp,sp,8
 1024788:	e13ffe15 	stw	r4,-8(fp)
 102478c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 1024790:	00000506 	br	10247a8 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 1024794:	e0bfff17 	ldw	r2,-4(fp)
 1024798:	1090000c 	andi	r2,r2,16384
 102479c:	10000226 	beq	r2,zero,10247a8 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 10247a0:	00bffd44 	movi	r2,-11
 10247a4:	00000b06 	br	10247d4 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 10247a8:	e0bffe17 	ldw	r2,-8(fp)
 10247ac:	10c00d17 	ldw	r3,52(r2)
 10247b0:	e0bffe17 	ldw	r2,-8(fp)
 10247b4:	10800c17 	ldw	r2,48(r2)
 10247b8:	18800526 	beq	r3,r2,10247d0 <altera_avalon_jtag_uart_close+0x54>
 10247bc:	e0bffe17 	ldw	r2,-8(fp)
 10247c0:	10c00917 	ldw	r3,36(r2)
 10247c4:	e0bffe17 	ldw	r2,-8(fp)
 10247c8:	10800117 	ldw	r2,4(r2)
 10247cc:	18bff136 	bltu	r3,r2,1024794 <__alt_data_end+0xfffe72d4>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 10247d0:	0005883a 	mov	r2,zero
}
 10247d4:	e037883a 	mov	sp,fp
 10247d8:	df000017 	ldw	fp,0(sp)
 10247dc:	dec00104 	addi	sp,sp,4
 10247e0:	f800283a 	ret

010247e4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 10247e4:	defffa04 	addi	sp,sp,-24
 10247e8:	df000515 	stw	fp,20(sp)
 10247ec:	df000504 	addi	fp,sp,20
 10247f0:	e13ffd15 	stw	r4,-12(fp)
 10247f4:	e17ffe15 	stw	r5,-8(fp)
 10247f8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 10247fc:	00bff9c4 	movi	r2,-25
 1024800:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 1024804:	e0bffe17 	ldw	r2,-8(fp)
 1024808:	10da8060 	cmpeqi	r3,r2,27137
 102480c:	1800031e 	bne	r3,zero,102481c <altera_avalon_jtag_uart_ioctl+0x38>
 1024810:	109a80a0 	cmpeqi	r2,r2,27138
 1024814:	1000181e 	bne	r2,zero,1024878 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 1024818:	00002906 	br	10248c0 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 102481c:	e0bffd17 	ldw	r2,-12(fp)
 1024820:	10c00117 	ldw	r3,4(r2)
 1024824:	00a00034 	movhi	r2,32768
 1024828:	10bfffc4 	addi	r2,r2,-1
 102482c:	18802126 	beq	r3,r2,10248b4 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 1024830:	e0bfff17 	ldw	r2,-4(fp)
 1024834:	10800017 	ldw	r2,0(r2)
 1024838:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 102483c:	e0bffc17 	ldw	r2,-16(fp)
 1024840:	10800090 	cmplti	r2,r2,2
 1024844:	1000061e 	bne	r2,zero,1024860 <altera_avalon_jtag_uart_ioctl+0x7c>
 1024848:	e0fffc17 	ldw	r3,-16(fp)
 102484c:	00a00034 	movhi	r2,32768
 1024850:	10bfffc4 	addi	r2,r2,-1
 1024854:	18800226 	beq	r3,r2,1024860 <altera_avalon_jtag_uart_ioctl+0x7c>
 1024858:	e0bffc17 	ldw	r2,-16(fp)
 102485c:	00000206 	br	1024868 <altera_avalon_jtag_uart_ioctl+0x84>
 1024860:	00a00034 	movhi	r2,32768
 1024864:	10bfff84 	addi	r2,r2,-2
 1024868:	e0fffd17 	ldw	r3,-12(fp)
 102486c:	18800115 	stw	r2,4(r3)
      rc = 0;
 1024870:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 1024874:	00000f06 	br	10248b4 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 1024878:	e0bffd17 	ldw	r2,-12(fp)
 102487c:	10c00117 	ldw	r3,4(r2)
 1024880:	00a00034 	movhi	r2,32768
 1024884:	10bfffc4 	addi	r2,r2,-1
 1024888:	18800c26 	beq	r3,r2,10248bc <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 102488c:	e0bffd17 	ldw	r2,-12(fp)
 1024890:	10c00917 	ldw	r3,36(r2)
 1024894:	e0bffd17 	ldw	r2,-12(fp)
 1024898:	10800117 	ldw	r2,4(r2)
 102489c:	1885803a 	cmpltu	r2,r3,r2
 10248a0:	10c03fcc 	andi	r3,r2,255
 10248a4:	e0bfff17 	ldw	r2,-4(fp)
 10248a8:	10c00015 	stw	r3,0(r2)
      rc = 0;
 10248ac:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 10248b0:	00000206 	br	10248bc <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 10248b4:	0001883a 	nop
 10248b8:	00000106 	br	10248c0 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 10248bc:	0001883a 	nop

  default:
    break;
  }

  return rc;
 10248c0:	e0bffb17 	ldw	r2,-20(fp)
}
 10248c4:	e037883a 	mov	sp,fp
 10248c8:	df000017 	ldw	fp,0(sp)
 10248cc:	dec00104 	addi	sp,sp,4
 10248d0:	f800283a 	ret

010248d4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 10248d4:	defff304 	addi	sp,sp,-52
 10248d8:	dfc00c15 	stw	ra,48(sp)
 10248dc:	df000b15 	stw	fp,44(sp)
 10248e0:	df000b04 	addi	fp,sp,44
 10248e4:	e13ffc15 	stw	r4,-16(fp)
 10248e8:	e17ffd15 	stw	r5,-12(fp)
 10248ec:	e1bffe15 	stw	r6,-8(fp)
 10248f0:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 10248f4:	e0bffd17 	ldw	r2,-12(fp)
 10248f8:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 10248fc:	00004706 	br	1024a1c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 1024900:	e0bffc17 	ldw	r2,-16(fp)
 1024904:	10800a17 	ldw	r2,40(r2)
 1024908:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 102490c:	e0bffc17 	ldw	r2,-16(fp)
 1024910:	10800b17 	ldw	r2,44(r2)
 1024914:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 1024918:	e0fff717 	ldw	r3,-36(fp)
 102491c:	e0bff817 	ldw	r2,-32(fp)
 1024920:	18800536 	bltu	r3,r2,1024938 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 1024924:	e0fff717 	ldw	r3,-36(fp)
 1024928:	e0bff817 	ldw	r2,-32(fp)
 102492c:	1885c83a 	sub	r2,r3,r2
 1024930:	e0bff615 	stw	r2,-40(fp)
 1024934:	00000406 	br	1024948 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 1024938:	00c20004 	movi	r3,2048
 102493c:	e0bff817 	ldw	r2,-32(fp)
 1024940:	1885c83a 	sub	r2,r3,r2
 1024944:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 1024948:	e0bff617 	ldw	r2,-40(fp)
 102494c:	10001e26 	beq	r2,zero,10249c8 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 1024950:	e0fffe17 	ldw	r3,-8(fp)
 1024954:	e0bff617 	ldw	r2,-40(fp)
 1024958:	1880022e 	bgeu	r3,r2,1024964 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 102495c:	e0bffe17 	ldw	r2,-8(fp)
 1024960:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 1024964:	e0bffc17 	ldw	r2,-16(fp)
 1024968:	10c00e04 	addi	r3,r2,56
 102496c:	e0bff817 	ldw	r2,-32(fp)
 1024970:	1885883a 	add	r2,r3,r2
 1024974:	e1bff617 	ldw	r6,-40(fp)
 1024978:	100b883a 	mov	r5,r2
 102497c:	e13ff517 	ldw	r4,-44(fp)
 1024980:	1021ee40 	call	1021ee4 <memcpy>
      ptr   += n;
 1024984:	e0fff517 	ldw	r3,-44(fp)
 1024988:	e0bff617 	ldw	r2,-40(fp)
 102498c:	1885883a 	add	r2,r3,r2
 1024990:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 1024994:	e0fffe17 	ldw	r3,-8(fp)
 1024998:	e0bff617 	ldw	r2,-40(fp)
 102499c:	1885c83a 	sub	r2,r3,r2
 10249a0:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 10249a4:	e0fff817 	ldw	r3,-32(fp)
 10249a8:	e0bff617 	ldw	r2,-40(fp)
 10249ac:	1885883a 	add	r2,r3,r2
 10249b0:	10c1ffcc 	andi	r3,r2,2047
 10249b4:	e0bffc17 	ldw	r2,-16(fp)
 10249b8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 10249bc:	e0bffe17 	ldw	r2,-8(fp)
 10249c0:	00bfcf16 	blt	zero,r2,1024900 <__alt_data_end+0xfffe7440>
 10249c4:	00000106 	br	10249cc <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 10249c8:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 10249cc:	e0fff517 	ldw	r3,-44(fp)
 10249d0:	e0bffd17 	ldw	r2,-12(fp)
 10249d4:	1880141e 	bne	r3,r2,1024a28 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 10249d8:	e0bfff17 	ldw	r2,-4(fp)
 10249dc:	1090000c 	andi	r2,r2,16384
 10249e0:	1000131e 	bne	r2,zero,1024a30 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 10249e4:	0001883a 	nop
 10249e8:	e0bffc17 	ldw	r2,-16(fp)
 10249ec:	10c00a17 	ldw	r3,40(r2)
 10249f0:	e0bff717 	ldw	r2,-36(fp)
 10249f4:	1880051e 	bne	r3,r2,1024a0c <altera_avalon_jtag_uart_read+0x138>
 10249f8:	e0bffc17 	ldw	r2,-16(fp)
 10249fc:	10c00917 	ldw	r3,36(r2)
 1024a00:	e0bffc17 	ldw	r2,-16(fp)
 1024a04:	10800117 	ldw	r2,4(r2)
 1024a08:	18bff736 	bltu	r3,r2,10249e8 <__alt_data_end+0xfffe7528>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 1024a0c:	e0bffc17 	ldw	r2,-16(fp)
 1024a10:	10c00a17 	ldw	r3,40(r2)
 1024a14:	e0bff717 	ldw	r2,-36(fp)
 1024a18:	18800726 	beq	r3,r2,1024a38 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 1024a1c:	e0bffe17 	ldw	r2,-8(fp)
 1024a20:	00bfb716 	blt	zero,r2,1024900 <__alt_data_end+0xfffe7440>
 1024a24:	00000506 	br	1024a3c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 1024a28:	0001883a 	nop
 1024a2c:	00000306 	br	1024a3c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 1024a30:	0001883a 	nop
 1024a34:	00000106 	br	1024a3c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 1024a38:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 1024a3c:	e0fff517 	ldw	r3,-44(fp)
 1024a40:	e0bffd17 	ldw	r2,-12(fp)
 1024a44:	18801826 	beq	r3,r2,1024aa8 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1024a48:	0005303a 	rdctl	r2,status
 1024a4c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1024a50:	e0fffb17 	ldw	r3,-20(fp)
 1024a54:	00bfff84 	movi	r2,-2
 1024a58:	1884703a 	and	r2,r3,r2
 1024a5c:	1001703a 	wrctl	status,r2
  
  return context;
 1024a60:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 1024a64:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 1024a68:	e0bffc17 	ldw	r2,-16(fp)
 1024a6c:	10800817 	ldw	r2,32(r2)
 1024a70:	10c00054 	ori	r3,r2,1
 1024a74:	e0bffc17 	ldw	r2,-16(fp)
 1024a78:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 1024a7c:	e0bffc17 	ldw	r2,-16(fp)
 1024a80:	10800017 	ldw	r2,0(r2)
 1024a84:	10800104 	addi	r2,r2,4
 1024a88:	1007883a 	mov	r3,r2
 1024a8c:	e0bffc17 	ldw	r2,-16(fp)
 1024a90:	10800817 	ldw	r2,32(r2)
 1024a94:	18800035 	stwio	r2,0(r3)
 1024a98:	e0bffa17 	ldw	r2,-24(fp)
 1024a9c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1024aa0:	e0bff917 	ldw	r2,-28(fp)
 1024aa4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 1024aa8:	e0fff517 	ldw	r3,-44(fp)
 1024aac:	e0bffd17 	ldw	r2,-12(fp)
 1024ab0:	18800426 	beq	r3,r2,1024ac4 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 1024ab4:	e0fff517 	ldw	r3,-44(fp)
 1024ab8:	e0bffd17 	ldw	r2,-12(fp)
 1024abc:	1885c83a 	sub	r2,r3,r2
 1024ac0:	00000606 	br	1024adc <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 1024ac4:	e0bfff17 	ldw	r2,-4(fp)
 1024ac8:	1090000c 	andi	r2,r2,16384
 1024acc:	10000226 	beq	r2,zero,1024ad8 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 1024ad0:	00bffd44 	movi	r2,-11
 1024ad4:	00000106 	br	1024adc <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 1024ad8:	00bffec4 	movi	r2,-5
}
 1024adc:	e037883a 	mov	sp,fp
 1024ae0:	dfc00117 	ldw	ra,4(sp)
 1024ae4:	df000017 	ldw	fp,0(sp)
 1024ae8:	dec00204 	addi	sp,sp,8
 1024aec:	f800283a 	ret

01024af0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 1024af0:	defff304 	addi	sp,sp,-52
 1024af4:	dfc00c15 	stw	ra,48(sp)
 1024af8:	df000b15 	stw	fp,44(sp)
 1024afc:	df000b04 	addi	fp,sp,44
 1024b00:	e13ffc15 	stw	r4,-16(fp)
 1024b04:	e17ffd15 	stw	r5,-12(fp)
 1024b08:	e1bffe15 	stw	r6,-8(fp)
 1024b0c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 1024b10:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 1024b14:	e0bffd17 	ldw	r2,-12(fp)
 1024b18:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 1024b1c:	00003706 	br	1024bfc <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 1024b20:	e0bffc17 	ldw	r2,-16(fp)
 1024b24:	10800c17 	ldw	r2,48(r2)
 1024b28:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 1024b2c:	e0bffc17 	ldw	r2,-16(fp)
 1024b30:	10800d17 	ldw	r2,52(r2)
 1024b34:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 1024b38:	e0fff917 	ldw	r3,-28(fp)
 1024b3c:	e0bff517 	ldw	r2,-44(fp)
 1024b40:	1880062e 	bgeu	r3,r2,1024b5c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 1024b44:	e0fff517 	ldw	r3,-44(fp)
 1024b48:	e0bff917 	ldw	r2,-28(fp)
 1024b4c:	1885c83a 	sub	r2,r3,r2
 1024b50:	10bfffc4 	addi	r2,r2,-1
 1024b54:	e0bff615 	stw	r2,-40(fp)
 1024b58:	00000b06 	br	1024b88 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 1024b5c:	e0bff517 	ldw	r2,-44(fp)
 1024b60:	10000526 	beq	r2,zero,1024b78 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 1024b64:	00c20004 	movi	r3,2048
 1024b68:	e0bff917 	ldw	r2,-28(fp)
 1024b6c:	1885c83a 	sub	r2,r3,r2
 1024b70:	e0bff615 	stw	r2,-40(fp)
 1024b74:	00000406 	br	1024b88 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 1024b78:	00c1ffc4 	movi	r3,2047
 1024b7c:	e0bff917 	ldw	r2,-28(fp)
 1024b80:	1885c83a 	sub	r2,r3,r2
 1024b84:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 1024b88:	e0bff617 	ldw	r2,-40(fp)
 1024b8c:	10001e26 	beq	r2,zero,1024c08 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 1024b90:	e0fffe17 	ldw	r3,-8(fp)
 1024b94:	e0bff617 	ldw	r2,-40(fp)
 1024b98:	1880022e 	bgeu	r3,r2,1024ba4 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 1024b9c:	e0bffe17 	ldw	r2,-8(fp)
 1024ba0:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 1024ba4:	e0bffc17 	ldw	r2,-16(fp)
 1024ba8:	10c20e04 	addi	r3,r2,2104
 1024bac:	e0bff917 	ldw	r2,-28(fp)
 1024bb0:	1885883a 	add	r2,r3,r2
 1024bb4:	e1bff617 	ldw	r6,-40(fp)
 1024bb8:	e17ffd17 	ldw	r5,-12(fp)
 1024bbc:	1009883a 	mov	r4,r2
 1024bc0:	1021ee40 	call	1021ee4 <memcpy>
      ptr   += n;
 1024bc4:	e0fffd17 	ldw	r3,-12(fp)
 1024bc8:	e0bff617 	ldw	r2,-40(fp)
 1024bcc:	1885883a 	add	r2,r3,r2
 1024bd0:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 1024bd4:	e0fffe17 	ldw	r3,-8(fp)
 1024bd8:	e0bff617 	ldw	r2,-40(fp)
 1024bdc:	1885c83a 	sub	r2,r3,r2
 1024be0:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1024be4:	e0fff917 	ldw	r3,-28(fp)
 1024be8:	e0bff617 	ldw	r2,-40(fp)
 1024bec:	1885883a 	add	r2,r3,r2
 1024bf0:	10c1ffcc 	andi	r3,r2,2047
 1024bf4:	e0bffc17 	ldw	r2,-16(fp)
 1024bf8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 1024bfc:	e0bffe17 	ldw	r2,-8(fp)
 1024c00:	00bfc716 	blt	zero,r2,1024b20 <__alt_data_end+0xfffe7660>
 1024c04:	00000106 	br	1024c0c <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 1024c08:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1024c0c:	0005303a 	rdctl	r2,status
 1024c10:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1024c14:	e0fffb17 	ldw	r3,-20(fp)
 1024c18:	00bfff84 	movi	r2,-2
 1024c1c:	1884703a 	and	r2,r3,r2
 1024c20:	1001703a 	wrctl	status,r2
  
  return context;
 1024c24:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 1024c28:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 1024c2c:	e0bffc17 	ldw	r2,-16(fp)
 1024c30:	10800817 	ldw	r2,32(r2)
 1024c34:	10c00094 	ori	r3,r2,2
 1024c38:	e0bffc17 	ldw	r2,-16(fp)
 1024c3c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 1024c40:	e0bffc17 	ldw	r2,-16(fp)
 1024c44:	10800017 	ldw	r2,0(r2)
 1024c48:	10800104 	addi	r2,r2,4
 1024c4c:	1007883a 	mov	r3,r2
 1024c50:	e0bffc17 	ldw	r2,-16(fp)
 1024c54:	10800817 	ldw	r2,32(r2)
 1024c58:	18800035 	stwio	r2,0(r3)
 1024c5c:	e0bffa17 	ldw	r2,-24(fp)
 1024c60:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1024c64:	e0bff817 	ldw	r2,-32(fp)
 1024c68:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 1024c6c:	e0bffe17 	ldw	r2,-8(fp)
 1024c70:	0080100e 	bge	zero,r2,1024cb4 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 1024c74:	e0bfff17 	ldw	r2,-4(fp)
 1024c78:	1090000c 	andi	r2,r2,16384
 1024c7c:	1000101e 	bne	r2,zero,1024cc0 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 1024c80:	0001883a 	nop
 1024c84:	e0bffc17 	ldw	r2,-16(fp)
 1024c88:	10c00d17 	ldw	r3,52(r2)
 1024c8c:	e0bff517 	ldw	r2,-44(fp)
 1024c90:	1880051e 	bne	r3,r2,1024ca8 <altera_avalon_jtag_uart_write+0x1b8>
 1024c94:	e0bffc17 	ldw	r2,-16(fp)
 1024c98:	10c00917 	ldw	r3,36(r2)
 1024c9c:	e0bffc17 	ldw	r2,-16(fp)
 1024ca0:	10800117 	ldw	r2,4(r2)
 1024ca4:	18bff736 	bltu	r3,r2,1024c84 <__alt_data_end+0xfffe77c4>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 1024ca8:	e0bffc17 	ldw	r2,-16(fp)
 1024cac:	10800917 	ldw	r2,36(r2)
 1024cb0:	1000051e 	bne	r2,zero,1024cc8 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 1024cb4:	e0bffe17 	ldw	r2,-8(fp)
 1024cb8:	00bfd016 	blt	zero,r2,1024bfc <__alt_data_end+0xfffe773c>
 1024cbc:	00000306 	br	1024ccc <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 1024cc0:	0001883a 	nop
 1024cc4:	00000106 	br	1024ccc <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 1024cc8:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 1024ccc:	e0fffd17 	ldw	r3,-12(fp)
 1024cd0:	e0bff717 	ldw	r2,-36(fp)
 1024cd4:	18800426 	beq	r3,r2,1024ce8 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 1024cd8:	e0fffd17 	ldw	r3,-12(fp)
 1024cdc:	e0bff717 	ldw	r2,-36(fp)
 1024ce0:	1885c83a 	sub	r2,r3,r2
 1024ce4:	00000606 	br	1024d00 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 1024ce8:	e0bfff17 	ldw	r2,-4(fp)
 1024cec:	1090000c 	andi	r2,r2,16384
 1024cf0:	10000226 	beq	r2,zero,1024cfc <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 1024cf4:	00bffd44 	movi	r2,-11
 1024cf8:	00000106 	br	1024d00 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 1024cfc:	00bffec4 	movi	r2,-5
}
 1024d00:	e037883a 	mov	sp,fp
 1024d04:	dfc00117 	ldw	ra,4(sp)
 1024d08:	df000017 	ldw	fp,0(sp)
 1024d0c:	dec00204 	addi	sp,sp,8
 1024d10:	f800283a 	ret

01024d14 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 1024d14:	defffa04 	addi	sp,sp,-24
 1024d18:	dfc00515 	stw	ra,20(sp)
 1024d1c:	df000415 	stw	fp,16(sp)
 1024d20:	df000404 	addi	fp,sp,16
 1024d24:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 1024d28:	0007883a 	mov	r3,zero
 1024d2c:	e0bfff17 	ldw	r2,-4(fp)
 1024d30:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 1024d34:	e0bfff17 	ldw	r2,-4(fp)
 1024d38:	10800104 	addi	r2,r2,4
 1024d3c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1024d40:	0005303a 	rdctl	r2,status
 1024d44:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1024d48:	e0fffd17 	ldw	r3,-12(fp)
 1024d4c:	00bfff84 	movi	r2,-2
 1024d50:	1884703a 	and	r2,r3,r2
 1024d54:	1001703a 	wrctl	status,r2
  
  return context;
 1024d58:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 1024d5c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 1024d60:	10259780 	call	1025978 <alt_tick>
 1024d64:	e0bffc17 	ldw	r2,-16(fp)
 1024d68:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1024d6c:	e0bffe17 	ldw	r2,-8(fp)
 1024d70:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 1024d74:	0001883a 	nop
 1024d78:	e037883a 	mov	sp,fp
 1024d7c:	dfc00117 	ldw	ra,4(sp)
 1024d80:	df000017 	ldw	fp,0(sp)
 1024d84:	dec00204 	addi	sp,sp,8
 1024d88:	f800283a 	ret

01024d8c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 1024d8c:	defff804 	addi	sp,sp,-32
 1024d90:	dfc00715 	stw	ra,28(sp)
 1024d94:	df000615 	stw	fp,24(sp)
 1024d98:	df000604 	addi	fp,sp,24
 1024d9c:	e13ffc15 	stw	r4,-16(fp)
 1024da0:	e17ffd15 	stw	r5,-12(fp)
 1024da4:	e1bffe15 	stw	r6,-8(fp)
 1024da8:	e1ffff15 	stw	r7,-4(fp)
 1024dac:	e0bfff17 	ldw	r2,-4(fp)
 1024db0:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 1024db4:	d0a6b117 	ldw	r2,-25916(gp)
 1024db8:	1000021e 	bne	r2,zero,1024dc4 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 1024dbc:	e0bffb17 	ldw	r2,-20(fp)
 1024dc0:	d0a6b115 	stw	r2,-25916(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 1024dc4:	e0bffc17 	ldw	r2,-16(fp)
 1024dc8:	10800104 	addi	r2,r2,4
 1024dcc:	00c001c4 	movi	r3,7
 1024dd0:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 1024dd4:	d8000015 	stw	zero,0(sp)
 1024dd8:	e1fffc17 	ldw	r7,-16(fp)
 1024ddc:	018040b4 	movhi	r6,258
 1024de0:	31934504 	addi	r6,r6,19732
 1024de4:	e17ffe17 	ldw	r5,-8(fp)
 1024de8:	e13ffd17 	ldw	r4,-12(fp)
 1024dec:	10252a80 	call	10252a8 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 1024df0:	0001883a 	nop
 1024df4:	e037883a 	mov	sp,fp
 1024df8:	dfc00117 	ldw	ra,4(sp)
 1024dfc:	df000017 	ldw	fp,0(sp)
 1024e00:	dec00204 	addi	sp,sp,8
 1024e04:	f800283a 	ret

01024e08 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 1024e08:	defff504 	addi	sp,sp,-44
 1024e0c:	df000a15 	stw	fp,40(sp)
 1024e10:	df000a04 	addi	fp,sp,40
 1024e14:	e13ffc15 	stw	r4,-16(fp)
 1024e18:	e17ffd15 	stw	r5,-12(fp)
 1024e1c:	e1bffe15 	stw	r6,-8(fp)
 1024e20:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 1024e24:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 1024e28:	d0a6b117 	ldw	r2,-25916(gp)
  
  if (alt_ticks_per_second ())
 1024e2c:	10003c26 	beq	r2,zero,1024f20 <alt_alarm_start+0x118>
  {
    if (alarm)
 1024e30:	e0bffc17 	ldw	r2,-16(fp)
 1024e34:	10003826 	beq	r2,zero,1024f18 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 1024e38:	e0bffc17 	ldw	r2,-16(fp)
 1024e3c:	e0fffe17 	ldw	r3,-8(fp)
 1024e40:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 1024e44:	e0bffc17 	ldw	r2,-16(fp)
 1024e48:	e0ffff17 	ldw	r3,-4(fp)
 1024e4c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1024e50:	0005303a 	rdctl	r2,status
 1024e54:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1024e58:	e0fff917 	ldw	r3,-28(fp)
 1024e5c:	00bfff84 	movi	r2,-2
 1024e60:	1884703a 	and	r2,r3,r2
 1024e64:	1001703a 	wrctl	status,r2
  
  return context;
 1024e68:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 1024e6c:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 1024e70:	d0a6b217 	ldw	r2,-25912(gp)
      
      current_nticks = alt_nticks();
 1024e74:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 1024e78:	e0fffd17 	ldw	r3,-12(fp)
 1024e7c:	e0bff617 	ldw	r2,-40(fp)
 1024e80:	1885883a 	add	r2,r3,r2
 1024e84:	10c00044 	addi	r3,r2,1
 1024e88:	e0bffc17 	ldw	r2,-16(fp)
 1024e8c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 1024e90:	e0bffc17 	ldw	r2,-16(fp)
 1024e94:	10c00217 	ldw	r3,8(r2)
 1024e98:	e0bff617 	ldw	r2,-40(fp)
 1024e9c:	1880042e 	bgeu	r3,r2,1024eb0 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 1024ea0:	e0bffc17 	ldw	r2,-16(fp)
 1024ea4:	00c00044 	movi	r3,1
 1024ea8:	10c00405 	stb	r3,16(r2)
 1024eac:	00000206 	br	1024eb8 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 1024eb0:	e0bffc17 	ldw	r2,-16(fp)
 1024eb4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 1024eb8:	e0bffc17 	ldw	r2,-16(fp)
 1024ebc:	d0e00c04 	addi	r3,gp,-32720
 1024ec0:	e0fffa15 	stw	r3,-24(fp)
 1024ec4:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 1024ec8:	e0bffb17 	ldw	r2,-20(fp)
 1024ecc:	e0fffa17 	ldw	r3,-24(fp)
 1024ed0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 1024ed4:	e0bffa17 	ldw	r2,-24(fp)
 1024ed8:	10c00017 	ldw	r3,0(r2)
 1024edc:	e0bffb17 	ldw	r2,-20(fp)
 1024ee0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 1024ee4:	e0bffa17 	ldw	r2,-24(fp)
 1024ee8:	10800017 	ldw	r2,0(r2)
 1024eec:	e0fffb17 	ldw	r3,-20(fp)
 1024ef0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 1024ef4:	e0bffa17 	ldw	r2,-24(fp)
 1024ef8:	e0fffb17 	ldw	r3,-20(fp)
 1024efc:	10c00015 	stw	r3,0(r2)
 1024f00:	e0bff817 	ldw	r2,-32(fp)
 1024f04:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1024f08:	e0bff717 	ldw	r2,-36(fp)
 1024f0c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 1024f10:	0005883a 	mov	r2,zero
 1024f14:	00000306 	br	1024f24 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 1024f18:	00bffa84 	movi	r2,-22
 1024f1c:	00000106 	br	1024f24 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 1024f20:	00bfde84 	movi	r2,-134
  }
}
 1024f24:	e037883a 	mov	sp,fp
 1024f28:	df000017 	ldw	fp,0(sp)
 1024f2c:	dec00104 	addi	sp,sp,4
 1024f30:	f800283a 	ret

01024f34 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 1024f34:	defffa04 	addi	sp,sp,-24
 1024f38:	dfc00515 	stw	ra,20(sp)
 1024f3c:	df000415 	stw	fp,16(sp)
 1024f40:	df000404 	addi	fp,sp,16
 1024f44:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
 1024f48:	008000c4 	movi	r2,3
 1024f4c:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 1024f50:	e0fffd17 	ldw	r3,-12(fp)
 1024f54:	008003f4 	movhi	r2,15
 1024f58:	10909004 	addi	r2,r2,16960
 1024f5c:	1885383a 	mul	r2,r3,r2
 1024f60:	100b883a 	mov	r5,r2
 1024f64:	01017db4 	movhi	r4,1526
 1024f68:	21384004 	addi	r4,r4,-7936
 1024f6c:	10237b00 	call	10237b0 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 1024f70:	100b883a 	mov	r5,r2
 1024f74:	01200034 	movhi	r4,32768
 1024f78:	213fffc4 	addi	r4,r4,-1
 1024f7c:	10237b00 	call	10237b0 <__udivsi3>
 1024f80:	100b883a 	mov	r5,r2
 1024f84:	e13fff17 	ldw	r4,-4(fp)
 1024f88:	10237b00 	call	10237b0 <__udivsi3>
 1024f8c:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 1024f90:	e0bffe17 	ldw	r2,-8(fp)
 1024f94:	10002a26 	beq	r2,zero,1025040 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 1024f98:	e03ffc15 	stw	zero,-16(fp)
 1024f9c:	00001706 	br	1024ffc <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 1024fa0:	00a00034 	movhi	r2,32768
 1024fa4:	10bfffc4 	addi	r2,r2,-1
 1024fa8:	10bfffc4 	addi	r2,r2,-1
 1024fac:	103ffe1e 	bne	r2,zero,1024fa8 <__alt_data_end+0xfffe7ae8>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 1024fb0:	e0fffd17 	ldw	r3,-12(fp)
 1024fb4:	008003f4 	movhi	r2,15
 1024fb8:	10909004 	addi	r2,r2,16960
 1024fbc:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 1024fc0:	100b883a 	mov	r5,r2
 1024fc4:	01017db4 	movhi	r4,1526
 1024fc8:	21384004 	addi	r4,r4,-7936
 1024fcc:	10237b00 	call	10237b0 <__udivsi3>
 1024fd0:	100b883a 	mov	r5,r2
 1024fd4:	01200034 	movhi	r4,32768
 1024fd8:	213fffc4 	addi	r4,r4,-1
 1024fdc:	10237b00 	call	10237b0 <__udivsi3>
 1024fe0:	1007883a 	mov	r3,r2
 1024fe4:	e0bfff17 	ldw	r2,-4(fp)
 1024fe8:	10c5c83a 	sub	r2,r2,r3
 1024fec:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 1024ff0:	e0bffc17 	ldw	r2,-16(fp)
 1024ff4:	10800044 	addi	r2,r2,1
 1024ff8:	e0bffc15 	stw	r2,-16(fp)
 1024ffc:	e0fffc17 	ldw	r3,-16(fp)
 1025000:	e0bffe17 	ldw	r2,-8(fp)
 1025004:	18bfe616 	blt	r3,r2,1024fa0 <__alt_data_end+0xfffe7ae0>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 1025008:	e0fffd17 	ldw	r3,-12(fp)
 102500c:	008003f4 	movhi	r2,15
 1025010:	10909004 	addi	r2,r2,16960
 1025014:	1885383a 	mul	r2,r3,r2
 1025018:	100b883a 	mov	r5,r2
 102501c:	01017db4 	movhi	r4,1526
 1025020:	21384004 	addi	r4,r4,-7936
 1025024:	10237b00 	call	10237b0 <__udivsi3>
 1025028:	1007883a 	mov	r3,r2
 102502c:	e0bfff17 	ldw	r2,-4(fp)
 1025030:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 1025034:	10bfffc4 	addi	r2,r2,-1
 1025038:	103ffe1e 	bne	r2,zero,1025034 <__alt_data_end+0xfffe7b74>
 102503c:	00000d06 	br	1025074 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 1025040:	e0fffd17 	ldw	r3,-12(fp)
 1025044:	008003f4 	movhi	r2,15
 1025048:	10909004 	addi	r2,r2,16960
 102504c:	1885383a 	mul	r2,r3,r2
 1025050:	100b883a 	mov	r5,r2
 1025054:	01017db4 	movhi	r4,1526
 1025058:	21384004 	addi	r4,r4,-7936
 102505c:	10237b00 	call	10237b0 <__udivsi3>
 1025060:	1007883a 	mov	r3,r2
 1025064:	e0bfff17 	ldw	r2,-4(fp)
 1025068:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 102506c:	10bfffc4 	addi	r2,r2,-1
 1025070:	00bffe16 	blt	zero,r2,102506c <__alt_data_end+0xfffe7bac>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 1025074:	0005883a 	mov	r2,zero
}
 1025078:	e037883a 	mov	sp,fp
 102507c:	dfc00117 	ldw	ra,4(sp)
 1025080:	df000017 	ldw	fp,0(sp)
 1025084:	dec00204 	addi	sp,sp,8
 1025088:	f800283a 	ret

0102508c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 102508c:	defffe04 	addi	sp,sp,-8
 1025090:	df000115 	stw	fp,4(sp)
 1025094:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 1025098:	e03fff15 	stw	zero,-4(fp)
 102509c:	00000506 	br	10250b4 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 10250a0:	e0bfff17 	ldw	r2,-4(fp)
 10250a4:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 10250a8:	e0bfff17 	ldw	r2,-4(fp)
 10250ac:	10800804 	addi	r2,r2,32
 10250b0:	e0bfff15 	stw	r2,-4(fp)
 10250b4:	e0bfff17 	ldw	r2,-4(fp)
 10250b8:	10820030 	cmpltui	r2,r2,2048
 10250bc:	103ff81e 	bne	r2,zero,10250a0 <__alt_data_end+0xfffe7be0>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 10250c0:	0001883a 	nop
 10250c4:	e037883a 	mov	sp,fp
 10250c8:	df000017 	ldw	fp,0(sp)
 10250cc:	dec00104 	addi	sp,sp,4
 10250d0:	f800283a 	ret

010250d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 10250d4:	defffe04 	addi	sp,sp,-8
 10250d8:	dfc00115 	stw	ra,4(sp)
 10250dc:	df000015 	stw	fp,0(sp)
 10250e0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 10250e4:	d0a00917 	ldw	r2,-32732(gp)
 10250e8:	10000326 	beq	r2,zero,10250f8 <alt_get_errno+0x24>
 10250ec:	d0a00917 	ldw	r2,-32732(gp)
 10250f0:	103ee83a 	callr	r2
 10250f4:	00000106 	br	10250fc <alt_get_errno+0x28>
 10250f8:	d0a6ac04 	addi	r2,gp,-25936
}
 10250fc:	e037883a 	mov	sp,fp
 1025100:	dfc00117 	ldw	ra,4(sp)
 1025104:	df000017 	ldw	fp,0(sp)
 1025108:	dec00204 	addi	sp,sp,8
 102510c:	f800283a 	ret

01025110 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 1025110:	defffa04 	addi	sp,sp,-24
 1025114:	dfc00515 	stw	ra,20(sp)
 1025118:	df000415 	stw	fp,16(sp)
 102511c:	df000404 	addi	fp,sp,16
 1025120:	e13ffe15 	stw	r4,-8(fp)
 1025124:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 1025128:	e0bffe17 	ldw	r2,-8(fp)
 102512c:	10000326 	beq	r2,zero,102513c <alt_dev_llist_insert+0x2c>
 1025130:	e0bffe17 	ldw	r2,-8(fp)
 1025134:	10800217 	ldw	r2,8(r2)
 1025138:	1000061e 	bne	r2,zero,1025154 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 102513c:	10250d40 	call	10250d4 <alt_get_errno>
 1025140:	1007883a 	mov	r3,r2
 1025144:	00800584 	movi	r2,22
 1025148:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 102514c:	00bffa84 	movi	r2,-22
 1025150:	00001306 	br	10251a0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 1025154:	e0bffe17 	ldw	r2,-8(fp)
 1025158:	e0ffff17 	ldw	r3,-4(fp)
 102515c:	e0fffc15 	stw	r3,-16(fp)
 1025160:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 1025164:	e0bffd17 	ldw	r2,-12(fp)
 1025168:	e0fffc17 	ldw	r3,-16(fp)
 102516c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 1025170:	e0bffc17 	ldw	r2,-16(fp)
 1025174:	10c00017 	ldw	r3,0(r2)
 1025178:	e0bffd17 	ldw	r2,-12(fp)
 102517c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 1025180:	e0bffc17 	ldw	r2,-16(fp)
 1025184:	10800017 	ldw	r2,0(r2)
 1025188:	e0fffd17 	ldw	r3,-12(fp)
 102518c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 1025190:	e0bffc17 	ldw	r2,-16(fp)
 1025194:	e0fffd17 	ldw	r3,-12(fp)
 1025198:	10c00015 	stw	r3,0(r2)

  return 0;  
 102519c:	0005883a 	mov	r2,zero
}
 10251a0:	e037883a 	mov	sp,fp
 10251a4:	dfc00117 	ldw	ra,4(sp)
 10251a8:	df000017 	ldw	fp,0(sp)
 10251ac:	dec00204 	addi	sp,sp,8
 10251b0:	f800283a 	ret

010251b4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 10251b4:	defffd04 	addi	sp,sp,-12
 10251b8:	dfc00215 	stw	ra,8(sp)
 10251bc:	df000115 	stw	fp,4(sp)
 10251c0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 10251c4:	008040b4 	movhi	r2,258
 10251c8:	10986704 	addi	r2,r2,24988
 10251cc:	e0bfff15 	stw	r2,-4(fp)
 10251d0:	00000606 	br	10251ec <_do_ctors+0x38>
        (*ctor) (); 
 10251d4:	e0bfff17 	ldw	r2,-4(fp)
 10251d8:	10800017 	ldw	r2,0(r2)
 10251dc:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 10251e0:	e0bfff17 	ldw	r2,-4(fp)
 10251e4:	10bfff04 	addi	r2,r2,-4
 10251e8:	e0bfff15 	stw	r2,-4(fp)
 10251ec:	e0ffff17 	ldw	r3,-4(fp)
 10251f0:	008040b4 	movhi	r2,258
 10251f4:	10986804 	addi	r2,r2,24992
 10251f8:	18bff62e 	bgeu	r3,r2,10251d4 <__alt_data_end+0xfffe7d14>
        (*ctor) (); 
}
 10251fc:	0001883a 	nop
 1025200:	e037883a 	mov	sp,fp
 1025204:	dfc00117 	ldw	ra,4(sp)
 1025208:	df000017 	ldw	fp,0(sp)
 102520c:	dec00204 	addi	sp,sp,8
 1025210:	f800283a 	ret

01025214 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 1025214:	defffd04 	addi	sp,sp,-12
 1025218:	dfc00215 	stw	ra,8(sp)
 102521c:	df000115 	stw	fp,4(sp)
 1025220:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 1025224:	008040b4 	movhi	r2,258
 1025228:	10986704 	addi	r2,r2,24988
 102522c:	e0bfff15 	stw	r2,-4(fp)
 1025230:	00000606 	br	102524c <_do_dtors+0x38>
        (*dtor) (); 
 1025234:	e0bfff17 	ldw	r2,-4(fp)
 1025238:	10800017 	ldw	r2,0(r2)
 102523c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 1025240:	e0bfff17 	ldw	r2,-4(fp)
 1025244:	10bfff04 	addi	r2,r2,-4
 1025248:	e0bfff15 	stw	r2,-4(fp)
 102524c:	e0ffff17 	ldw	r3,-4(fp)
 1025250:	008040b4 	movhi	r2,258
 1025254:	10986804 	addi	r2,r2,24992
 1025258:	18bff62e 	bgeu	r3,r2,1025234 <__alt_data_end+0xfffe7d74>
        (*dtor) (); 
}
 102525c:	0001883a 	nop
 1025260:	e037883a 	mov	sp,fp
 1025264:	dfc00117 	ldw	ra,4(sp)
 1025268:	df000017 	ldw	fp,0(sp)
 102526c:	dec00204 	addi	sp,sp,8
 1025270:	f800283a 	ret

01025274 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 1025274:	defffe04 	addi	sp,sp,-8
 1025278:	dfc00115 	stw	ra,4(sp)
 102527c:	df000015 	stw	fp,0(sp)
 1025280:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 1025284:	01440004 	movi	r5,4096
 1025288:	0009883a 	mov	r4,zero
 102528c:	1025ce00 	call	1025ce0 <alt_icache_flush>
#endif
}
 1025290:	0001883a 	nop
 1025294:	e037883a 	mov	sp,fp
 1025298:	dfc00117 	ldw	ra,4(sp)
 102529c:	df000017 	ldw	fp,0(sp)
 10252a0:	dec00204 	addi	sp,sp,8
 10252a4:	f800283a 	ret

010252a8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 10252a8:	defff904 	addi	sp,sp,-28
 10252ac:	dfc00615 	stw	ra,24(sp)
 10252b0:	df000515 	stw	fp,20(sp)
 10252b4:	df000504 	addi	fp,sp,20
 10252b8:	e13ffc15 	stw	r4,-16(fp)
 10252bc:	e17ffd15 	stw	r5,-12(fp)
 10252c0:	e1bffe15 	stw	r6,-8(fp)
 10252c4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 10252c8:	e0800217 	ldw	r2,8(fp)
 10252cc:	d8800015 	stw	r2,0(sp)
 10252d0:	e1ffff17 	ldw	r7,-4(fp)
 10252d4:	e1bffe17 	ldw	r6,-8(fp)
 10252d8:	e17ffd17 	ldw	r5,-12(fp)
 10252dc:	e13ffc17 	ldw	r4,-16(fp)
 10252e0:	10254580 	call	1025458 <alt_iic_isr_register>
}  
 10252e4:	e037883a 	mov	sp,fp
 10252e8:	dfc00117 	ldw	ra,4(sp)
 10252ec:	df000017 	ldw	fp,0(sp)
 10252f0:	dec00204 	addi	sp,sp,8
 10252f4:	f800283a 	ret

010252f8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 10252f8:	defff904 	addi	sp,sp,-28
 10252fc:	df000615 	stw	fp,24(sp)
 1025300:	df000604 	addi	fp,sp,24
 1025304:	e13ffe15 	stw	r4,-8(fp)
 1025308:	e17fff15 	stw	r5,-4(fp)
 102530c:	e0bfff17 	ldw	r2,-4(fp)
 1025310:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1025314:	0005303a 	rdctl	r2,status
 1025318:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 102531c:	e0fffb17 	ldw	r3,-20(fp)
 1025320:	00bfff84 	movi	r2,-2
 1025324:	1884703a 	and	r2,r3,r2
 1025328:	1001703a 	wrctl	status,r2
  
  return context;
 102532c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 1025330:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 1025334:	00c00044 	movi	r3,1
 1025338:	e0bffa17 	ldw	r2,-24(fp)
 102533c:	1884983a 	sll	r2,r3,r2
 1025340:	1007883a 	mov	r3,r2
 1025344:	d0a6b017 	ldw	r2,-25920(gp)
 1025348:	1884b03a 	or	r2,r3,r2
 102534c:	d0a6b015 	stw	r2,-25920(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 1025350:	d0a6b017 	ldw	r2,-25920(gp)
 1025354:	100170fa 	wrctl	ienable,r2
 1025358:	e0bffc17 	ldw	r2,-16(fp)
 102535c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1025360:	e0bffd17 	ldw	r2,-12(fp)
 1025364:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 1025368:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 102536c:	0001883a 	nop
}
 1025370:	e037883a 	mov	sp,fp
 1025374:	df000017 	ldw	fp,0(sp)
 1025378:	dec00104 	addi	sp,sp,4
 102537c:	f800283a 	ret

01025380 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 1025380:	defff904 	addi	sp,sp,-28
 1025384:	df000615 	stw	fp,24(sp)
 1025388:	df000604 	addi	fp,sp,24
 102538c:	e13ffe15 	stw	r4,-8(fp)
 1025390:	e17fff15 	stw	r5,-4(fp)
 1025394:	e0bfff17 	ldw	r2,-4(fp)
 1025398:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 102539c:	0005303a 	rdctl	r2,status
 10253a0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10253a4:	e0fffb17 	ldw	r3,-20(fp)
 10253a8:	00bfff84 	movi	r2,-2
 10253ac:	1884703a 	and	r2,r3,r2
 10253b0:	1001703a 	wrctl	status,r2
  
  return context;
 10253b4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 10253b8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 10253bc:	00c00044 	movi	r3,1
 10253c0:	e0bffa17 	ldw	r2,-24(fp)
 10253c4:	1884983a 	sll	r2,r3,r2
 10253c8:	0084303a 	nor	r2,zero,r2
 10253cc:	1007883a 	mov	r3,r2
 10253d0:	d0a6b017 	ldw	r2,-25920(gp)
 10253d4:	1884703a 	and	r2,r3,r2
 10253d8:	d0a6b015 	stw	r2,-25920(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 10253dc:	d0a6b017 	ldw	r2,-25920(gp)
 10253e0:	100170fa 	wrctl	ienable,r2
 10253e4:	e0bffc17 	ldw	r2,-16(fp)
 10253e8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10253ec:	e0bffd17 	ldw	r2,-12(fp)
 10253f0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 10253f4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 10253f8:	0001883a 	nop
}
 10253fc:	e037883a 	mov	sp,fp
 1025400:	df000017 	ldw	fp,0(sp)
 1025404:	dec00104 	addi	sp,sp,4
 1025408:	f800283a 	ret

0102540c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 102540c:	defffc04 	addi	sp,sp,-16
 1025410:	df000315 	stw	fp,12(sp)
 1025414:	df000304 	addi	fp,sp,12
 1025418:	e13ffe15 	stw	r4,-8(fp)
 102541c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 1025420:	000530fa 	rdctl	r2,ienable
 1025424:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 1025428:	00c00044 	movi	r3,1
 102542c:	e0bfff17 	ldw	r2,-4(fp)
 1025430:	1884983a 	sll	r2,r3,r2
 1025434:	1007883a 	mov	r3,r2
 1025438:	e0bffd17 	ldw	r2,-12(fp)
 102543c:	1884703a 	and	r2,r3,r2
 1025440:	1004c03a 	cmpne	r2,r2,zero
 1025444:	10803fcc 	andi	r2,r2,255
}
 1025448:	e037883a 	mov	sp,fp
 102544c:	df000017 	ldw	fp,0(sp)
 1025450:	dec00104 	addi	sp,sp,4
 1025454:	f800283a 	ret

01025458 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 1025458:	defff504 	addi	sp,sp,-44
 102545c:	dfc00a15 	stw	ra,40(sp)
 1025460:	df000915 	stw	fp,36(sp)
 1025464:	df000904 	addi	fp,sp,36
 1025468:	e13ffc15 	stw	r4,-16(fp)
 102546c:	e17ffd15 	stw	r5,-12(fp)
 1025470:	e1bffe15 	stw	r6,-8(fp)
 1025474:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 1025478:	00bffa84 	movi	r2,-22
 102547c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 1025480:	e0bffd17 	ldw	r2,-12(fp)
 1025484:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 1025488:	e0bff817 	ldw	r2,-32(fp)
 102548c:	10800808 	cmpgei	r2,r2,32
 1025490:	1000271e 	bne	r2,zero,1025530 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1025494:	0005303a 	rdctl	r2,status
 1025498:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 102549c:	e0fffb17 	ldw	r3,-20(fp)
 10254a0:	00bfff84 	movi	r2,-2
 10254a4:	1884703a 	and	r2,r3,r2
 10254a8:	1001703a 	wrctl	status,r2
  
  return context;
 10254ac:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 10254b0:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 10254b4:	008040f4 	movhi	r2,259
 10254b8:	10a5d104 	addi	r2,r2,-26812
 10254bc:	e0fff817 	ldw	r3,-32(fp)
 10254c0:	180690fa 	slli	r3,r3,3
 10254c4:	10c5883a 	add	r2,r2,r3
 10254c8:	e0fffe17 	ldw	r3,-8(fp)
 10254cc:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 10254d0:	008040f4 	movhi	r2,259
 10254d4:	10a5d104 	addi	r2,r2,-26812
 10254d8:	e0fff817 	ldw	r3,-32(fp)
 10254dc:	180690fa 	slli	r3,r3,3
 10254e0:	10c5883a 	add	r2,r2,r3
 10254e4:	10800104 	addi	r2,r2,4
 10254e8:	e0ffff17 	ldw	r3,-4(fp)
 10254ec:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 10254f0:	e0bffe17 	ldw	r2,-8(fp)
 10254f4:	10000526 	beq	r2,zero,102550c <alt_iic_isr_register+0xb4>
 10254f8:	e0bff817 	ldw	r2,-32(fp)
 10254fc:	100b883a 	mov	r5,r2
 1025500:	e13ffc17 	ldw	r4,-16(fp)
 1025504:	10252f80 	call	10252f8 <alt_ic_irq_enable>
 1025508:	00000406 	br	102551c <alt_iic_isr_register+0xc4>
 102550c:	e0bff817 	ldw	r2,-32(fp)
 1025510:	100b883a 	mov	r5,r2
 1025514:	e13ffc17 	ldw	r4,-16(fp)
 1025518:	10253800 	call	1025380 <alt_ic_irq_disable>
 102551c:	e0bff715 	stw	r2,-36(fp)
 1025520:	e0bffa17 	ldw	r2,-24(fp)
 1025524:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1025528:	e0bff917 	ldw	r2,-28(fp)
 102552c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 1025530:	e0bff717 	ldw	r2,-36(fp)
}
 1025534:	e037883a 	mov	sp,fp
 1025538:	dfc00117 	ldw	ra,4(sp)
 102553c:	df000017 	ldw	fp,0(sp)
 1025540:	dec00204 	addi	sp,sp,8
 1025544:	f800283a 	ret

01025548 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 1025548:	defff904 	addi	sp,sp,-28
 102554c:	dfc00615 	stw	ra,24(sp)
 1025550:	df000515 	stw	fp,20(sp)
 1025554:	df000504 	addi	fp,sp,20
 1025558:	e13ffc15 	stw	r4,-16(fp)
 102555c:	e17ffd15 	stw	r5,-12(fp)
 1025560:	e1bffe15 	stw	r6,-8(fp)
 1025564:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 1025568:	e1bfff17 	ldw	r6,-4(fp)
 102556c:	e17ffe17 	ldw	r5,-8(fp)
 1025570:	e13ffd17 	ldw	r4,-12(fp)
 1025574:	10257880 	call	1025788 <open>
 1025578:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 102557c:	e0bffb17 	ldw	r2,-20(fp)
 1025580:	10001c16 	blt	r2,zero,10255f4 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 1025584:	008040b4 	movhi	r2,258
 1025588:	109a9b04 	addi	r2,r2,27244
 102558c:	e0fffb17 	ldw	r3,-20(fp)
 1025590:	18c00324 	muli	r3,r3,12
 1025594:	10c5883a 	add	r2,r2,r3
 1025598:	10c00017 	ldw	r3,0(r2)
 102559c:	e0bffc17 	ldw	r2,-16(fp)
 10255a0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 10255a4:	008040b4 	movhi	r2,258
 10255a8:	109a9b04 	addi	r2,r2,27244
 10255ac:	e0fffb17 	ldw	r3,-20(fp)
 10255b0:	18c00324 	muli	r3,r3,12
 10255b4:	10c5883a 	add	r2,r2,r3
 10255b8:	10800104 	addi	r2,r2,4
 10255bc:	10c00017 	ldw	r3,0(r2)
 10255c0:	e0bffc17 	ldw	r2,-16(fp)
 10255c4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 10255c8:	008040b4 	movhi	r2,258
 10255cc:	109a9b04 	addi	r2,r2,27244
 10255d0:	e0fffb17 	ldw	r3,-20(fp)
 10255d4:	18c00324 	muli	r3,r3,12
 10255d8:	10c5883a 	add	r2,r2,r3
 10255dc:	10800204 	addi	r2,r2,8
 10255e0:	10c00017 	ldw	r3,0(r2)
 10255e4:	e0bffc17 	ldw	r2,-16(fp)
 10255e8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 10255ec:	e13ffb17 	ldw	r4,-20(fp)
 10255f0:	1023f680 	call	1023f68 <alt_release_fd>
  }
} 
 10255f4:	0001883a 	nop
 10255f8:	e037883a 	mov	sp,fp
 10255fc:	dfc00117 	ldw	ra,4(sp)
 1025600:	df000017 	ldw	fp,0(sp)
 1025604:	dec00204 	addi	sp,sp,8
 1025608:	f800283a 	ret

0102560c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 102560c:	defffb04 	addi	sp,sp,-20
 1025610:	dfc00415 	stw	ra,16(sp)
 1025614:	df000315 	stw	fp,12(sp)
 1025618:	df000304 	addi	fp,sp,12
 102561c:	e13ffd15 	stw	r4,-12(fp)
 1025620:	e17ffe15 	stw	r5,-8(fp)
 1025624:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 1025628:	01c07fc4 	movi	r7,511
 102562c:	01800044 	movi	r6,1
 1025630:	e17ffd17 	ldw	r5,-12(fp)
 1025634:	010040b4 	movhi	r4,258
 1025638:	211a9e04 	addi	r4,r4,27256
 102563c:	10255480 	call	1025548 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 1025640:	01c07fc4 	movi	r7,511
 1025644:	000d883a 	mov	r6,zero
 1025648:	e17ffe17 	ldw	r5,-8(fp)
 102564c:	010040b4 	movhi	r4,258
 1025650:	211a9b04 	addi	r4,r4,27244
 1025654:	10255480 	call	1025548 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 1025658:	01c07fc4 	movi	r7,511
 102565c:	01800044 	movi	r6,1
 1025660:	e17fff17 	ldw	r5,-4(fp)
 1025664:	010040b4 	movhi	r4,258
 1025668:	211aa104 	addi	r4,r4,27268
 102566c:	10255480 	call	1025548 <alt_open_fd>
}  
 1025670:	0001883a 	nop
 1025674:	e037883a 	mov	sp,fp
 1025678:	dfc00117 	ldw	ra,4(sp)
 102567c:	df000017 	ldw	fp,0(sp)
 1025680:	dec00204 	addi	sp,sp,8
 1025684:	f800283a 	ret

01025688 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1025688:	defffe04 	addi	sp,sp,-8
 102568c:	dfc00115 	stw	ra,4(sp)
 1025690:	df000015 	stw	fp,0(sp)
 1025694:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1025698:	d0a00917 	ldw	r2,-32732(gp)
 102569c:	10000326 	beq	r2,zero,10256ac <alt_get_errno+0x24>
 10256a0:	d0a00917 	ldw	r2,-32732(gp)
 10256a4:	103ee83a 	callr	r2
 10256a8:	00000106 	br	10256b0 <alt_get_errno+0x28>
 10256ac:	d0a6ac04 	addi	r2,gp,-25936
}
 10256b0:	e037883a 	mov	sp,fp
 10256b4:	dfc00117 	ldw	ra,4(sp)
 10256b8:	df000017 	ldw	fp,0(sp)
 10256bc:	dec00204 	addi	sp,sp,8
 10256c0:	f800283a 	ret

010256c4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 10256c4:	defffd04 	addi	sp,sp,-12
 10256c8:	df000215 	stw	fp,8(sp)
 10256cc:	df000204 	addi	fp,sp,8
 10256d0:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 10256d4:	e0bfff17 	ldw	r2,-4(fp)
 10256d8:	10800217 	ldw	r2,8(r2)
 10256dc:	10d00034 	orhi	r3,r2,16384
 10256e0:	e0bfff17 	ldw	r2,-4(fp)
 10256e4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 10256e8:	e03ffe15 	stw	zero,-8(fp)
 10256ec:	00001d06 	br	1025764 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 10256f0:	008040b4 	movhi	r2,258
 10256f4:	109a9b04 	addi	r2,r2,27244
 10256f8:	e0fffe17 	ldw	r3,-8(fp)
 10256fc:	18c00324 	muli	r3,r3,12
 1025700:	10c5883a 	add	r2,r2,r3
 1025704:	10c00017 	ldw	r3,0(r2)
 1025708:	e0bfff17 	ldw	r2,-4(fp)
 102570c:	10800017 	ldw	r2,0(r2)
 1025710:	1880111e 	bne	r3,r2,1025758 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 1025714:	008040b4 	movhi	r2,258
 1025718:	109a9b04 	addi	r2,r2,27244
 102571c:	e0fffe17 	ldw	r3,-8(fp)
 1025720:	18c00324 	muli	r3,r3,12
 1025724:	10c5883a 	add	r2,r2,r3
 1025728:	10800204 	addi	r2,r2,8
 102572c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 1025730:	1000090e 	bge	r2,zero,1025758 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 1025734:	e0bffe17 	ldw	r2,-8(fp)
 1025738:	10c00324 	muli	r3,r2,12
 102573c:	008040b4 	movhi	r2,258
 1025740:	109a9b04 	addi	r2,r2,27244
 1025744:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 1025748:	e0bfff17 	ldw	r2,-4(fp)
 102574c:	18800226 	beq	r3,r2,1025758 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 1025750:	00bffcc4 	movi	r2,-13
 1025754:	00000806 	br	1025778 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 1025758:	e0bffe17 	ldw	r2,-8(fp)
 102575c:	10800044 	addi	r2,r2,1
 1025760:	e0bffe15 	stw	r2,-8(fp)
 1025764:	d0a00817 	ldw	r2,-32736(gp)
 1025768:	1007883a 	mov	r3,r2
 102576c:	e0bffe17 	ldw	r2,-8(fp)
 1025770:	18bfdf2e 	bgeu	r3,r2,10256f0 <__alt_data_end+0xfffe8230>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 1025774:	0005883a 	mov	r2,zero
}
 1025778:	e037883a 	mov	sp,fp
 102577c:	df000017 	ldw	fp,0(sp)
 1025780:	dec00104 	addi	sp,sp,4
 1025784:	f800283a 	ret

01025788 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 1025788:	defff604 	addi	sp,sp,-40
 102578c:	dfc00915 	stw	ra,36(sp)
 1025790:	df000815 	stw	fp,32(sp)
 1025794:	df000804 	addi	fp,sp,32
 1025798:	e13ffd15 	stw	r4,-12(fp)
 102579c:	e17ffe15 	stw	r5,-8(fp)
 10257a0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 10257a4:	00bfffc4 	movi	r2,-1
 10257a8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 10257ac:	00bffb44 	movi	r2,-19
 10257b0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 10257b4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 10257b8:	d1600604 	addi	r5,gp,-32744
 10257bc:	e13ffd17 	ldw	r4,-12(fp)
 10257c0:	1025aa40 	call	1025aa4 <alt_find_dev>
 10257c4:	e0bff815 	stw	r2,-32(fp)
 10257c8:	e0bff817 	ldw	r2,-32(fp)
 10257cc:	1000051e 	bne	r2,zero,10257e4 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 10257d0:	e13ffd17 	ldw	r4,-12(fp)
 10257d4:	1025b340 	call	1025b34 <alt_find_file>
 10257d8:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 10257dc:	00800044 	movi	r2,1
 10257e0:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 10257e4:	e0bff817 	ldw	r2,-32(fp)
 10257e8:	10002926 	beq	r2,zero,1025890 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
 10257ec:	e13ff817 	ldw	r4,-32(fp)
 10257f0:	1025c3c0 	call	1025c3c <alt_get_fd>
 10257f4:	e0bff915 	stw	r2,-28(fp)
 10257f8:	e0bff917 	ldw	r2,-28(fp)
 10257fc:	1000030e 	bge	r2,zero,102580c <open+0x84>
    {
      status = index;
 1025800:	e0bff917 	ldw	r2,-28(fp)
 1025804:	e0bffa15 	stw	r2,-24(fp)
 1025808:	00002306 	br	1025898 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
 102580c:	e0bff917 	ldw	r2,-28(fp)
 1025810:	10c00324 	muli	r3,r2,12
 1025814:	008040b4 	movhi	r2,258
 1025818:	109a9b04 	addi	r2,r2,27244
 102581c:	1885883a 	add	r2,r3,r2
 1025820:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 1025824:	e0fffe17 	ldw	r3,-8(fp)
 1025828:	00900034 	movhi	r2,16384
 102582c:	10bfffc4 	addi	r2,r2,-1
 1025830:	1886703a 	and	r3,r3,r2
 1025834:	e0bffc17 	ldw	r2,-16(fp)
 1025838:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 102583c:	e0bffb17 	ldw	r2,-20(fp)
 1025840:	1000051e 	bne	r2,zero,1025858 <open+0xd0>
 1025844:	e13ffc17 	ldw	r4,-16(fp)
 1025848:	10256c40 	call	10256c4 <alt_file_locked>
 102584c:	e0bffa15 	stw	r2,-24(fp)
 1025850:	e0bffa17 	ldw	r2,-24(fp)
 1025854:	10001016 	blt	r2,zero,1025898 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 1025858:	e0bff817 	ldw	r2,-32(fp)
 102585c:	10800317 	ldw	r2,12(r2)
 1025860:	10000826 	beq	r2,zero,1025884 <open+0xfc>
 1025864:	e0bff817 	ldw	r2,-32(fp)
 1025868:	10800317 	ldw	r2,12(r2)
 102586c:	e1ffff17 	ldw	r7,-4(fp)
 1025870:	e1bffe17 	ldw	r6,-8(fp)
 1025874:	e17ffd17 	ldw	r5,-12(fp)
 1025878:	e13ffc17 	ldw	r4,-16(fp)
 102587c:	103ee83a 	callr	r2
 1025880:	00000106 	br	1025888 <open+0x100>
 1025884:	0005883a 	mov	r2,zero
 1025888:	e0bffa15 	stw	r2,-24(fp)
 102588c:	00000206 	br	1025898 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
 1025890:	00bffb44 	movi	r2,-19
 1025894:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 1025898:	e0bffa17 	ldw	r2,-24(fp)
 102589c:	1000090e 	bge	r2,zero,10258c4 <open+0x13c>
  {
    alt_release_fd (index);  
 10258a0:	e13ff917 	ldw	r4,-28(fp)
 10258a4:	1023f680 	call	1023f68 <alt_release_fd>
    ALT_ERRNO = -status;
 10258a8:	10256880 	call	1025688 <alt_get_errno>
 10258ac:	1007883a 	mov	r3,r2
 10258b0:	e0bffa17 	ldw	r2,-24(fp)
 10258b4:	0085c83a 	sub	r2,zero,r2
 10258b8:	18800015 	stw	r2,0(r3)
    return -1;
 10258bc:	00bfffc4 	movi	r2,-1
 10258c0:	00000106 	br	10258c8 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 10258c4:	e0bff917 	ldw	r2,-28(fp)
}
 10258c8:	e037883a 	mov	sp,fp
 10258cc:	dfc00117 	ldw	ra,4(sp)
 10258d0:	df000017 	ldw	fp,0(sp)
 10258d4:	dec00204 	addi	sp,sp,8
 10258d8:	f800283a 	ret

010258dc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 10258dc:	defffa04 	addi	sp,sp,-24
 10258e0:	df000515 	stw	fp,20(sp)
 10258e4:	df000504 	addi	fp,sp,20
 10258e8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10258ec:	0005303a 	rdctl	r2,status
 10258f0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10258f4:	e0fffc17 	ldw	r3,-16(fp)
 10258f8:	00bfff84 	movi	r2,-2
 10258fc:	1884703a 	and	r2,r3,r2
 1025900:	1001703a 	wrctl	status,r2
  
  return context;
 1025904:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 1025908:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 102590c:	e0bfff17 	ldw	r2,-4(fp)
 1025910:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 1025914:	e0bffd17 	ldw	r2,-12(fp)
 1025918:	10800017 	ldw	r2,0(r2)
 102591c:	e0fffd17 	ldw	r3,-12(fp)
 1025920:	18c00117 	ldw	r3,4(r3)
 1025924:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 1025928:	e0bffd17 	ldw	r2,-12(fp)
 102592c:	10800117 	ldw	r2,4(r2)
 1025930:	e0fffd17 	ldw	r3,-12(fp)
 1025934:	18c00017 	ldw	r3,0(r3)
 1025938:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 102593c:	e0bffd17 	ldw	r2,-12(fp)
 1025940:	e0fffd17 	ldw	r3,-12(fp)
 1025944:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 1025948:	e0bffd17 	ldw	r2,-12(fp)
 102594c:	e0fffd17 	ldw	r3,-12(fp)
 1025950:	10c00015 	stw	r3,0(r2)
 1025954:	e0bffb17 	ldw	r2,-20(fp)
 1025958:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 102595c:	e0bffe17 	ldw	r2,-8(fp)
 1025960:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 1025964:	0001883a 	nop
 1025968:	e037883a 	mov	sp,fp
 102596c:	df000017 	ldw	fp,0(sp)
 1025970:	dec00104 	addi	sp,sp,4
 1025974:	f800283a 	ret

01025978 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 1025978:	defffb04 	addi	sp,sp,-20
 102597c:	dfc00415 	stw	ra,16(sp)
 1025980:	df000315 	stw	fp,12(sp)
 1025984:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 1025988:	d0a00c17 	ldw	r2,-32720(gp)
 102598c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 1025990:	d0a6b217 	ldw	r2,-25912(gp)
 1025994:	10800044 	addi	r2,r2,1
 1025998:	d0a6b215 	stw	r2,-25912(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 102599c:	00002e06 	br	1025a58 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 10259a0:	e0bffd17 	ldw	r2,-12(fp)
 10259a4:	10800017 	ldw	r2,0(r2)
 10259a8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 10259ac:	e0bffd17 	ldw	r2,-12(fp)
 10259b0:	10800403 	ldbu	r2,16(r2)
 10259b4:	10803fcc 	andi	r2,r2,255
 10259b8:	10000426 	beq	r2,zero,10259cc <alt_tick+0x54>
 10259bc:	d0a6b217 	ldw	r2,-25912(gp)
 10259c0:	1000021e 	bne	r2,zero,10259cc <alt_tick+0x54>
    {
      alarm->rollover = 0;
 10259c4:	e0bffd17 	ldw	r2,-12(fp)
 10259c8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 10259cc:	e0bffd17 	ldw	r2,-12(fp)
 10259d0:	10800217 	ldw	r2,8(r2)
 10259d4:	d0e6b217 	ldw	r3,-25912(gp)
 10259d8:	18801d36 	bltu	r3,r2,1025a50 <alt_tick+0xd8>
 10259dc:	e0bffd17 	ldw	r2,-12(fp)
 10259e0:	10800403 	ldbu	r2,16(r2)
 10259e4:	10803fcc 	andi	r2,r2,255
 10259e8:	1000191e 	bne	r2,zero,1025a50 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 10259ec:	e0bffd17 	ldw	r2,-12(fp)
 10259f0:	10800317 	ldw	r2,12(r2)
 10259f4:	e0fffd17 	ldw	r3,-12(fp)
 10259f8:	18c00517 	ldw	r3,20(r3)
 10259fc:	1809883a 	mov	r4,r3
 1025a00:	103ee83a 	callr	r2
 1025a04:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 1025a08:	e0bfff17 	ldw	r2,-4(fp)
 1025a0c:	1000031e 	bne	r2,zero,1025a1c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 1025a10:	e13ffd17 	ldw	r4,-12(fp)
 1025a14:	10258dc0 	call	10258dc <alt_alarm_stop>
 1025a18:	00000d06 	br	1025a50 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 1025a1c:	e0bffd17 	ldw	r2,-12(fp)
 1025a20:	10c00217 	ldw	r3,8(r2)
 1025a24:	e0bfff17 	ldw	r2,-4(fp)
 1025a28:	1887883a 	add	r3,r3,r2
 1025a2c:	e0bffd17 	ldw	r2,-12(fp)
 1025a30:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 1025a34:	e0bffd17 	ldw	r2,-12(fp)
 1025a38:	10c00217 	ldw	r3,8(r2)
 1025a3c:	d0a6b217 	ldw	r2,-25912(gp)
 1025a40:	1880032e 	bgeu	r3,r2,1025a50 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 1025a44:	e0bffd17 	ldw	r2,-12(fp)
 1025a48:	00c00044 	movi	r3,1
 1025a4c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 1025a50:	e0bffe17 	ldw	r2,-8(fp)
 1025a54:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 1025a58:	e0fffd17 	ldw	r3,-12(fp)
 1025a5c:	d0a00c04 	addi	r2,gp,-32720
 1025a60:	18bfcf1e 	bne	r3,r2,10259a0 <__alt_data_end+0xfffe84e0>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 1025a64:	0001883a 	nop
}
 1025a68:	0001883a 	nop
 1025a6c:	e037883a 	mov	sp,fp
 1025a70:	dfc00117 	ldw	ra,4(sp)
 1025a74:	df000017 	ldw	fp,0(sp)
 1025a78:	dec00204 	addi	sp,sp,8
 1025a7c:	f800283a 	ret

01025a80 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 1025a80:	deffff04 	addi	sp,sp,-4
 1025a84:	df000015 	stw	fp,0(sp)
 1025a88:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 1025a8c:	000170fa 	wrctl	ienable,zero
}
 1025a90:	0001883a 	nop
 1025a94:	e037883a 	mov	sp,fp
 1025a98:	df000017 	ldw	fp,0(sp)
 1025a9c:	dec00104 	addi	sp,sp,4
 1025aa0:	f800283a 	ret

01025aa4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 1025aa4:	defffa04 	addi	sp,sp,-24
 1025aa8:	dfc00515 	stw	ra,20(sp)
 1025aac:	df000415 	stw	fp,16(sp)
 1025ab0:	df000404 	addi	fp,sp,16
 1025ab4:	e13ffe15 	stw	r4,-8(fp)
 1025ab8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 1025abc:	e0bfff17 	ldw	r2,-4(fp)
 1025ac0:	10800017 	ldw	r2,0(r2)
 1025ac4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 1025ac8:	e13ffe17 	ldw	r4,-8(fp)
 1025acc:	1020b780 	call	1020b78 <strlen>
 1025ad0:	10800044 	addi	r2,r2,1
 1025ad4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 1025ad8:	00000d06 	br	1025b10 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 1025adc:	e0bffc17 	ldw	r2,-16(fp)
 1025ae0:	10800217 	ldw	r2,8(r2)
 1025ae4:	e0fffd17 	ldw	r3,-12(fp)
 1025ae8:	180d883a 	mov	r6,r3
 1025aec:	e17ffe17 	ldw	r5,-8(fp)
 1025af0:	1009883a 	mov	r4,r2
 1025af4:	1025e580 	call	1025e58 <memcmp>
 1025af8:	1000021e 	bne	r2,zero,1025b04 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 1025afc:	e0bffc17 	ldw	r2,-16(fp)
 1025b00:	00000706 	br	1025b20 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 1025b04:	e0bffc17 	ldw	r2,-16(fp)
 1025b08:	10800017 	ldw	r2,0(r2)
 1025b0c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 1025b10:	e0fffc17 	ldw	r3,-16(fp)
 1025b14:	e0bfff17 	ldw	r2,-4(fp)
 1025b18:	18bff01e 	bne	r3,r2,1025adc <__alt_data_end+0xfffe861c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 1025b1c:	0005883a 	mov	r2,zero
}
 1025b20:	e037883a 	mov	sp,fp
 1025b24:	dfc00117 	ldw	ra,4(sp)
 1025b28:	df000017 	ldw	fp,0(sp)
 1025b2c:	dec00204 	addi	sp,sp,8
 1025b30:	f800283a 	ret

01025b34 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 1025b34:	defffb04 	addi	sp,sp,-20
 1025b38:	dfc00415 	stw	ra,16(sp)
 1025b3c:	df000315 	stw	fp,12(sp)
 1025b40:	df000304 	addi	fp,sp,12
 1025b44:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 1025b48:	d0a00417 	ldw	r2,-32752(gp)
 1025b4c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 1025b50:	00003106 	br	1025c18 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 1025b54:	e0bffd17 	ldw	r2,-12(fp)
 1025b58:	10800217 	ldw	r2,8(r2)
 1025b5c:	1009883a 	mov	r4,r2
 1025b60:	1020b780 	call	1020b78 <strlen>
 1025b64:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 1025b68:	e0bffd17 	ldw	r2,-12(fp)
 1025b6c:	10c00217 	ldw	r3,8(r2)
 1025b70:	e0bffe17 	ldw	r2,-8(fp)
 1025b74:	10bfffc4 	addi	r2,r2,-1
 1025b78:	1885883a 	add	r2,r3,r2
 1025b7c:	10800003 	ldbu	r2,0(r2)
 1025b80:	10803fcc 	andi	r2,r2,255
 1025b84:	1080201c 	xori	r2,r2,128
 1025b88:	10bfe004 	addi	r2,r2,-128
 1025b8c:	10800bd8 	cmpnei	r2,r2,47
 1025b90:	1000031e 	bne	r2,zero,1025ba0 <alt_find_file+0x6c>
    {
      len -= 1;
 1025b94:	e0bffe17 	ldw	r2,-8(fp)
 1025b98:	10bfffc4 	addi	r2,r2,-1
 1025b9c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 1025ba0:	e0bffe17 	ldw	r2,-8(fp)
 1025ba4:	e0ffff17 	ldw	r3,-4(fp)
 1025ba8:	1885883a 	add	r2,r3,r2
 1025bac:	10800003 	ldbu	r2,0(r2)
 1025bb0:	10803fcc 	andi	r2,r2,255
 1025bb4:	1080201c 	xori	r2,r2,128
 1025bb8:	10bfe004 	addi	r2,r2,-128
 1025bbc:	10800be0 	cmpeqi	r2,r2,47
 1025bc0:	1000081e 	bne	r2,zero,1025be4 <alt_find_file+0xb0>
 1025bc4:	e0bffe17 	ldw	r2,-8(fp)
 1025bc8:	e0ffff17 	ldw	r3,-4(fp)
 1025bcc:	1885883a 	add	r2,r3,r2
 1025bd0:	10800003 	ldbu	r2,0(r2)
 1025bd4:	10803fcc 	andi	r2,r2,255
 1025bd8:	1080201c 	xori	r2,r2,128
 1025bdc:	10bfe004 	addi	r2,r2,-128
 1025be0:	10000a1e 	bne	r2,zero,1025c0c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 1025be4:	e0bffd17 	ldw	r2,-12(fp)
 1025be8:	10800217 	ldw	r2,8(r2)
 1025bec:	e0fffe17 	ldw	r3,-8(fp)
 1025bf0:	180d883a 	mov	r6,r3
 1025bf4:	e17fff17 	ldw	r5,-4(fp)
 1025bf8:	1009883a 	mov	r4,r2
 1025bfc:	1025e580 	call	1025e58 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 1025c00:	1000021e 	bne	r2,zero,1025c0c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 1025c04:	e0bffd17 	ldw	r2,-12(fp)
 1025c08:	00000706 	br	1025c28 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 1025c0c:	e0bffd17 	ldw	r2,-12(fp)
 1025c10:	10800017 	ldw	r2,0(r2)
 1025c14:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 1025c18:	e0fffd17 	ldw	r3,-12(fp)
 1025c1c:	d0a00404 	addi	r2,gp,-32752
 1025c20:	18bfcc1e 	bne	r3,r2,1025b54 <__alt_data_end+0xfffe8694>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 1025c24:	0005883a 	mov	r2,zero
}
 1025c28:	e037883a 	mov	sp,fp
 1025c2c:	dfc00117 	ldw	ra,4(sp)
 1025c30:	df000017 	ldw	fp,0(sp)
 1025c34:	dec00204 	addi	sp,sp,8
 1025c38:	f800283a 	ret

01025c3c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 1025c3c:	defffc04 	addi	sp,sp,-16
 1025c40:	df000315 	stw	fp,12(sp)
 1025c44:	df000304 	addi	fp,sp,12
 1025c48:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 1025c4c:	00bffa04 	movi	r2,-24
 1025c50:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 1025c54:	e03ffd15 	stw	zero,-12(fp)
 1025c58:	00001906 	br	1025cc0 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
 1025c5c:	008040b4 	movhi	r2,258
 1025c60:	109a9b04 	addi	r2,r2,27244
 1025c64:	e0fffd17 	ldw	r3,-12(fp)
 1025c68:	18c00324 	muli	r3,r3,12
 1025c6c:	10c5883a 	add	r2,r2,r3
 1025c70:	10800017 	ldw	r2,0(r2)
 1025c74:	10000f1e 	bne	r2,zero,1025cb4 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
 1025c78:	008040b4 	movhi	r2,258
 1025c7c:	109a9b04 	addi	r2,r2,27244
 1025c80:	e0fffd17 	ldw	r3,-12(fp)
 1025c84:	18c00324 	muli	r3,r3,12
 1025c88:	10c5883a 	add	r2,r2,r3
 1025c8c:	e0ffff17 	ldw	r3,-4(fp)
 1025c90:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 1025c94:	d0e00817 	ldw	r3,-32736(gp)
 1025c98:	e0bffd17 	ldw	r2,-12(fp)
 1025c9c:	1880020e 	bge	r3,r2,1025ca8 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
 1025ca0:	e0bffd17 	ldw	r2,-12(fp)
 1025ca4:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
 1025ca8:	e0bffd17 	ldw	r2,-12(fp)
 1025cac:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 1025cb0:	00000606 	br	1025ccc <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 1025cb4:	e0bffd17 	ldw	r2,-12(fp)
 1025cb8:	10800044 	addi	r2,r2,1
 1025cbc:	e0bffd15 	stw	r2,-12(fp)
 1025cc0:	e0bffd17 	ldw	r2,-12(fp)
 1025cc4:	10800810 	cmplti	r2,r2,32
 1025cc8:	103fe41e 	bne	r2,zero,1025c5c <__alt_data_end+0xfffe879c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 1025ccc:	e0bffe17 	ldw	r2,-8(fp)
}
 1025cd0:	e037883a 	mov	sp,fp
 1025cd4:	df000017 	ldw	fp,0(sp)
 1025cd8:	dec00104 	addi	sp,sp,4
 1025cdc:	f800283a 	ret

01025ce0 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 1025ce0:	defffb04 	addi	sp,sp,-20
 1025ce4:	df000415 	stw	fp,16(sp)
 1025ce8:	df000404 	addi	fp,sp,16
 1025cec:	e13ffe15 	stw	r4,-8(fp)
 1025cf0:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 1025cf4:	e0bfff17 	ldw	r2,-4(fp)
 1025cf8:	10840070 	cmpltui	r2,r2,4097
 1025cfc:	1000021e 	bne	r2,zero,1025d08 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 1025d00:	00840004 	movi	r2,4096
 1025d04:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 1025d08:	e0fffe17 	ldw	r3,-8(fp)
 1025d0c:	e0bfff17 	ldw	r2,-4(fp)
 1025d10:	1885883a 	add	r2,r3,r2
 1025d14:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 1025d18:	e0bffe17 	ldw	r2,-8(fp)
 1025d1c:	e0bffc15 	stw	r2,-16(fp)
 1025d20:	00000506 	br	1025d38 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 1025d24:	e0bffc17 	ldw	r2,-16(fp)
 1025d28:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 1025d2c:	e0bffc17 	ldw	r2,-16(fp)
 1025d30:	10800804 	addi	r2,r2,32
 1025d34:	e0bffc15 	stw	r2,-16(fp)
 1025d38:	e0fffc17 	ldw	r3,-16(fp)
 1025d3c:	e0bffd17 	ldw	r2,-12(fp)
 1025d40:	18bff836 	bltu	r3,r2,1025d24 <__alt_data_end+0xfffe8864>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 1025d44:	e0bffe17 	ldw	r2,-8(fp)
 1025d48:	108007cc 	andi	r2,r2,31
 1025d4c:	10000226 	beq	r2,zero,1025d58 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 1025d50:	e0bffc17 	ldw	r2,-16(fp)
 1025d54:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 1025d58:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 1025d5c:	0001883a 	nop
 1025d60:	e037883a 	mov	sp,fp
 1025d64:	df000017 	ldw	fp,0(sp)
 1025d68:	dec00104 	addi	sp,sp,4
 1025d6c:	f800283a 	ret

01025d70 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 1025d70:	defffe04 	addi	sp,sp,-8
 1025d74:	df000115 	stw	fp,4(sp)
 1025d78:	df000104 	addi	fp,sp,4
 1025d7c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 1025d80:	e0bfff17 	ldw	r2,-4(fp)
 1025d84:	10bffe84 	addi	r2,r2,-6
 1025d88:	10c00428 	cmpgeui	r3,r2,16
 1025d8c:	18001a1e 	bne	r3,zero,1025df8 <alt_exception_cause_generated_bad_addr+0x88>
 1025d90:	100690ba 	slli	r3,r2,2
 1025d94:	008040b4 	movhi	r2,258
 1025d98:	10976a04 	addi	r2,r2,23976
 1025d9c:	1885883a 	add	r2,r3,r2
 1025da0:	10800017 	ldw	r2,0(r2)
 1025da4:	1000683a 	jmp	r2
 1025da8:	01025de8 	cmpgeui	r4,zero,2423
 1025dac:	01025de8 	cmpgeui	r4,zero,2423
 1025db0:	01025df8 	rdprs	r4,zero,2423
 1025db4:	01025df8 	rdprs	r4,zero,2423
 1025db8:	01025df8 	rdprs	r4,zero,2423
 1025dbc:	01025de8 	cmpgeui	r4,zero,2423
 1025dc0:	01025df0 	cmpltui	r4,zero,2423
 1025dc4:	01025df8 	rdprs	r4,zero,2423
 1025dc8:	01025de8 	cmpgeui	r4,zero,2423
 1025dcc:	01025de8 	cmpgeui	r4,zero,2423
 1025dd0:	01025df8 	rdprs	r4,zero,2423
 1025dd4:	01025de8 	cmpgeui	r4,zero,2423
 1025dd8:	01025df0 	cmpltui	r4,zero,2423
 1025ddc:	01025df8 	rdprs	r4,zero,2423
 1025de0:	01025df8 	rdprs	r4,zero,2423
 1025de4:	01025de8 	cmpgeui	r4,zero,2423
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 1025de8:	00800044 	movi	r2,1
 1025dec:	00000306 	br	1025dfc <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 1025df0:	0005883a 	mov	r2,zero
 1025df4:	00000106 	br	1025dfc <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 1025df8:	0005883a 	mov	r2,zero
  }
}
 1025dfc:	e037883a 	mov	sp,fp
 1025e00:	df000017 	ldw	fp,0(sp)
 1025e04:	dec00104 	addi	sp,sp,4
 1025e08:	f800283a 	ret

01025e0c <atexit>:
 1025e0c:	200b883a 	mov	r5,r4
 1025e10:	000f883a 	mov	r7,zero
 1025e14:	000d883a 	mov	r6,zero
 1025e18:	0009883a 	mov	r4,zero
 1025e1c:	1025ed41 	jmpi	1025ed4 <__register_exitproc>

01025e20 <exit>:
 1025e20:	defffe04 	addi	sp,sp,-8
 1025e24:	000b883a 	mov	r5,zero
 1025e28:	dc000015 	stw	r16,0(sp)
 1025e2c:	dfc00115 	stw	ra,4(sp)
 1025e30:	2021883a 	mov	r16,r4
 1025e34:	1025fec0 	call	1025fec <__call_exitprocs>
 1025e38:	008040b4 	movhi	r2,258
 1025e3c:	109f1304 	addi	r2,r2,31820
 1025e40:	11000017 	ldw	r4,0(r2)
 1025e44:	20800f17 	ldw	r2,60(r4)
 1025e48:	10000126 	beq	r2,zero,1025e50 <exit+0x30>
 1025e4c:	103ee83a 	callr	r2
 1025e50:	8009883a 	mov	r4,r16
 1025e54:	102616c0 	call	102616c <_exit>

01025e58 <memcmp>:
 1025e58:	01c000c4 	movi	r7,3
 1025e5c:	3980192e 	bgeu	r7,r6,1025ec4 <memcmp+0x6c>
 1025e60:	2144b03a 	or	r2,r4,r5
 1025e64:	11c4703a 	and	r2,r2,r7
 1025e68:	10000f26 	beq	r2,zero,1025ea8 <memcmp+0x50>
 1025e6c:	20800003 	ldbu	r2,0(r4)
 1025e70:	28c00003 	ldbu	r3,0(r5)
 1025e74:	10c0151e 	bne	r2,r3,1025ecc <memcmp+0x74>
 1025e78:	31bfff84 	addi	r6,r6,-2
 1025e7c:	01ffffc4 	movi	r7,-1
 1025e80:	00000406 	br	1025e94 <memcmp+0x3c>
 1025e84:	20800003 	ldbu	r2,0(r4)
 1025e88:	28c00003 	ldbu	r3,0(r5)
 1025e8c:	31bfffc4 	addi	r6,r6,-1
 1025e90:	10c00e1e 	bne	r2,r3,1025ecc <memcmp+0x74>
 1025e94:	21000044 	addi	r4,r4,1
 1025e98:	29400044 	addi	r5,r5,1
 1025e9c:	31fff91e 	bne	r6,r7,1025e84 <__alt_data_end+0xfffe89c4>
 1025ea0:	0005883a 	mov	r2,zero
 1025ea4:	f800283a 	ret
 1025ea8:	20c00017 	ldw	r3,0(r4)
 1025eac:	28800017 	ldw	r2,0(r5)
 1025eb0:	18bfee1e 	bne	r3,r2,1025e6c <__alt_data_end+0xfffe89ac>
 1025eb4:	31bfff04 	addi	r6,r6,-4
 1025eb8:	21000104 	addi	r4,r4,4
 1025ebc:	29400104 	addi	r5,r5,4
 1025ec0:	39bff936 	bltu	r7,r6,1025ea8 <__alt_data_end+0xfffe89e8>
 1025ec4:	303fe91e 	bne	r6,zero,1025e6c <__alt_data_end+0xfffe89ac>
 1025ec8:	003ff506 	br	1025ea0 <__alt_data_end+0xfffe89e0>
 1025ecc:	10c5c83a 	sub	r2,r2,r3
 1025ed0:	f800283a 	ret

01025ed4 <__register_exitproc>:
 1025ed4:	defffa04 	addi	sp,sp,-24
 1025ed8:	dc000315 	stw	r16,12(sp)
 1025edc:	040040b4 	movhi	r16,258
 1025ee0:	841f1304 	addi	r16,r16,31820
 1025ee4:	80c00017 	ldw	r3,0(r16)
 1025ee8:	dc400415 	stw	r17,16(sp)
 1025eec:	dfc00515 	stw	ra,20(sp)
 1025ef0:	18805217 	ldw	r2,328(r3)
 1025ef4:	2023883a 	mov	r17,r4
 1025ef8:	10003726 	beq	r2,zero,1025fd8 <__register_exitproc+0x104>
 1025efc:	10c00117 	ldw	r3,4(r2)
 1025f00:	010007c4 	movi	r4,31
 1025f04:	20c00e16 	blt	r4,r3,1025f40 <__register_exitproc+0x6c>
 1025f08:	1a000044 	addi	r8,r3,1
 1025f0c:	8800221e 	bne	r17,zero,1025f98 <__register_exitproc+0xc4>
 1025f10:	18c00084 	addi	r3,r3,2
 1025f14:	18c7883a 	add	r3,r3,r3
 1025f18:	18c7883a 	add	r3,r3,r3
 1025f1c:	12000115 	stw	r8,4(r2)
 1025f20:	10c7883a 	add	r3,r2,r3
 1025f24:	19400015 	stw	r5,0(r3)
 1025f28:	0005883a 	mov	r2,zero
 1025f2c:	dfc00517 	ldw	ra,20(sp)
 1025f30:	dc400417 	ldw	r17,16(sp)
 1025f34:	dc000317 	ldw	r16,12(sp)
 1025f38:	dec00604 	addi	sp,sp,24
 1025f3c:	f800283a 	ret
 1025f40:	00800034 	movhi	r2,0
 1025f44:	10800004 	addi	r2,r2,0
 1025f48:	10002626 	beq	r2,zero,1025fe4 <__register_exitproc+0x110>
 1025f4c:	01006404 	movi	r4,400
 1025f50:	d9400015 	stw	r5,0(sp)
 1025f54:	d9800115 	stw	r6,4(sp)
 1025f58:	d9c00215 	stw	r7,8(sp)
 1025f5c:	00000000 	call	0 <__reset-0x1020000>
 1025f60:	d9400017 	ldw	r5,0(sp)
 1025f64:	d9800117 	ldw	r6,4(sp)
 1025f68:	d9c00217 	ldw	r7,8(sp)
 1025f6c:	10001d26 	beq	r2,zero,1025fe4 <__register_exitproc+0x110>
 1025f70:	81000017 	ldw	r4,0(r16)
 1025f74:	10000115 	stw	zero,4(r2)
 1025f78:	02000044 	movi	r8,1
 1025f7c:	22405217 	ldw	r9,328(r4)
 1025f80:	0007883a 	mov	r3,zero
 1025f84:	12400015 	stw	r9,0(r2)
 1025f88:	20805215 	stw	r2,328(r4)
 1025f8c:	10006215 	stw	zero,392(r2)
 1025f90:	10006315 	stw	zero,396(r2)
 1025f94:	883fde26 	beq	r17,zero,1025f10 <__alt_data_end+0xfffe8a50>
 1025f98:	18c9883a 	add	r4,r3,r3
 1025f9c:	2109883a 	add	r4,r4,r4
 1025fa0:	1109883a 	add	r4,r2,r4
 1025fa4:	21802215 	stw	r6,136(r4)
 1025fa8:	01800044 	movi	r6,1
 1025fac:	12406217 	ldw	r9,392(r2)
 1025fb0:	30cc983a 	sll	r6,r6,r3
 1025fb4:	4992b03a 	or	r9,r9,r6
 1025fb8:	12406215 	stw	r9,392(r2)
 1025fbc:	21c04215 	stw	r7,264(r4)
 1025fc0:	01000084 	movi	r4,2
 1025fc4:	893fd21e 	bne	r17,r4,1025f10 <__alt_data_end+0xfffe8a50>
 1025fc8:	11006317 	ldw	r4,396(r2)
 1025fcc:	218cb03a 	or	r6,r4,r6
 1025fd0:	11806315 	stw	r6,396(r2)
 1025fd4:	003fce06 	br	1025f10 <__alt_data_end+0xfffe8a50>
 1025fd8:	18805304 	addi	r2,r3,332
 1025fdc:	18805215 	stw	r2,328(r3)
 1025fe0:	003fc606 	br	1025efc <__alt_data_end+0xfffe8a3c>
 1025fe4:	00bfffc4 	movi	r2,-1
 1025fe8:	003fd006 	br	1025f2c <__alt_data_end+0xfffe8a6c>

01025fec <__call_exitprocs>:
 1025fec:	defff504 	addi	sp,sp,-44
 1025ff0:	df000915 	stw	fp,36(sp)
 1025ff4:	dd400615 	stw	r21,24(sp)
 1025ff8:	dc800315 	stw	r18,12(sp)
 1025ffc:	dfc00a15 	stw	ra,40(sp)
 1026000:	ddc00815 	stw	r23,32(sp)
 1026004:	dd800715 	stw	r22,28(sp)
 1026008:	dd000515 	stw	r20,20(sp)
 102600c:	dcc00415 	stw	r19,16(sp)
 1026010:	dc400215 	stw	r17,8(sp)
 1026014:	dc000115 	stw	r16,4(sp)
 1026018:	d9000015 	stw	r4,0(sp)
 102601c:	2839883a 	mov	fp,r5
 1026020:	04800044 	movi	r18,1
 1026024:	057fffc4 	movi	r21,-1
 1026028:	008040b4 	movhi	r2,258
 102602c:	109f1304 	addi	r2,r2,31820
 1026030:	12000017 	ldw	r8,0(r2)
 1026034:	45005217 	ldw	r20,328(r8)
 1026038:	44c05204 	addi	r19,r8,328
 102603c:	a0001c26 	beq	r20,zero,10260b0 <__call_exitprocs+0xc4>
 1026040:	a0800117 	ldw	r2,4(r20)
 1026044:	15ffffc4 	addi	r23,r2,-1
 1026048:	b8000d16 	blt	r23,zero,1026080 <__call_exitprocs+0x94>
 102604c:	14000044 	addi	r16,r2,1
 1026050:	8421883a 	add	r16,r16,r16
 1026054:	8421883a 	add	r16,r16,r16
 1026058:	84402004 	addi	r17,r16,128
 102605c:	a463883a 	add	r17,r20,r17
 1026060:	a421883a 	add	r16,r20,r16
 1026064:	e0001e26 	beq	fp,zero,10260e0 <__call_exitprocs+0xf4>
 1026068:	80804017 	ldw	r2,256(r16)
 102606c:	e0801c26 	beq	fp,r2,10260e0 <__call_exitprocs+0xf4>
 1026070:	bdffffc4 	addi	r23,r23,-1
 1026074:	843fff04 	addi	r16,r16,-4
 1026078:	8c7fff04 	addi	r17,r17,-4
 102607c:	bd7ff91e 	bne	r23,r21,1026064 <__alt_data_end+0xfffe8ba4>
 1026080:	00800034 	movhi	r2,0
 1026084:	10800004 	addi	r2,r2,0
 1026088:	10000926 	beq	r2,zero,10260b0 <__call_exitprocs+0xc4>
 102608c:	a0800117 	ldw	r2,4(r20)
 1026090:	1000301e 	bne	r2,zero,1026154 <__call_exitprocs+0x168>
 1026094:	a0800017 	ldw	r2,0(r20)
 1026098:	10003226 	beq	r2,zero,1026164 <__call_exitprocs+0x178>
 102609c:	a009883a 	mov	r4,r20
 10260a0:	98800015 	stw	r2,0(r19)
 10260a4:	00000000 	call	0 <__reset-0x1020000>
 10260a8:	9d000017 	ldw	r20,0(r19)
 10260ac:	a03fe41e 	bne	r20,zero,1026040 <__alt_data_end+0xfffe8b80>
 10260b0:	dfc00a17 	ldw	ra,40(sp)
 10260b4:	df000917 	ldw	fp,36(sp)
 10260b8:	ddc00817 	ldw	r23,32(sp)
 10260bc:	dd800717 	ldw	r22,28(sp)
 10260c0:	dd400617 	ldw	r21,24(sp)
 10260c4:	dd000517 	ldw	r20,20(sp)
 10260c8:	dcc00417 	ldw	r19,16(sp)
 10260cc:	dc800317 	ldw	r18,12(sp)
 10260d0:	dc400217 	ldw	r17,8(sp)
 10260d4:	dc000117 	ldw	r16,4(sp)
 10260d8:	dec00b04 	addi	sp,sp,44
 10260dc:	f800283a 	ret
 10260e0:	a0800117 	ldw	r2,4(r20)
 10260e4:	80c00017 	ldw	r3,0(r16)
 10260e8:	10bfffc4 	addi	r2,r2,-1
 10260ec:	15c01426 	beq	r2,r23,1026140 <__call_exitprocs+0x154>
 10260f0:	80000015 	stw	zero,0(r16)
 10260f4:	183fde26 	beq	r3,zero,1026070 <__alt_data_end+0xfffe8bb0>
 10260f8:	95c8983a 	sll	r4,r18,r23
 10260fc:	a0806217 	ldw	r2,392(r20)
 1026100:	a5800117 	ldw	r22,4(r20)
 1026104:	2084703a 	and	r2,r4,r2
 1026108:	10000b26 	beq	r2,zero,1026138 <__call_exitprocs+0x14c>
 102610c:	a0806317 	ldw	r2,396(r20)
 1026110:	2088703a 	and	r4,r4,r2
 1026114:	20000c1e 	bne	r4,zero,1026148 <__call_exitprocs+0x15c>
 1026118:	89400017 	ldw	r5,0(r17)
 102611c:	d9000017 	ldw	r4,0(sp)
 1026120:	183ee83a 	callr	r3
 1026124:	a0800117 	ldw	r2,4(r20)
 1026128:	15bfbf1e 	bne	r2,r22,1026028 <__alt_data_end+0xfffe8b68>
 102612c:	98800017 	ldw	r2,0(r19)
 1026130:	153fcf26 	beq	r2,r20,1026070 <__alt_data_end+0xfffe8bb0>
 1026134:	003fbc06 	br	1026028 <__alt_data_end+0xfffe8b68>
 1026138:	183ee83a 	callr	r3
 102613c:	003ff906 	br	1026124 <__alt_data_end+0xfffe8c64>
 1026140:	a5c00115 	stw	r23,4(r20)
 1026144:	003feb06 	br	10260f4 <__alt_data_end+0xfffe8c34>
 1026148:	89000017 	ldw	r4,0(r17)
 102614c:	183ee83a 	callr	r3
 1026150:	003ff406 	br	1026124 <__alt_data_end+0xfffe8c64>
 1026154:	a0800017 	ldw	r2,0(r20)
 1026158:	a027883a 	mov	r19,r20
 102615c:	1029883a 	mov	r20,r2
 1026160:	003fb606 	br	102603c <__alt_data_end+0xfffe8b7c>
 1026164:	0005883a 	mov	r2,zero
 1026168:	003ffb06 	br	1026158 <__alt_data_end+0xfffe8c98>

0102616c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 102616c:	defffd04 	addi	sp,sp,-12
 1026170:	df000215 	stw	fp,8(sp)
 1026174:	df000204 	addi	fp,sp,8
 1026178:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 102617c:	0001883a 	nop
 1026180:	e0bfff17 	ldw	r2,-4(fp)
 1026184:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 1026188:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 102618c:	10000226 	beq	r2,zero,1026198 <_exit+0x2c>
    ALT_SIM_FAIL();
 1026190:	002af070 	cmpltui	zero,zero,43969
 1026194:	00000106 	br	102619c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 1026198:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 102619c:	003fff06 	br	102619c <__alt_data_end+0xfffe8cdc>
